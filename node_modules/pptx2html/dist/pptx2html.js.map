{"version":3,"file":"pptx2html.js","sources":["node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/_fix-re-wks.js","node_modules/core-js/modules/es6.regexp.replace.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/es6.regexp.split.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/es6.array.find.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_create-property.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/es6.array.from.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_an-instance.js","node_modules/core-js/modules/_for-of.js","node_modules/core-js/modules/_species-constructor.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/_microtask.js","node_modules/core-js/modules/_new-promise-capability.js","node_modules/core-js/modules/_perform.js","node_modules/core-js/modules/_promise-resolve.js","node_modules/core-js/modules/_redefine-all.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/es6.promise.js","node_modules/core-js/modules/_typed.js","node_modules/core-js/modules/_to-index.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-absolute-index.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/_typed-buffer.js","node_modules/core-js/modules/es6.typed.data-view.js","node_modules/core-js/modules/es6.function.name.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/es6.symbol.js","rollupPluginBabelHelpers","node_modules/regenerator-runtime/runtime.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/_typed-array.js","node_modules/core-js/modules/es6.typed.uint8-array.js","src/txml.js","node_modules/colz/src/colz.js","src/process_pptx.js","src/pptx_css.js","src/main.js"],"sourcesContent":["module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = require('./_is-regexp');\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","module.exports = {};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","module.exports = false;\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) return false;\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) return false;\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","exports.f = {}.propertyIsEnumerable;\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","export { _typeof as typeof, _jsx as jsx, _asyncIterator as asyncIterator, _AwaitValue as AwaitValue, _AsyncGenerator as AsyncGenerator, _wrapAsyncGenerator as wrapAsyncGenerator, _awaitAsyncGenerator as awaitAsyncGenerator, _asyncGeneratorDelegate as asyncGeneratorDelegate, _asyncToGenerator as asyncToGenerator, _classCallCheck as classCallCheck, _createClass as createClass, _defineEnumerableProperties as defineEnumerableProperties, _defaults as defaults, _defineProperty as defineProperty, _extends as extends, _get as get, _inherits as inherits, _inheritsLoose as inheritsLoose, _instanceof as instanceof, _interopRequireDefault as interopRequireDefault, _interopRequireWildcard as interopRequireWildcard, _newArrowCheck as newArrowCheck, _objectDestructuringEmpty as objectDestructuringEmpty, _objectWithoutProperties as objectWithoutProperties, _possibleConstructorReturn as possibleConstructorReturn, _set as set, _slicedToArray as slicedToArray, _slicedToArrayLoose as slicedToArrayLoose, _taggedTemplateLiteral as taggedTemplateLiteral, _taggedTemplateLiteralLoose as taggedTemplateLiteralLoose, _temporalRef as temporalRef, _temporalUndefined as temporalUndefined, _toArray as toArray, _toConsumableArray as toConsumableArray, _skipFirstGeneratorNext as skipFirstGeneratorNext, _toPropertyKey as toPropertyKey };\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar REACT_ELEMENT_TYPE;\n\nfunction _jsx(type, props, key, children) {\n  if (!REACT_ELEMENT_TYPE) {\n    REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  }\n\n  var defaultProps = type && type.defaultProps;\n  var childrenLength = arguments.length - 3;\n\n  if (!props && childrenLength !== 0) {\n    props = {};\n  }\n\n  if (props && defaultProps) {\n    for (var propName in defaultProps) {\n      if (props[propName] === void 0) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  } else if (!props) {\n    props = defaultProps || {};\n  }\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = new Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 3];\n    }\n\n    props.children = childArray;\n  }\n\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key === undefined ? null : '' + key,\n    ref: null,\n    props: props,\n    _owner: null\n  };\n}\n\nfunction _asyncIterator(iterable) {\n  if (typeof Symbol === \"function\") {\n    if (Symbol.asyncIterator) {\n      var method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      return iterable[Symbol.iterator]();\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nfunction _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nfunction _AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof _AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(\"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen.return !== \"function\") {\n    this.return = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\n_AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\n_AsyncGenerator.prototype.throw = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\n_AsyncGenerator.prototype.return = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nfunction _wrapAsyncGenerator(fn) {\n  return function () {\n    return new _AsyncGenerator(fn.apply(this, arguments));\n  };\n}\n\nfunction _awaitAsyncGenerator(value) {\n  return new _AwaitValue(value);\n}\n\nfunction _asyncGeneratorDelegate(inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner.throw === \"function\") {\n    iter.throw = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner.return === \"function\") {\n    iter.return = function (value) {\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          Promise.resolve(value).then(_next, _throw);\n        }\n      }\n\n      function _next(value) {\n        step(\"next\", value);\n      }\n\n      function _throw(err) {\n        step(\"throw\", err);\n      }\n\n      _next();\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineEnumerableProperties(obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var objectSymbols = Object.getOwnPropertySymbols(descs);\n\n    for (var i = 0; i < objectSymbols.length; i++) {\n      var sym = objectSymbols[i];\n      var desc = descs[sym];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, sym, desc);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return _get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _newArrowCheck(innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n}\n\nfunction _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      _set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n}\n\nfunction _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n}\n\nfunction _slicedToArrayLoose(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nfunction _temporalRef(val, name) {\n  if (val === _temporalUndefined) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n}\n\nvar _temporalUndefined = {};\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _skipFirstGeneratorNext(fn) {\n  return function () {\n    var it = fn.apply(this, arguments);\n    it.next();\n    return it;\n  };\n}\n\nfunction _toPropertyKey(key) {\n  if (typeof key === \"symbol\") {\n    return key;\n  } else {\n    return String(key);\n  }\n}","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict'\n\nlet _order = 1\n\nexport default function tXml (S) {\n  const openBracket = '<'\n  const openBracketCC = '<'.charCodeAt(0)\n  const closeBracket = '>'\n  const closeBracketCC = '>'.charCodeAt(0)\n  const minusCC = '-'.charCodeAt(0)\n  const slashCC = '/'.charCodeAt(0)\n  const exclamationCC = '!'.charCodeAt(0)\n  const singleQuoteCC = '\\''.charCodeAt(0)\n  const doubleQuoteCC = '\"'.charCodeAt(0)\n  const questionMarkCC = '?'.charCodeAt(0)\n\n  /**\n   *    returns text until the first nonAlphebetic letter\n   */\n  const nameSpacer = '\\r\\n\\t>/= '\n\n  let pos = 0\n\n  /**\n   * Parsing a list of entries\n   */\n  function parseChildren () {\n    const children = []\n    while (S[pos]) {\n      if (S.charCodeAt(pos) === openBracketCC) {\n        if (S.charCodeAt(pos + 1) === slashCC) { // </\n          // while (S[pos]!=='>') { pos++; }\n          pos = S.indexOf(closeBracket, pos)\n          return children\n        } else if (S.charCodeAt(pos + 1) === exclamationCC) { // <! or <!--\n          if (S.charCodeAt(pos + 2) === minusCC) {\n            // comment support\n            while (!(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) === minusCC &&\n              S.charCodeAt(pos - 2) === minusCC && pos !== -1)) {\n              pos = S.indexOf(closeBracket, pos + 1)\n            }\n            if (pos === -1) {\n              pos = S.length\n            }\n          } else {\n            // doctype support\n            pos += 2\n            for (; S.charCodeAt(pos) !== closeBracketCC; pos++) {}\n          }\n          pos++\n          continue\n        } else if (S.charCodeAt(pos + 1) === questionMarkCC) { // <?\n          // XML header support\n          pos = S.indexOf(closeBracket, pos)\n          pos++\n          continue\n        }\n        pos++\n        let startNamePos = pos\n        for (; nameSpacer.indexOf(S[pos]) === -1; pos++) {}\n        const nodeTagName = S.slice(startNamePos, pos)\n\n        // Parsing attributes\n        let attrFound = false\n        let nodeAttributes = {}\n        for (; S.charCodeAt(pos) !== closeBracketCC; pos++) {\n          const c = S.charCodeAt(pos)\n          if ((c > 64 && c < 91) || (c > 96 && c < 123)) {\n            startNamePos = pos\n            for (; nameSpacer.indexOf(S[pos]) === -1; pos++) {}\n            const name = S.slice(startNamePos, pos)\n            // search beginning of the string\n            let code = S.charCodeAt(pos)\n            while (code !== singleQuoteCC && code !== doubleQuoteCC) {\n              pos++\n              code = S.charCodeAt(pos)\n            }\n\n            const startChar = S[pos]\n            const startStringPos = ++pos\n            pos = S.indexOf(startChar, startStringPos)\n            const value = S.slice(startStringPos, pos)\n            if (!attrFound) {\n              nodeAttributes = {}\n              attrFound = true\n            }\n            nodeAttributes[name] = value\n          }\n        }\n\n        // Optional parsing of children\n        let nodeChildren\n        if (S.charCodeAt(pos - 1) !== slashCC) {\n          pos++\n          nodeChildren = parseChildren()\n        }\n\n        children.push({\n          'children': nodeChildren,\n          'tagName': nodeTagName,\n          'attrs': nodeAttributes\n        })\n      } else {\n        const startTextPos = pos\n        pos = S.indexOf(openBracket, pos) - 1 // Skip characters until '<'\n        if (pos === -2) {\n          pos = S.length\n        }\n        const text = S.slice(startTextPos, pos + 1)\n        if (text.trim().length > 0) {\n          children.push(text)\n        }\n      }\n      pos++\n    }\n    return children\n  }\n\n  _order = 1\n  return simplefy(parseChildren())\n}\n\nfunction simplefy (children) {\n  const node = {}\n\n  if (children === undefined) {\n    return {}\n  }\n\n  // Text node (e.g. <t>This is text.</t>)\n  if (children.length === 1 && (typeof children[0] === 'string' || children[0] instanceof String)) {\n    // eslint-disable-next-line no-new-wrappers\n    return new String(children[0])\n  }\n\n  // map each object\n  children.forEach(function (child) {\n    if (!node[child.tagName]) {\n      node[child.tagName] = []\n    }\n\n    if (typeof child === 'object') {\n      const kids = simplefy(child.children)\n      if (child.attrs) {\n        kids.attrs = child.attrs\n      }\n\n      if (kids['attrs'] === undefined) {\n        kids['attrs'] = {'order': _order}\n      } else {\n        kids['attrs']['order'] = _order\n      }\n      _order++\n      node[child.tagName].push(kids)\n    }\n  })\n\n  for (let i in node) {\n    if (node[i].length === 1) {\n      node[i] = node[i][0]\n    }\n  }\n\n  return node\n}\n","/**\n * Colorz (or Colz) is a Javascript \"library\" to help\n * in color conversion between the usual color-spaces\n * Hex - Rgb - Hsl / Hsv - Hsb\n *\n * It provides some helpers to output Canvas / CSS\n * color strings.\n *\n * by Carlos Cabo 2013\n * http://carloscabo.com\n *\n * Some formulas borrowed from Wikipedia or other authors.\n */\n\nconst round = Math.round\n\n/*\n ==================================\n Color constructors\n ==================================\n*/\n\nexport class Rgb {\n  constructor (col) {\n    this.r = col[0]\n    this.g = col[1]\n    this.b = col[2]\n  }\n\n  toString () {\n    return `rgb(${this.r},${this.g},${this.b})`\n  }\n}\n\nexport class Rgba extends Rgb {\n  constructor (col) {\n    super(col)\n    this.a = col[3]\n  }\n\n  toString () {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`\n  }\n}\n\nexport class Hsl {\n  constructor (col) {\n    this.h = col[0]\n    this.s = col[1]\n    this.l = col[2]\n  }\n\n  toString () {\n    return `hsl(${this.h},${this.s}%,${this.l}%)`\n  }\n}\n\nexport class Hsla extends Hsl {\n  constructor (col) {\n    super(col)\n    this.a = col[3]\n  }\n\n  toString () {\n    return `hsla(${this.h},${this.s}%,${this.l}%,${this.a})`\n  }\n}\n\n/*\n ==================================\n Main Colz color object\n ==================================\n*/\nexport class Color {\n  constructor (r, g, b, a = 1.0) {\n    // If args are not given in (r, g, b, [a]) format, convert\n    if (typeof r === 'string') {\n      let str = r\n      // Add initial '#' if missing\n      if (str.charAt(0) !== '#') { str = '#' + str }\n      // If Hex in #fff format convert to #ffffff\n      if (str.length < 7) {\n        str = '#' + str[1] + str[1] + str[2] + str[2] + str[3] + str[3]\n      }\n      ([r, g, b] = hexToRgb(str))\n    } else if (r instanceof Array) {\n      a = r[3] || a\n      b = r[2]\n      g = r[1]\n      r = r[0]\n    }\n\n    this.r = r\n    this.g = g\n    this.b = b\n    this.a = a\n\n    this.rgb = new Rgb([this.r, this.g, this.b])\n    this.rgba = new Rgba([this.r, this.g, this.b, this.a])\n    this.hex = rgbToHex(this.r, this.g, this.b)\n\n    this.hsl = new Hsl(rgbToHsl(this.r, this.g, this.b))\n    this.h = this.hsl.h\n    this.s = this.hsl.s\n    this.l = this.hsl.l\n    this.hsla = new Hsla([this.h, this.s, this.l, this.a])\n  }\n\n  setHue (newHue) {\n    this.h = newHue\n    this.hsl.h = newHue\n    this.hsla.h = newHue\n    this.updateFromHsl()\n  }\n\n  setSat (newSat) {\n    this.s = newSat\n    this.hsl.s = newSat\n    this.hsla.s = newSat\n    this.updateFromHsl()\n  }\n\n  setLum (newLum) {\n    this.l = newLum\n    this.hsl.l = newLum\n    this.hsla.l = newLum\n    this.updateFromHsl()\n  }\n\n  setAlpha (newAlpha) {\n    this.a = newAlpha\n    this.hsla.a = newAlpha\n    this.rgba.a = newAlpha\n  }\n\n  updateFromHsl () {\n    // Updates Rgb\n    this.rgb = null\n    this.rgb = new Rgb(hslToRgb(this.h, this.s, this.l))\n\n    this.r = this.rgb.r\n    this.g = this.rgb.g\n    this.b = this.rgb.b\n    this.rgba.r = this.rgb.r\n    this.rgba.g = this.rgb.g\n    this.rgba.b = this.rgb.b\n\n    // Updates Hex\n    this.hex = null\n    this.hex = rgbToHex([this.r, this.g, this.b])\n  }\n}\n\n/*\n ==================================\n Public Methods\n ==================================\n*/\n\nexport const randomColor = function () {\n  const r = '#' + Math.random().toString(16).slice(2, 8)\n  return new Color(r)\n}\n\nexport const hexToRgb = function (hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result ? [\n    parseInt(result[1], 16),\n    parseInt(result[2], 16),\n    parseInt(result[3], 16)\n  ] : null\n}\n\nexport const componentToHex = function (c) {\n  const hex = c.toString(16)\n  return hex.length === 1 ? '0' + hex : hex\n}\n\n// You can pass 3 numeric values or 1 Array\nexport const rgbToHex = function (r, g, b) {\n  if (r instanceof Array) {\n    b = r[2]\n    g = r[1]\n    r = r[0]\n  }\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n}\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {Number} r The red color value\n * @param {Number} g The green color value\n * @param {Number} b The blue color value\n * @return {Array} The HSL representation\n */\nexport const rgbToHsl = function (r, g, b) {\n  if (r instanceof Array) {\n    b = r[2]\n    g = r[1]\n    r = r[0]\n  }\n\n  let h, s, l, d, max, min\n\n  r /= 255\n  g /= 255\n  b /= 255\n\n  max = Math.max(r, g, b)\n  min = Math.min(r, g, b)\n  l = (max + min) / 2\n\n  if (max === min) {\n    h = s = 0 // achromatic\n  } else {\n    d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n\n    h /= 6\n  }\n\n  // CARLOS\n  h = round(h * 360)\n  s = round(s * 100)\n  l = round(l * 100)\n\n  return [h, s, l]\n}\n\nexport const hue2rgb = function (p, q, t) {\n  if (t < 0) { t += 1 }\n  if (t > 1) { t -= 1 }\n  if (t < 1 / 6) { return p + (q - p) * 6 * t }\n  if (t < 1 / 2) { return q }\n  if (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6 }\n  return p\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {Number} h The hue\n * @param {Number} s The saturation\n * @param {Number} l The lightness\n * @return {Array} The RGB representation\n */\n\nexport const hslToRgb = function (h, s, l) {\n  if (h instanceof Array) {\n    l = h[2]\n    s = h[1]\n    h = h[0]\n  }\n  h = h / 360\n  s = s / 100\n  l = l / 100\n\n  let r, g, b, q, p\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n  return [round(r * 255), round(g * 255), round(b * 255)]\n}\n\n/**\n * Converts an RGB color value to HSB / HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n *\n * @param {Number} r The red color value\n * @param {Number} g The green color value\n * @param {Number} b The blue color value\n * @return {Array} The HSB representation\n */\nexport const rgbToHsb = function (r, g, b) {\n  let max, min, h, s, v, d\n\n  r = r / 255\n  g = g / 255\n  b = b / 255\n\n  max = Math.max(r, g, b)\n  min = Math.min(r, g, b)\n  v = max\n\n  d = max - min\n  s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  // map top 360,100,100\n  h = round(h * 360)\n  s = round(s * 100)\n  v = round(v * 100)\n\n  return [h, s, v]\n}\n\n/**\n * Converts an HSB / HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n *\n * @param {Number} h The hue\n * @param {Number} s The saturation\n * @param {Number} v The value\n * @return {Array} The RGB representation\n */\nexport const hsbToRgb = function (h, s, v) {\n  let r, g, b, i, f, p, q, t\n\n  // h = h / 360;\n  if (v === 0) { return [0, 0, 0] }\n\n  s = s / 100\n  v = v / 100\n  h = h / 60\n\n  i = Math.floor(h)\n  f = h - i\n  p = v * (1 - s)\n  q = v * (1 - (s * f))\n  t = v * (1 - (s * (1 - f)))\n\n  if (i === 0) {\n    r = v\n    g = t\n    b = p\n  } else if (i === 1) {\n    r = q\n    g = v\n    b = p\n  } else if (i === 2) {\n    r = p\n    g = v\n    b = t\n  } else if (i === 3) {\n    r = p\n    g = q\n    b = v\n  } else if (i === 4) {\n    r = t\n    g = p\n    b = v\n  } else if (i === 5) {\n    r = v\n    g = p\n    b = q\n  }\n\n  r = Math.floor(r * 255)\n  g = Math.floor(g * 255)\n  b = Math.floor(b * 255)\n\n  return [r, g, b]\n}\n\nexport const hsvToRgb = hsbToRgb // alias\n\n/* Convert from Hsv */\nexport const hsbToHsl = function (h, s, b) {\n  return rgbToHsl(hsbToRgb(h, s, b))\n}\n\nexport const hsvToHsl = hsbToHsl // alias\n\n/*\n ==================================\n Color Scheme Builder\n ==================================\n*/\nexport class ColorScheme {\n  constructor (colorVal, angleArray) {\n    this.palette = []\n\n    if (angleArray === undefined && colorVal instanceof Array) {\n      // Asume you passing a color array ['#f00','#0f0'...]\n      this.createFromColors(colorVal)\n    } else {\n      // Create scheme from color + hue angles\n      this.createFromAngles(colorVal, angleArray)\n    }\n  }\n\n  createFromColors (colorVal) {\n    for (let i in colorVal) {\n      if (colorVal.hasOwnProperty(i)) {\n        // console.log(colorVal[i]);\n        this.palette.push(new Color(colorVal[i]))\n      }\n    }\n    return this.palette\n  }\n\n  createFromAngles (colorVal, angleArray) {\n    this.palette.push(new Color(colorVal))\n\n    for (let i in angleArray) {\n      if (angleArray.hasOwnProperty(i)) {\n        const tempHue = (this.palette[0].h + angleArray[i]) % 360\n        this.palette.push(new Color(hslToRgb(tempHue, this.palette[0].s, this.palette[0].l)))\n      }\n    }\n    return this.palette\n  }\n\n  /* Complementary colors constructors */\n  static Compl (colorVal) {\n    return new this(colorVal, [180])\n  }\n\n  /* Triad */\n  static Triad (colorVal) {\n    return new this(colorVal, [120, 240])\n  }\n\n  /* Tetrad */\n  static Tetrad (colorVal) {\n    return new this(colorVal, [60, 180, 240])\n  }\n\n  /* Analogous */\n  static Analog (colorVal) {\n    return new this(colorVal, [-45, 45])\n  }\n\n  /* Split complementary */\n  static Split (colorVal) {\n    return new this(colorVal, [150, 210])\n  }\n\n  /* Accented Analogous */\n  static Accent (colorVal) {\n    return new this(colorVal, [-45, 45, 180])\n  }\n}\n","/* global btoa, JSZip */\n'use strict'\n\nimport tXml from './txml'\nimport * as colz from 'colz'\n\nfunction base64ArrayBuffer (arrayBuff) {\n  const buff = new Uint8Array(arrayBuff)\n  let text = ''\n  for (let i = 0; i < buff.byteLength; i++) {\n    text += String.fromCharCode(buff[i])\n  }\n  return btoa(text)\n}\n\nfunction extractFileExtension (filename) {\n  const dot = filename.lastIndexOf('.')\n  if (dot === 0 || dot === -1) return ''\n  return filename.substr(filename.lastIndexOf('.') + 1)\n}\n\n/*\nfunction escapeHtml (text) {\n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#039;'\n  }\n  return text.replace(/[&<>\"']/g, m => map[m])\n}\n*/\nexport default function processPptx (setOnMessage = () => {}, postMessage) {\n  const charts = []\n  let chartID = 0\n\n  let themeContent = null\n\n  let slideLayoutClrOvride = ''\n\n  const styleTable = {}\n\n  let tableStyles\n\n  setOnMessage(async e => {\n    switch (e.type) {\n      case 'processPPTX': {\n        try {\n          await processPPTX(e.data)\n        } catch (e) {\n          console.error('AN ERROR HAPPENED DURING processPPTX', e)\n          postMessage({\n            type: 'ERROR',\n            data: e.toString()\n          })\n        }\n        break\n      }\n      default:\n    }\n  })\n\n  async function processPPTX (data) {\n    const zip = await JSZip.loadAsync(data)\n    const dateBefore = new Date()\n\n    if (zip.file('docProps/thumbnail.jpeg') !== null) {\n      const pptxThumbImg = await zip.file('docProps/thumbnail.jpeg').async('base64')\n      postMessage({\n        'type': 'pptx-thumb',\n        'data': pptxThumbImg\n      })\n    }\n\n    const filesInfo = await getContentTypes(zip)\n    const slideSize = await getSlideSize(zip)\n    themeContent = await loadTheme(zip)\n\n    tableStyles = await readXmlFile(zip, 'ppt/tableStyles.xml')\n\n    postMessage({\n      'type': 'slideSize',\n      'data': slideSize\n    })\n\n    const numOfSlides = filesInfo['slides'].length\n    for (let i = 0; i < numOfSlides; i++) {\n      const filename = filesInfo['slides'][i]\n      const slideHtml = await processSingleSlide(zip, filename, i, slideSize)\n      postMessage({\n        'type': 'slide',\n        'data': slideHtml\n      })\n      postMessage({\n        'type': 'progress-update',\n        'data': (i + 1) * 100 / numOfSlides\n      })\n    }\n\n    postMessage({\n      'type': 'globalCSS',\n      'data': genGlobalCSS()\n    })\n\n    const dateAfter = new Date()\n    postMessage({\n      'type': 'Done',\n      'data': {\n        time: dateAfter - dateBefore,\n        charts\n      }\n    })\n  }\n\n  async function readXmlFile (zip, filename) {\n    return tXml(await zip.file(filename).async('text'))\n  }\n\n  async function getContentTypes (zip) {\n    const ContentTypesJson = await readXmlFile(zip, '[Content_Types].xml')\n    // console.log('CONTENT TYPES JSON', ContentTypesJson)\n    const subObj = ContentTypesJson['Types']['Override']\n    const slidesLocArray = []\n    const slideLayoutsLocArray = []\n    for (let i = 0; i < subObj.length; i++) {\n      switch (subObj[i]['attrs']['ContentType']) {\n        case 'application/vnd.openxmlformats-officedocument.presentationml.slide+xml':\n          slidesLocArray.push(subObj[i]['attrs']['PartName'].substr(1))\n          break\n        case 'application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml':\n          slideLayoutsLocArray.push(subObj[i]['attrs']['PartName'].substr(1))\n          break\n        default:\n      }\n    }\n    return {\n      'slides': slidesLocArray,\n      'slideLayouts': slideLayoutsLocArray\n    }\n  }\n\n  async function getSlideSize (zip) {\n    // Pixel = EMUs * Resolution / 914400;  (Resolution = 96)\n    const content = await readXmlFile(zip, 'ppt/presentation.xml')\n    const sldSzAttrs = content['p:presentation']['p:sldSz']['attrs']\n    return {\n      'width': parseInt(sldSzAttrs['cx']) * 96 / 914400,\n      'height': parseInt(sldSzAttrs['cy']) * 96 / 914400\n    }\n  }\n\n  async function loadTheme (zip) {\n    const preResContent = await readXmlFile(zip, 'ppt/_rels/presentation.xml.rels')\n    const relationshipArray = preResContent['Relationships']['Relationship']\n    let themeURI\n    if (relationshipArray.constructor === Array) {\n      for (let i = 0; i < relationshipArray.length; i++) {\n        if (relationshipArray[i]['attrs']['Type'] === 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme') {\n          themeURI = relationshipArray[i]['attrs']['Target']\n          break\n        }\n      }\n    } else if (relationshipArray['attrs']['Type'] === 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme') {\n      themeURI = relationshipArray['attrs']['Target']\n    }\n\n    if (themeURI === undefined) {\n      throw Error('Can\\'t open theme file.')\n    }\n\n    return readXmlFile(zip, 'ppt/' + themeURI)\n  }\n\n  async function processSingleSlide (zip, sldFileName, index, slideSize) {\n    postMessage({\n      'type': 'INFO',\n      'data': 'Processing slide' + (index + 1)\n    })\n\n    // =====< Step 1 >=====\n    // Read relationship filename of the slide (Get slideLayoutXX.xml)\n    // @sldFileName: ppt/slides/slide1.xml\n    // @resName: ppt/slides/_rels/slide1.xml.rels\n    const resName = sldFileName.replace('slides/slide', 'slides/_rels/slide') + '.rels'\n    const resContent = await readXmlFile(zip, resName)\n    let RelationshipArray = resContent['Relationships']['Relationship']\n    let layoutFilename = ''\n    const slideResObj = {}\n    if (RelationshipArray.constructor === Array) {\n      for (let i = 0; i < RelationshipArray.length; i++) {\n        switch (RelationshipArray[i]['attrs']['Type']) {\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout':\n            layoutFilename = RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            break\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesSlide':\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image':\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart':\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink':\n          default: {\n            slideResObj[RelationshipArray[i]['attrs']['Id']] = {\n              'type': RelationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n              'target': RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            }\n          }\n        }\n      }\n    } else {\n      layoutFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n    }\n    // console.log(slideResObj);\n    // Open slideLayoutXX.xml\n    const slideLayoutContent = await readXmlFile(zip, layoutFilename)\n    const slideLayoutTables = indexNodes(slideLayoutContent)\n    const sldLayoutClrOvr = slideLayoutContent['p:sldLayout']['p:clrMapOvr']['a:overrideClrMapping']\n\n    // console.log(slideLayoutClrOvride);\n    if (sldLayoutClrOvr !== undefined) {\n      slideLayoutClrOvride = sldLayoutClrOvr['attrs']\n    }\n    // =====< Step 2 >=====\n    // Read slide master filename of the slidelayout (Get slideMasterXX.xml)\n    // @resName: ppt/slideLayouts/slideLayout1.xml\n    // @masterName: ppt/slideLayouts/_rels/slideLayout1.xml.rels\n    const slideLayoutResFilename = layoutFilename.replace('slideLayouts/slideLayout', 'slideLayouts/_rels/slideLayout') + '.rels'\n    const slideLayoutResContent = await readXmlFile(zip, slideLayoutResFilename)\n    RelationshipArray = slideLayoutResContent['Relationships']['Relationship']\n    let masterFilename = ''\n    const layoutResObj = {}\n    if (RelationshipArray.constructor === Array) {\n      for (let i = 0; i < RelationshipArray.length; i++) {\n        switch (RelationshipArray[i]['attrs']['Type']) {\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster':\n            masterFilename = RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            break\n          default:\n            layoutResObj[RelationshipArray[i]['attrs']['Id']] = {\n              'type': RelationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n              'target': RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            }\n        }\n      }\n    } else {\n      masterFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n    }\n    // Open slideMasterXX.xml\n    const slideMasterContent = await readXmlFile(zip, masterFilename)\n    const slideMasterTextStyles = getTextByPathList(slideMasterContent, ['p:sldMaster', 'p:txStyles'])\n    const slideMasterTables = indexNodes(slideMasterContent)\n\n    // ///////////////Amir/////////////\n    // Open slideMasterXX.xml.rels\n    const slideMasterResFilename = masterFilename.replace('slideMasters/slideMaster', 'slideMasters/_rels/slideMaster') + '.rels'\n    const slideMasterResContent = await readXmlFile(zip, slideMasterResFilename)\n    RelationshipArray = slideMasterResContent['Relationships']['Relationship']\n    let themeFilename = ''\n    const masterResObj = {}\n    if (RelationshipArray.constructor === Array) {\n      for (let i = 0; i < RelationshipArray.length; i++) {\n        switch (RelationshipArray[i]['attrs']['Type']) {\n          case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme':\n            themeFilename = RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            break\n          default:\n            masterResObj[RelationshipArray[i]['attrs']['Id']] = {\n              'type': RelationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n              'target': RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            }\n        }\n      }\n    } else {\n      themeFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n    }\n    // console.log(themeFilename)\n    // Load Theme file\n    if (themeFilename !== undefined) {\n      themeContent = await readXmlFile(zip, themeFilename)\n    }\n    // =====< Step 3 >=====\n    const slideContent = await readXmlFile(zip, sldFileName)\n    const nodes = slideContent['p:sld']['p:cSld']['p:spTree']\n    const warpObj = {\n      'zip': zip,\n      'slideLayoutTables': slideLayoutTables,\n      'slideMasterTables': slideMasterTables,\n      'slideResObj': slideResObj,\n      'slideMasterTextStyles': slideMasterTextStyles,\n      'layoutResObj': layoutResObj,\n      'masterResObj': masterResObj\n    }\n\n    const bgColor = getSlideBackgroundFill(slideContent, slideLayoutContent, slideMasterContent, warpObj)\n\n    let result = '<section style=\\'width:' + slideSize.width + 'px; height:' + slideSize.height + 'px;' + bgColor + '\\'>'\n\n    for (let nodeKey in nodes) {\n      if (nodes[nodeKey].constructor === Array) {\n        for (let i = 0; i < nodes[nodeKey].length; i++) {\n          result += await processNodesInSlide(nodeKey, nodes[nodeKey][i], warpObj)\n        }\n      } else {\n        result += await processNodesInSlide(nodeKey, nodes[nodeKey], warpObj)\n      }\n    }\n\n    return result + '</section>'\n  }\n\n  function indexNodes (content) {\n    const keys = Object.keys(content)\n    const spTreeNode = content[keys[0]]['p:cSld']['p:spTree']\n\n    const idTable = {}\n    const idxTable = {}\n    const typeTable = {}\n\n    for (let key in spTreeNode) {\n      if (key === 'p:nvGrpSpPr' || key === 'p:grpSpPr') {\n        continue\n      }\n\n      const targetNode = spTreeNode[key]\n\n      if (targetNode.constructor === Array) {\n        for (let i = 0; i < targetNode.length; i++) {\n          const nvSpPrNode = targetNode[i]['p:nvSpPr']\n          const id = getTextByPathList(nvSpPrNode, ['p:cNvPr', 'attrs', 'id'])\n          const idx = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'idx'])\n          const type = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'type'])\n\n          if (id !== undefined) {\n            idTable[id] = targetNode[i]\n          }\n          if (idx !== undefined) {\n            idxTable[idx] = targetNode[i]\n          }\n          if (type !== undefined) {\n            typeTable[type] = targetNode[i]\n          }\n        }\n      } else {\n        const nvSpPrNode = targetNode['p:nvSpPr']\n        const id = getTextByPathList(nvSpPrNode, ['p:cNvPr', 'attrs', 'id'])\n        const idx = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'idx'])\n        const type = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'type'])\n\n        if (id !== undefined) {\n          idTable[id] = targetNode\n        }\n        if (idx !== undefined) {\n          idxTable[idx] = targetNode\n        }\n        if (type !== undefined) {\n          typeTable[type] = targetNode\n        }\n      }\n    }\n\n    return {'idTable': idTable, 'idxTable': idxTable, 'typeTable': typeTable}\n  }\n\n  async function processNodesInSlide (nodeKey, nodeValue, warpObj) {\n    let result = ''\n\n    switch (nodeKey) {\n      case 'p:sp':    // Shape, Text\n        result = processSpNode(nodeValue, warpObj)\n        break\n      case 'p:cxnSp':    // Shape, Text (with connection)\n        result = processCxnSpNode(nodeValue, warpObj)\n        break\n      case 'p:pic':    // Picture\n        result = processPicNode(nodeValue, warpObj)\n        break\n      case 'p:graphicFrame':    // Chart, Diagram, Table\n        result = await processGraphicFrameNode(nodeValue, warpObj)\n        break\n      case 'p:grpSp':    // 群組\n        result = await processGroupSpNode(nodeValue, warpObj)\n        break\n      default:\n    }\n\n    return result\n  }\n\n  async function processGroupSpNode (node, warpObj) {\n    const factor = 96 / 914400\n\n    const xfrmNode = node['p:grpSpPr']['a:xfrm']\n    const x = parseInt(xfrmNode['a:off']['attrs']['x']) * factor\n    const y = parseInt(xfrmNode['a:off']['attrs']['y']) * factor\n    const chx = parseInt(xfrmNode['a:chOff']['attrs']['x']) * factor\n    const chy = parseInt(xfrmNode['a:chOff']['attrs']['y']) * factor\n    const cx = parseInt(xfrmNode['a:ext']['attrs']['cx']) * factor\n    const cy = parseInt(xfrmNode['a:ext']['attrs']['cy']) * factor\n    const chcx = parseInt(xfrmNode['a:chExt']['attrs']['cx']) * factor\n    const chcy = parseInt(xfrmNode['a:chExt']['attrs']['cy']) * factor\n\n    const order = node['attrs']['order']\n\n    let result = '<div class=\\'block group\\' style=\\'z-index: ' + order + '; top: ' + (y - chy) + 'px; left: ' + (x - chx) + 'px; width: ' + (cx - chcx) + 'px; height: ' + (cy - chcy) + 'px;\\'>'\n\n    // Procsee all child nodes\n    for (let nodeKey in node) {\n      if (node[nodeKey].constructor === Array) {\n        for (let i = 0; i < node[nodeKey].length; i++) {\n          result += await processNodesInSlide(nodeKey, node[nodeKey][i], warpObj)\n        }\n      } else {\n        result += await processNodesInSlide(nodeKey, node[nodeKey], warpObj)\n      }\n    }\n\n    result += '</div>'\n\n    return result\n  }\n\n  function processSpNode (node, warpObj) {\n    /*\n     *  958    <xsd:complexType name=\"CT_GvmlShape\">\n     *  959   <xsd:sequence>\n     *  960     <xsd:element name=\"nvSpPr\" type=\"CT_GvmlShapeNonVisual\"     minOccurs=\"1\" maxOccurs=\"1\"/>\n     *  961     <xsd:element name=\"spPr\"   type=\"CT_ShapeProperties\"        minOccurs=\"1\" maxOccurs=\"1\"/>\n     *  962     <xsd:element name=\"txSp\"   type=\"CT_GvmlTextShape\"          minOccurs=\"0\" maxOccurs=\"1\"/>\n     *  963     <xsd:element name=\"style\"  type=\"CT_ShapeStyle\"             minOccurs=\"0\" maxOccurs=\"1\"/>\n     *  964     <xsd:element name=\"extLst\" type=\"CT_OfficeArtExtensionList\" minOccurs=\"0\" maxOccurs=\"1\"/>\n     *  965   </xsd:sequence>\n     *  966 </xsd:complexType>\n     */\n\n    const id = node['p:nvSpPr']['p:cNvPr']['attrs']['id']\n    const name = node['p:nvSpPr']['p:cNvPr']['attrs']['name']\n    const idx = (node['p:nvSpPr']['p:nvPr']['p:ph'] === undefined) ? undefined : node['p:nvSpPr']['p:nvPr']['p:ph']['attrs']['idx']\n    let type = (node['p:nvSpPr']['p:nvPr']['p:ph'] === undefined) ? undefined : node['p:nvSpPr']['p:nvPr']['p:ph']['attrs']['type']\n    const order = node['attrs']['order']\n\n    let slideLayoutSpNode\n    let slideMasterSpNode\n\n    if (type !== undefined) {\n      if (idx !== undefined) {\n        slideLayoutSpNode = warpObj['slideLayoutTables']['typeTable'][type]\n        slideMasterSpNode = warpObj['slideMasterTables']['typeTable'][type]\n      } else {\n        slideLayoutSpNode = warpObj['slideLayoutTables']['typeTable'][type]\n        slideMasterSpNode = warpObj['slideMasterTables']['typeTable'][type]\n      }\n    } else {\n      if (idx !== undefined) {\n        slideLayoutSpNode = warpObj['slideLayoutTables']['idxTable'][idx]\n        slideMasterSpNode = warpObj['slideMasterTables']['idxTable'][idx]\n      } else {\n        // Nothing\n      }\n    }\n\n    if (type === undefined) {\n      type = getTextByPathList(slideLayoutSpNode, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type'])\n      if (type === undefined) {\n        type = getTextByPathList(slideMasterSpNode, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type'])\n      }\n    }\n\n    return genShape(node, slideLayoutSpNode, slideMasterSpNode, id, name, idx, type, order, warpObj)\n  }\n\n  function processCxnSpNode (node, warpObj) {\n    const id = node['p:nvCxnSpPr']['p:cNvPr']['attrs']['id']\n    const name = node['p:nvCxnSpPr']['p:cNvPr']['attrs']['name']\n    // const idx = (node[\"p:nvCxnSpPr\"][\"p:nvPr\"][\"p:ph\"] === undefined) ? undefined : node[\"p:nvSpPr\"][\"p:nvPr\"][\"p:ph\"][\"attrs\"][\"idx\"];\n    // const type = (node[\"p:nvCxnSpPr\"][\"p:nvPr\"][\"p:ph\"] === undefined) ? undefined : node[\"p:nvSpPr\"][\"p:nvPr\"][\"p:ph\"][\"attrs\"][\"type\"];\n    // <p:cNvCxnSpPr>(<p:cNvCxnSpPr>, <a:endCxn>)\n    const order = node['attrs']['order']\n\n    return genShape(node, undefined, undefined, id, name, undefined, undefined, order, warpObj)\n  }\n\n  function genShape (node, slideLayoutSpNode, slideMasterSpNode, id, name, idx, type, order, warpObj) {\n    const xfrmList = ['p:spPr', 'a:xfrm']\n    const slideXfrmNode = getTextByPathList(node, xfrmList)\n    const slideLayoutXfrmNode = getTextByPathList(slideLayoutSpNode, xfrmList)\n    const slideMasterXfrmNode = getTextByPathList(slideMasterSpNode, xfrmList)\n\n    let result = ''\n    const shpId = getTextByPathList(node, ['attrs', 'order'])\n    // console.log(\"shpId: \",shpId)\n    const shapType = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'attrs', 'prst'])\n\n    // custGeom - Amir\n    const custShapType = getTextByPathList(node, ['p:spPr', 'a:custGeom'])\n\n    let isFlipV = false\n    if (getTextByPathList(slideXfrmNode, ['attrs', 'flipV']) === '1' || getTextByPathList(slideXfrmNode, ['attrs', 'flipH']) === '1') {\n      isFlipV = true\n    }\n    // ///////////////////////Amir////////////////////////\n    // rotate\n    const rotate = angleToDegrees(getTextByPathList(slideXfrmNode, ['attrs', 'rot']))\n    // console.log(\"rotate: \"+rotate);\n    // ////////////////////////////////////////////////\n    let w\n    let h\n    let border\n    let headEndNodeAttrs\n    let tailEndNodeAttrs\n    let fillColor\n    let grndFillFlg = false\n    let imgFillFlg = false\n    if (shapType !== undefined || custShapType !== undefined) {\n      // const off = getTextByPathList(slideXfrmNode, ['a:off', 'attrs'])\n      // const x = parseInt(off['x']) * 96 / 914400\n      // const y = parseInt(off['y']) * 96 / 914400\n\n      const ext = getTextByPathList(slideXfrmNode, ['a:ext', 'attrs'])\n      w = parseInt(ext['cx']) * 96 / 914400\n      h = parseInt(ext['cy']) * 96 / 914400\n\n      result += '<svg class=\\'drawing\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' Name=\\'' + name +\n        '\\' style=\\'' +\n        getPosition(slideXfrmNode, undefined, undefined) +\n        getSize(slideXfrmNode, undefined, undefined) +\n        ' z-index: ' + order + ';' +\n        'transform: rotate(' + rotate + 'deg);' +\n        '\\'>'\n      result += '<defs>'\n      // Fill Color\n      fillColor = getShapeFill(node, true, warpObj)\n      const clrFillType = getFillType(getTextByPathList(node, ['p:spPr']))\n      // ///////////////////////////////////////\n      if (clrFillType === 'GRADIENT_FILL') {\n        grndFillFlg = true\n        const colorArray = fillColor.color\n        const angl = fillColor.rot\n        const svgGrdnt = getSvgGradient(w, h, angl, colorArray, shpId)\n        // fill=\"url(#linGrd)\"\n        result += svgGrdnt\n      } else if (clrFillType === 'PIC_FILL') {\n        imgFillFlg = true\n        const svgBgImg = getSvgImagePattern(fillColor, shpId)\n        // fill=\"url(#imgPtrn)\"\n        // console.log(svgBgImg)\n        result += svgBgImg\n      }\n      // Border Color\n      border = getBorder(node, true)\n\n      headEndNodeAttrs = getTextByPathList(node, ['p:spPr', 'a:ln', 'a:headEnd', 'attrs'])\n      tailEndNodeAttrs = getTextByPathList(node, ['p:spPr', 'a:ln', 'a:tailEnd', 'attrs'])\n      // type: none, triangle, stealth, diamond, oval, arrow\n\n      if ((headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) ||\n        (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow'))) {\n        const triangleMarker = '<marker id=\\'markerTriangle_' + shpId + '\\' viewBox=\\'0 0 10 10\\' refX=\\'1\\' refY=\\'5\\' markerWidth=\\'5\\' markerHeight=\\'5\\' stroke=\\'' + border.color + '\\' fill=\\'' + border.color +\n          '\\' orient=\\'auto-start-reverse\\' markerUnits=\\'strokeWidth\\'><path d=\\'M 0 0 L 10 5 L 0 10 z\\' /></marker>'\n        result += triangleMarker\n      }\n      result += '</defs>'\n    }\n    if (shapType !== undefined && custShapType === undefined) {\n      switch (shapType) {\n        case 'accentBorderCallout1':\n        case 'accentBorderCallout2':\n        case 'accentBorderCallout3':\n        case 'accentCallout1':\n        case 'accentCallout2':\n        case 'accentCallout3':\n        case 'actionButtonBackPrevious':\n        case 'actionButtonBeginning':\n        case 'actionButtonBlank':\n        case 'actionButtonDocument':\n        case 'actionButtonEnd':\n        case 'actionButtonForwardNext':\n        case 'actionButtonHelp':\n        case 'actionButtonHome':\n        case 'actionButtonInformation':\n        case 'actionButtonMovie':\n        case 'actionButtonReturn':\n        case 'actionButtonSound':\n        case 'arc':\n        case 'bevel':\n        case 'blockArc':\n        case 'borderCallout1':\n        case 'borderCallout2':\n        case 'borderCallout3':\n        case 'bracePair':\n        case 'bracketPair':\n        case 'callout1':\n        case 'callout2':\n        case 'callout3':\n        case 'can':\n        case 'chartPlus':\n        case 'chartStar':\n        case 'chartX':\n        case 'chevron':\n        case 'chord':\n        case 'cloud':\n        case 'cloudCallout':\n        case 'corner':\n        case 'cornerTabs':\n        case 'cube':\n        case 'diagStripe':\n        case 'donut':\n        case 'doubleWave':\n        case 'downArrowCallout':\n        case 'ellipseRibbon':\n        case 'ellipseRibbon2':\n        case 'flowChartAlternateProcess':\n        case 'flowChartCollate':\n        case 'flowChartConnector':\n        case 'flowChartDecision':\n        case 'flowChartDelay':\n        case 'flowChartDisplay':\n        case 'flowChartDocument':\n        case 'flowChartExtract':\n        case 'flowChartInputOutput':\n        case 'flowChartInternalStorage':\n        case 'flowChartMagneticDisk':\n        case 'flowChartMagneticDrum':\n        case 'flowChartMagneticTape':\n        case 'flowChartManualInput':\n        case 'flowChartManualOperation':\n        case 'flowChartMerge':\n        case 'flowChartMultidocument':\n        case 'flowChartOfflineStorage':\n        case 'flowChartOffpageConnector':\n        case 'flowChartOnlineStorage':\n        case 'flowChartOr':\n        case 'flowChartPredefinedProcess':\n        case 'flowChartPreparation':\n        case 'flowChartProcess':\n        case 'flowChartPunchedCard':\n        case 'flowChartPunchedTape':\n        case 'flowChartSort':\n        case 'flowChartSummingJunction':\n        case 'flowChartTerminator':\n        case 'folderCorner':\n        case 'frame':\n        case 'funnel':\n        case 'gear6':\n        case 'gear9':\n        case 'halfFrame':\n        case 'heart':\n        case 'homePlate':\n        case 'horizontalScroll':\n        case 'irregularSeal1':\n        case 'irregularSeal2':\n        case 'leftArrowCallout':\n        case 'leftBrace':\n        case 'leftBracket':\n        case 'leftRightArrowCallout':\n        case 'leftRightRibbon':\n        case 'lightningBolt':\n        case 'lineInv':\n        case 'mathDivide':\n        case 'mathEqual':\n        case 'mathMinus':\n        case 'mathMultiply':\n        case 'mathNotEqual':\n        case 'mathPlus':\n        case 'moon':\n        case 'nonIsoscelesTrapezoid':\n        case 'noSmoking':\n        case 'pie':\n        case 'pieWedge':\n        case 'plaque':\n        case 'plaqueTabs':\n        case 'quadArrowCallout':\n        case 'rect':\n        case 'ribbon':\n        case 'ribbon2':\n        case 'rightArrowCallout':\n        case 'rightBrace':\n        case 'rightBracket':\n        case 'round1Rect':\n        case 'round2DiagRect':\n        case 'round2SameRect':\n        case 'smileyFace':\n        case 'snip1Rect':\n        case 'snip2DiagRect':\n        case 'snip2SameRect':\n        case 'snipRoundRect':\n        case 'squareTabs':\n        case 'star10':\n        case 'star12':\n        case 'star16':\n        case 'star24':\n        case 'star32':\n        case 'star4':\n        case 'star5':\n        case 'star6':\n        case 'star7':\n        case 'star8':\n        case 'sun':\n        case 'teardrop':\n        case 'upArrowCallout':\n        case 'upDownArrowCallout':\n        case 'verticalScroll':\n        case 'wave':\n        case 'wedgeEllipseCallout':\n        case 'wedgeRectCallout':\n        case 'wedgeRoundRectCallout': {\n          result += '<rect x=\\'0\\' y=\\'0\\' width=\\'' + w + '\\' height=\\'' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'ellipse': {\n          result += '<ellipse cx=\\'' + (w / 2) + '\\' cy=\\'' + (h / 2) + '\\' rx=\\'' + (w / 2) + '\\' ry=\\'' + (h / 2) + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'roundRect': {\n          result += '<rect x=\\'0\\' y=\\'0\\' width=\\'' + w + '\\' height=\\'' + h + '\\' rx=\\'7\\' ry=\\'7\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'bentConnector2': {    // 直角 (path)\n          let d\n          if (isFlipV) {\n            d = 'M 0 ' + w + ' L ' + h + ' ' + w + ' L ' + h + ' 0'\n          } else {\n            d = 'M ' + w + ' 0 L ' + w + ' ' + h + ' L 0 ' + h\n          }\n          result += '<path d=\\'' + d + '\\' stroke=\\'' + border.color +\n            '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' fill=\\'none\\' '\n          if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          result += '/>'\n          break\n        }\n        case 'rtTriangle': {\n          result += ' <polygon points=\\'0 0,0 ' + h + ',' + w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'triangle': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          let shapAdjstVal = 0.5\n          if (shapAdjst !== undefined) {\n            shapAdjstVal = parseInt(shapAdjst.substr(4)) * 96 / 9144000\n            // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nshapAdjst: \"+shapAdjst+\"\\nshapAdjstVal: \"+shapAdjstVal);\n          }\n          result += ' <polygon points=\\'' + (w * shapAdjstVal) + ' 0,0 ' + h + ',' + w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'diamond': {\n          result += ' <polygon points=\\'' + (w / 2) + ' 0,0 ' + (h / 2) + ',' + (w / 2) + ' ' + h + ',' + w + ' ' + (h / 2) + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'trapezoid': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          let adjstVal = 0.25\n          const maxAdjConst = 0.7407\n          if (shapAdjst !== undefined) {\n            const adjst = parseInt(shapAdjst.substr(4)) * 96 / 9144000\n            adjstVal = (adjst * 0.5) / maxAdjConst\n            // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nshapAdjst: \"+shapAdjst+\"\\nadjstVal: \"+adjstVal);\n          }\n          result += ' <polygon points=\\'' + (w * adjstVal) + ' 0,0 ' + h + ',' + w + ' ' + h + ',' + (1 - adjstVal) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'parallelogram': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          let adjstVal = 0.25\n          let maxAdjConst\n          if (w > h) {\n            maxAdjConst = w / h\n          } else {\n            maxAdjConst = h / w\n          }\n          if (shapAdjst !== undefined) {\n            const adjst = parseInt(shapAdjst.substr(4)) / 100000\n            adjstVal = adjst / maxAdjConst\n            // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nadjst: \"+adjstVal+\"\\nmaxAdjConst: \"+maxAdjConst);\n          }\n          result += ' <polygon points=\\'' + adjstVal * w + ' 0,0 ' + h + ',' + (1 - adjstVal) * w + ' ' + h + ',' + w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'pentagon': {\n          result += ' <polygon points=\\'' + (0.5 * w) + ' 0,0 ' + (0.375 * h) + ',' + (0.15 * w) + ' ' + h + ',' + 0.85 * w + ' ' + h + ',' + w + ' ' + 0.375 * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'hexagon': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let shapAdjst\n          for (let i = 0; i < shapAdjstArray.length; i++) {\n            if (getTextByPathList(shapAdjstArray[i], ['attrs', 'name']) === 'adj') {\n              shapAdjst = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n            }\n          }\n          let adjstVal = 0.25\n          const maxAdjConst = 0.62211\n\n          if (shapAdjst !== undefined) {\n            const adjst = parseInt(shapAdjst.substr(4)) * 96 / 9144000\n            adjstVal = (adjst * 0.5) / maxAdjConst\n            // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nadjst: \"+adjstVal);\n          }\n          result += ' <polygon points=\\'' + (w * adjstVal) + ' 0,0 ' + (h / 2) + ',' + (w * adjstVal) + ' ' + h + ',' + (1 - adjstVal) * w + ' ' + h + ',' + w + ' ' + (h / 2) + ',' + (1 - adjstVal) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'heptagon': {\n          result += ' <polygon points=\\'' + (0.5 * w) + ' 0,' + w / 8 + ' ' + h / 4 + ',0 ' + (5 / 8) * h + ',' + w / 4 + ' ' + h + ',' + (3 / 4) * w + ' ' + h + ',' +\n            w + ' ' + (5 / 8) * h + ',' + (7 / 8) * w + ' ' + h / 4 + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'octagon': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          let adj1 = 0.25\n          if (shapAdjst !== undefined) {\n            adj1 = parseInt(shapAdjst.substr(4)) / 100000\n          }\n          const adj2 = (1 - adj1)\n          // console.log(\"adj1: \"+adj1+\"\\nadj2: \"+adj2);\n          result += ' <polygon points=\\'' + adj1 * w + ' 0,0 ' + adj1 * h + ',0 ' + adj2 * h + ',' + adj1 * w + ' ' + h + ',' + adj2 * w + ' ' + h + ',' +\n            w + ' ' + adj2 * h + ',' + w + ' ' + adj1 * h + ',' + adj2 * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n          break\n        }\n        case 'decagon': {\n          result += ' <polygon points=\\'' + (3 / 8) * w + ' 0,' + w / 8 + ' ' + h / 8 + ',0 ' + h / 2 + ',' + w / 8 + ' ' + (7 / 8) * h + ',' + (3 / 8) * w + ' ' + h + ',' +\n            (5 / 8) * w + ' ' + h + ',' + (7 / 8) * w + ' ' + (7 / 8) * h + ',' + w + ' ' + h / 2 + ',' + (7 / 8) * w + ' ' + h / 8 + ',' + (5 / 8) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'dodecagon': {\n          result += ' <polygon points=\\'' + (3 / 8) * w + ' 0,' + w / 8 + ' ' + h / 8 + ',0 ' + (3 / 8) * h + ',0 ' + (5 / 8) * h + ',' + w / 8 + ' ' + (7 / 8) * h + ',' + (3 / 8) * w + ' ' + h + ',' +\n            (5 / 8) * w + ' ' + h + ',' + (7 / 8) * w + ' ' + (7 / 8) * h + ',' + w + ' ' + (5 / 8) * h + ',' + w + ' ' + (3 / 8) * h + ',' + (7 / 8) * w + ' ' + h / 8 + ',' + (5 / 8) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'bentConnector3': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          // console.log(\"isFlipV: \"+String(isFlipV)+\"\\nshapAdjst: \"+shapAdjst)\n          let shapAdjstVal = 0.5\n          if (shapAdjst !== undefined) {\n            shapAdjstVal = parseInt(shapAdjst.substr(4)) / 100000\n            // console.log(\"isFlipV: \"+String(isFlipV)+\"\\nshapAdjst: \"+shapAdjst+\"\\nshapAdjstVal: \"+shapAdjstVal);\n            if (isFlipV) {\n              result += ' <polyline points=\\'' + w + ' 0,' + ((1 - shapAdjstVal) * w) + ' 0,' + ((1 - shapAdjstVal) * w) + ' ' + h + ',0 ' + h + '\\' fill=\\'transparent\\'' +\n                '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n            } else {\n              result += ' <polyline points=\\'0 0,' + (shapAdjstVal) * w + ' 0,' + (shapAdjstVal) * w + ' ' + h + ',' + w + ' ' + h + '\\' fill=\\'transparent\\'' +\n                '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n            }\n            if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n              result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n            }\n            if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n              result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n            }\n            result += '/>'\n          }\n          break\n        }\n        case 'plus': {\n          const shapAdjst = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla'])\n          let adj1 = 0.25\n          if (shapAdjst !== undefined) {\n            adj1 = parseInt(shapAdjst.substr(4)) / 100000\n          }\n          const adj2 = (1 - adj1)\n          result += ' <polygon points=\\'' + adj1 * w + ' 0,' + adj1 * w + ' ' + adj1 * h + ',0 ' + adj1 * h + ',0 ' + adj2 * h + ',' +\n            adj1 * w + ' ' + adj2 * h + ',' + adj1 * w + ' ' + h + ',' + adj2 * w + ' ' + h + ',' + adj2 * w + ' ' + adj2 * h + ',' + w + ' ' + adj2 * h + ',' +\n            +w + ' ' + adj1 * h + ',' + adj2 * w + ' ' + adj1 * h + ',' + adj2 * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          // console.log((!imgFillFlg?(grndFillFlg?\"url(#linGrd_\"+shpId+\")\":fillColor):\"url(#imgPtrn_\"+shpId+\")\"))\n          break\n        }\n        case 'line':\n        case 'straightConnector1':\n        case 'bentConnector4':\n        case 'bentConnector5':\n        case 'curvedConnector2':\n        case 'curvedConnector3':\n        case 'curvedConnector4':\n        case 'curvedConnector5': {\n          if (isFlipV) {\n            result += '<line x1=\\'' + w + '\\' y1=\\'0\\' x2=\\'0\\' y2=\\'' + h + '\\' stroke=\\'' + border.color +\n              '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n          } else {\n            result += '<line x1=\\'0\\' y1=\\'0\\' x2=\\'' + w + '\\' y2=\\'' + h + '\\' stroke=\\'' + border.color +\n              '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n          }\n          if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          result += '/>'\n          break\n        }\n        case 'rightArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = w / h\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = 1 - ((sAdj2Val2) / maxSAdj2Const)\n              }\n            }\n          }\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1Val+\"\\nsAdj2: \"+sAdj2Val);\n\n          result += ' <polygon points=\\'' + w + ' ' + h / 2 + ',' + sAdj2Val * w + ' 0,' + sAdj2Val * w + ' ' + sAdj1Val * h + ',0 ' + sAdj1Val * h +\n            ',0 ' + (1 - sAdj1Val) * h + ',' + sAdj2Val * w + ' ' + (1 - sAdj1Val) * h + ', ' + sAdj2Val * w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'leftArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = w / h\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = (sAdj2Val2) / maxSAdj2Const\n              }\n            }\n          }\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1Val+\"\\nsAdj2: \"+sAdj2Val);\n\n          result += ' <polygon points=\\'0 ' + h / 2 + ',' + sAdj2Val * w + ' ' + h + ',' + sAdj2Val * w + ' ' + (1 - sAdj1Val) * h + ',' + w + ' ' + (1 - sAdj1Val) * h +\n            ',' + w + ' ' + sAdj1Val * h + ',' + sAdj2Val * w + ' ' + sAdj1Val * h + ', ' + sAdj2Val * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'downArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = h / w\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = parseInt(sAdj1.substr(4)) / 200000\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = (sAdj2Val2) / maxSAdj2Const\n              }\n            }\n          }\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1Val+\"\\nsAdj2: \"+sAdj2Val);\n\n          result += ' <polygon points=\\'' + (0.5 - sAdj1Val) * w + ' 0,' + (0.5 - sAdj1Val) * w + ' ' + (1 - sAdj2Val) * h + ',0 ' + (1 - sAdj2Val) * h + ',' + (w / 2) + ' ' + h +\n            ',' + w + ' ' + (1 - sAdj2Val) * h + ',' + (0.5 + sAdj1Val) * w + ' ' + (1 - sAdj2Val) * h + ', ' + (0.5 + sAdj1Val) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'upArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = h / w\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = parseInt(sAdj1.substr(4)) / 200000\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = (sAdj2Val2) / maxSAdj2Const\n              }\n            }\n          }\n          result += ' <polygon points=\\'' + (w / 2) + ' 0,0 ' + sAdj2Val * h + ',' + (0.5 - sAdj1Val) * w + ' ' + sAdj2Val * h + ',' + (0.5 - sAdj1Val) * w + ' ' + h +\n            ',' + (0.5 + sAdj1Val) * w + ' ' + h + ',' + (0.5 + sAdj1Val) * w + ' ' + sAdj2Val * h + ', ' + w + ' ' + sAdj2Val * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'leftRightArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = w / h\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = (sAdj2Val2) / maxSAdj2Const\n              }\n            }\n          }\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1Val+\"\\nsAdj2: \"+sAdj2Val);\n\n          result += ' <polygon points=\\'0 ' + h / 2 + ',' + sAdj2Val * w + ' ' + h + ',' + sAdj2Val * w + ' ' + (1 - sAdj1Val) * h + ',' + (1 - sAdj2Val) * w + ' ' + (1 - sAdj1Val) * h +\n            ',' + (1 - sAdj2Val) * w + ' ' + h + ',' + w + ' ' + h / 2 + ', ' + (1 - sAdj2Val) * w + ' 0,' + (1 - sAdj2Val) * w + ' ' + sAdj1Val * h + ',' +\n            sAdj2Val * w + ' ' + sAdj1Val * h + ',' + sAdj2Val * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'upDownArrow': {\n          const shapAdjstArray = getTextByPathList(node, ['p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd'])\n          let sAdj1\n          let sAdj1Val = 0.5\n          let sAdj2\n          let sAdj2Val = 0.5\n          const maxSAdj2Const = h / w\n          if (shapAdjstArray !== undefined) {\n            for (let i = 0; i < shapAdjstArray.length; i++) {\n              const sAdjName = getTextByPathList(shapAdjstArray[i], ['attrs', 'name'])\n              if (sAdjName === 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                sAdj1Val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n              } else if (sAdjName === 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjstArray[i], ['attrs', 'fmla'])\n                const sAdj2Val2 = parseInt(sAdj2.substr(4)) / 100000\n                sAdj2Val = (sAdj2Val2) / maxSAdj2Const\n              }\n            }\n          }\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1Val+\"\\nsAdj2: \"+sAdj2Val);\n\n          result += ' <polygon points=\\'' + w / 2 + ' 0,0 ' + sAdj2Val * h + ',' + sAdj1Val * w + ' ' + sAdj2Val * h + ',' + sAdj1Val * w + ' ' + (1 - sAdj2Val) * h +\n            ',0 ' + (1 - sAdj2Val) * h + ',' + w / 2 + ' ' + h + ', ' + w + ' ' + (1 - sAdj2Val) * h + ',' + (1 - sAdj1Val) * w + ' ' + (1 - sAdj2Val) * h + ',' +\n            (1 - sAdj1Val) * w + ' ' + sAdj2Val * h + ',' + w + ' ' + sAdj2Val * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          break\n        }\n        case 'bentArrow':\n        case 'bentUpArrow':\n        case 'stripedRightArrow':\n        case 'quadArrow':\n        case 'circularArrow':\n        case 'swooshArrow':\n        case 'leftRightUpArrow':\n        case 'leftUpArrow':\n        case 'leftCircularArrow':\n        case 'notchedRightArrow':\n        case 'curvedDownArrow':\n        case 'curvedLeftArrow':\n        case 'curvedRightArrow':\n        case 'curvedUpArrow':\n        case 'uturnArrow':\n        case 'leftRightCircularArrow':\n          break\n        case undefined:\n        default:\n          console.warn('Undefine shape type.')\n      }\n\n      result += '</svg>'\n\n      result += '<div class=\\'block content ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) +\n        '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' Name=\\'' + name +\n        '\\' style=\\'' +\n        getPosition(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        ' z-index: ' + order + ';' +\n        'transform: rotate(' + rotate + 'deg);' +\n        '\\'>'\n\n      // TextBody\n      if (node['p:txBody'] !== undefined) {\n        result += genTextBody(node['p:txBody'], slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      }\n      result += '</div>'\n    } else if (custShapType !== undefined) {\n      // custGeom here - Amir ///////////////////////////////////////////////////////\n      // http://officeopenxml.com/drwSp-custGeom.php\n      const pathLstNode = getTextByPathList(custShapType, ['a:pathLst'])\n      // const pathNode = getTextByPathList(pathLstNode, ['a:path', 'attrs'])\n      // const maxX = parseInt(pathNode['w']) * 96 / 914400\n      // const maxY = parseInt(pathNode['h']) * 96 / 914400\n      // console.log(\"w = \"+w+\"\\nh = \"+h+\"\\nmaxX = \"+maxX +\"\\nmaxY = \" + maxY);\n      // cheke if it is close shape\n      const closeNode = getTextByPathList(pathLstNode, ['a:path', 'a:close'])\n      const startPoint = getTextByPathList(pathLstNode, ['a:path', 'a:moveTo', 'a:pt', 'attrs'])\n      const spX = parseInt(startPoint['x']) * 96 / 914400\n      const spY = parseInt(startPoint['y']) * 96 / 914400\n      let d = 'M' + spX + ',' + spY\n      const pathNodes = getTextByPathList(pathLstNode, ['a:path'])\n      const lnToNodes = pathNodes['a:lnTo']\n      const cubicBezToNodes = pathNodes['a:cubicBezTo']\n      const sortblAry = []\n      if (lnToNodes !== undefined) {\n        Object.keys(lnToNodes).forEach(function (key) {\n          const lnToPtNode = lnToNodes[key]['a:pt']\n          if (lnToPtNode !== undefined) {\n            Object.keys(lnToPtNode).forEach(function (key2) {\n              const ptObj = {}\n              const lnToNoPt = lnToPtNode[key2]\n              const ptX = lnToNoPt['x']\n              const ptY = lnToNoPt['y']\n              const ptOrdr = lnToNoPt['order']\n              ptObj.type = 'lnto'\n              ptObj.order = ptOrdr\n              ptObj.x = ptX\n              ptObj.y = ptY\n              sortblAry.push(ptObj)\n              // console.log(key2, lnToNoPt);\n            })\n          }\n        })\n      }\n      if (cubicBezToNodes !== undefined) {\n        Object.keys(cubicBezToNodes).forEach(function (key) {\n          // console.log(\"cubicBezTo[\"+key+\"]:\");\n          const cubicBezToPtNodes = cubicBezToNodes[key]['a:pt']\n          if (cubicBezToPtNodes !== undefined) {\n            Object.keys(cubicBezToPtNodes).forEach(function (key2) {\n              // console.log(\"cubicBezTo[\"+key+\"]pt[\"+key2+\"]:\");\n              const cubBzPts = cubicBezToPtNodes[key2]\n              Object.keys(cubBzPts).forEach(function (key3) {\n                // console.log(key3, cubBzPts[key3]);\n                const ptObj = {}\n                const cubBzPt = cubBzPts[key3]\n                const ptX = cubBzPt['x']\n                const ptY = cubBzPt['y']\n                const ptOrdr = cubBzPt['order']\n                ptObj.type = 'cubicBezTo'\n                ptObj.order = ptOrdr\n                ptObj.x = ptX\n                ptObj.y = ptY\n                sortblAry.push(ptObj)\n              })\n            })\n          }\n        })\n      }\n      const sortByOrder = sortblAry.slice(0)\n      sortByOrder.sort(function (a, b) {\n        return a.order - b.order\n      })\n      // console.log(sortByOrder);\n      let k = 0\n      while (k < sortByOrder.length) {\n        if (sortByOrder[k].type === 'lnto') {\n          const Lx = parseInt(sortByOrder[k].x) * 96 / 914400\n          const Ly = parseInt(sortByOrder[k].y) * 96 / 914400\n          d += 'L' + Lx + ',' + Ly\n          k++\n        } else { // \"cubicBezTo\"\n          const Cx1 = parseInt(sortByOrder[k].x) * 96 / 914400\n          const Cy1 = parseInt(sortByOrder[k].y) * 96 / 914400\n          const Cx2 = parseInt(sortByOrder[k + 1].x) * 96 / 914400\n          const Cy2 = parseInt(sortByOrder[k + 1].y) * 96 / 914400\n          const Cx3 = parseInt(sortByOrder[k + 2].x) * 96 / 914400\n          const Cy3 = parseInt(sortByOrder[k + 2].y) * 96 / 914400\n\n          d += 'C' + Cx1 + ',' + Cy1 + ' ' + Cx2 + ',' + Cy2 + ' ' + Cx3 + ',' + Cy3\n          k += 3\n        }\n      }\n      result += '<path d=\\'' + d + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n        '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n      if (closeNode !== undefined) {\n        // console.log(\"Close shape\");\n        result += '/>'\n      } else {\n        // console.log(\"Open shape\");\n        // check and add \"marker-start\" and \"marker-end\"\n        if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        result += '/>'\n      }\n\n      result += '</svg>'\n\n      result += '<div class=\\'block content ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) +\n        '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' Name=\\'' + name +\n        '\\' style=\\'' +\n        getPosition(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        ' z-index: ' + order + ';' +\n        'transform: rotate(' + rotate + 'deg);' +\n        '\\'>'\n\n      // TextBody\n      if (node['p:txBody'] !== undefined) {\n        result += genTextBody(node['p:txBody'], slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      }\n      result += '</div>'\n\n      // result = \"\";\n    } else {\n      result += '<div class=\\'block content ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) +\n        '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' Name=\\'' + name +\n        '\\' style=\\'' +\n        getPosition(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n        getBorder(node, false) +\n        getShapeFill(node, false, warpObj) +\n        ' z-index: ' + order + ';' +\n        'transform: rotate(' + rotate + 'deg);' +\n        '\\'>'\n\n      // TextBody\n      if (node['p:txBody'] !== undefined) {\n        result += genTextBody(node['p:txBody'], slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      }\n      result += '</div>'\n    }\n\n    return result\n  }\n\n  function processPicNode (node, warpObj) {\n    const order = node['attrs']['order']\n\n    const rid = node['p:blipFill']['a:blip']['attrs']['r:embed']\n    const imgName = warpObj['slideResObj'][rid]['target']\n    const imgFileExt = extractFileExtension(imgName).toLowerCase()\n    const zip = warpObj['zip']\n    const imgArrayBuffer = zip.file(imgName).asArrayBuffer()\n    let mimeType = ''\n    const xfrmNode = node['p:spPr']['a:xfrm']\n    // /////////////////////////////////////Amir//////////////////////////////\n    const rotate = angleToDegrees(node['p:spPr']['a:xfrm']['attrs']['rot'])\n    // ////////////////////////////////////////////////////////////////////////\n    mimeType = getImageMimeType(imgFileExt)\n    return '<div class=\\'block content\\' style=\\'' + getPosition(xfrmNode, undefined, undefined) + getSize(xfrmNode, undefined, undefined) +\n      ' z-index: ' + order + ';' +\n      'transform: rotate(' + rotate + 'deg);' +\n      '\\'><img src=\\'data:' + mimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer) + '\\' style=\\'width: 100%; height: 100%\\'/></div>'\n  }\n\n  async function processGraphicFrameNode (node, warpObj) {\n    let result = ''\n    const graphicTypeUri = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'attrs', 'uri'])\n\n    switch (graphicTypeUri) {\n      case 'http://schemas.openxmlformats.org/drawingml/2006/table':\n        result = genTable(node, warpObj)\n        break\n      case 'http://schemas.openxmlformats.org/drawingml/2006/chart':\n        result = await genChart(node, warpObj)\n        break\n      case 'http://schemas.openxmlformats.org/drawingml/2006/diagram':\n        result = genDiagram(node, warpObj)\n        break\n      default:\n    }\n\n    return result\n  }\n\n  /*\nfunction processSpPrNode (node, warpObj) {\n  /!*\n     * 2241 <xsd:complexType name=\"CT_ShapeProperties\">\n     * 2242   <xsd:sequence>\n     * 2243     <xsd:element name=\"xfrm\" type=\"CT_Transform2D\"  minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2244     <xsd:group   ref=\"EG_Geometry\"                  minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2245     <xsd:group   ref=\"EG_FillProperties\"            minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2246     <xsd:element name=\"ln\" type=\"CT_LineProperties\" minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2247     <xsd:group   ref=\"EG_EffectProperties\"          minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2248     <xsd:element name=\"scene3d\" type=\"CT_Scene3D\"   minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2249     <xsd:element name=\"sp3d\" type=\"CT_Shape3D\"      minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2250     <xsd:element name=\"extLst\" type=\"CT_OfficeArtExtensionList\" minOccurs=\"0\" maxOccurs=\"1\"/>\n     * 2251   </xsd:sequence>\n     * 2252   <xsd:attribute name=\"bwMode\" type=\"ST_BlackWhiteMode\" use=\"optional\"/>\n     * 2253 </xsd:complexType>\n     *!/\n\n  // TODO:\n}\n*/\n\n  function genTextBody (textBodyNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj) {\n    let text = ''\n    const slideMasterTextStyles = warpObj['slideMasterTextStyles']\n\n    if (textBodyNode === undefined) {\n      return text\n    }\n    // rtl : <p:txBody>\n    //          <a:bodyPr wrap=\"square\" rtlCol=\"1\">\n\n    // const rtlStr = \"\";\n    let pNode\n    let rNode\n    if (textBodyNode['a:p'].constructor === Array) {\n      // multi p\n      for (let i = 0; i < textBodyNode['a:p'].length; i++) {\n        pNode = textBodyNode['a:p'][i]\n        rNode = pNode['a:r']\n\n        // const isRTL = getTextDirection(pNode, type, slideMasterTextStyles);\n        // rtlStr = \"\";//\"dir='\"+isRTL+\"'\";\n\n        text += '<div  class=\\'' + getHorizontalAlign(pNode, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) + '\\'>'\n        text += genBuChar(pNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n\n        if (rNode === undefined) {\n          // without r\n          text += genSpanElement(pNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n        } else if (rNode.constructor === Array) {\n          // with multi r\n          for (let j = 0; j < rNode.length; j++) {\n            text += genSpanElement(rNode[j], slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n            // ////////////////Amir////////////\n            if (pNode['a:br'] !== undefined) {\n              text += '<br>'\n            }\n            // ////////////////////////////////\n          }\n        } else {\n          // with one r\n          text += genSpanElement(rNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n        }\n        text += '</div>'\n      }\n    } else {\n      // one p\n      pNode = textBodyNode['a:p']\n      rNode = pNode['a:r']\n\n      // const isRTL = getTextDirection(pNode, type, slideMasterTextStyles);\n      // rtlStr = \"\";//\"dir='\"+isRTL+\"'\";\n\n      text += '<div class=\\'slide-prgrph ' + getHorizontalAlign(pNode, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) + '\\'>'\n      text += genBuChar(pNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      if (rNode === undefined) {\n        // without r\n        text += genSpanElement(pNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      } else if (rNode.constructor === Array) {\n        // with multi r\n        for (let j = 0; j < rNode.length; j++) {\n          text += genSpanElement(rNode[j], slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n          // ////////////////Amir////////////\n          if (pNode['a:br'] !== undefined) {\n            text += '<br>'\n          }\n          // ////////////////////////////////\n        }\n      } else {\n        // with one r\n        text += genSpanElement(rNode, slideLayoutSpNode, slideMasterSpNode, type, warpObj)\n      }\n      text += '</div>'\n    }\n\n    return text\n  }\n\n  function genBuChar (node, slideLayoutSpNode, slideMasterSpNode, type, warpObj) {\n    // /////////////////////////////////////Amir///////////////////////////////\n    const sldMstrTxtStyles = warpObj['slideMasterTextStyles']\n\n    const rNode = node['a:r']\n    let dfltBultColor, dfltBultSize, bultColor, bultSize\n    if (rNode !== undefined) {\n      dfltBultColor = getFontColor(rNode, type, sldMstrTxtStyles)\n      dfltBultSize = getFontSize(rNode, slideLayoutSpNode, slideMasterSpNode, type, sldMstrTxtStyles)\n    } else {\n      dfltBultColor = getFontColor(node, type, sldMstrTxtStyles)\n      dfltBultSize = getFontSize(node, slideLayoutSpNode, slideMasterSpNode, type, sldMstrTxtStyles)\n    }\n    // console.log(\"Bullet Size: \" + bultSize);\n\n    let bullet = ''\n    // ///////////////////////////////////////////////////////////////\n\n    const pPrNode = node['a:pPr']\n\n    // ////////////////cheke if is rtl ///Amir ////////////////////////////////////\n    const getRtlVal = getTextByPathList(pPrNode, ['attrs', 'rtl'])\n    let isRTL = false\n    if (getRtlVal !== undefined && getRtlVal === '1') {\n      isRTL = true\n    }\n    // //////////////////////////////////////////////////////////\n\n    let lvl = parseInt(getTextByPathList(pPrNode, ['attrs', 'lvl']))\n    if (isNaN(lvl)) {\n      lvl = 0\n    }\n\n    const buChar = getTextByPathList(pPrNode, ['a:buChar', 'attrs', 'char'])\n    // ///////////////////////////////Amir///////////////////////////////////\n    let buType = 'TYPE_NONE'\n    const buNum = getTextByPathList(pPrNode, ['a:buAutoNum', 'attrs', 'type'])\n    const buPic = getTextByPathList(pPrNode, ['a:buBlip'])\n    if (buChar !== undefined) {\n      buType = 'TYPE_BULLET'\n      // console.log(\"Bullet Chr to code: \" + buChar.charCodeAt(0));\n    }\n    if (buNum !== undefined) {\n      buType = 'TYPE_NUMERIC'\n    }\n    if (buPic !== undefined) {\n      buType = 'TYPE_BULPIC'\n    }\n\n    let buFontAttrs\n    if (buType !== 'TYPE_NONE') {\n      buFontAttrs = getTextByPathList(pPrNode, ['a:buFont', 'attrs'])\n    }\n    // console.log(\"Bullet Type: \" + buType);\n    // console.log(\"NumericTypr: \" + buNum);\n    // console.log(\"buChar: \" + (buChar === undefined?'':buChar.charCodeAt(0)));\n    // get definde bullet COLOR\n    let defBultColor = 'NoNe'\n\n    if (pPrNode) {\n      const buClrNode = pPrNode['a:buClr']\n      if (buClrNode !== undefined) {\n        defBultColor = getSolidFill(buClrNode)\n      } else {\n        // console.log(\"buClrNode: \" + buClrNode);\n      }\n    }\n\n    if (defBultColor === 'NoNe') {\n      bultColor = dfltBultColor\n    } else {\n      bultColor = '#' + defBultColor\n    }\n    // get definde bullet SIZE\n    let buFontSize\n    buFontSize = getTextByPathList(pPrNode, ['a:buSzPts', 'attrs', 'val']) // pt\n    if (buFontSize !== undefined) {\n      bultSize = parseInt(buFontSize) / 100 + 'pt'\n    } else {\n      buFontSize = getTextByPathList(pPrNode, ['a:buSzPct', 'attrs', 'val'])\n      if (buFontSize !== undefined) {\n        const prcnt = parseInt(buFontSize) / 100000\n        // dfltBultSize = XXpt\n        const dfltBultSizeNoPt = dfltBultSize.substr(0, dfltBultSize.length - 2)\n        bultSize = prcnt * (parseInt(dfltBultSizeNoPt)) + 'pt'\n      } else {\n        bultSize = dfltBultSize\n      }\n    }\n    // //////////////////////////////////////////////////////////////////////\n    let marginLeft\n    let marginRight\n    if (buType === 'TYPE_BULLET') {\n      // const buFontAttrs = getTextByPathList(pPrNode, [\"a:buFont\", \"attrs\"]);\n      if (buFontAttrs !== undefined) {\n        marginLeft = parseInt(getTextByPathList(pPrNode, ['attrs', 'marL'])) * 96 / 914400\n        marginRight = parseInt(buFontAttrs['pitchFamily'])\n        if (isNaN(marginLeft)) {\n          marginLeft = 328600 * 96 / 914400\n        }\n        if (isNaN(marginRight)) {\n          marginRight = 0\n        }\n        const typeface = buFontAttrs['typeface']\n\n        bullet = '<span style=\\'font-family: ' + typeface +\n          '; margin-left: ' + marginLeft * lvl + 'px' +\n          '; margin-right: ' + marginRight + 'px' +\n          ';color:' + bultColor +\n          ';font-size:' + bultSize + ';'\n        if (isRTL) {\n          bullet += ' float: right;  direction:rtl'\n        }\n        bullet += '\\'>' + buChar + '</span>'\n      } else {\n        marginLeft = 328600 * 96 / 914400 * lvl\n\n        bullet = '<span style=\\'margin-left: ' + marginLeft + 'px;\\'>' + buChar + '</span>'\n      }\n    } else if (buType === 'TYPE_NUMERIC') { // /////////Amir///////////////////////////////\n      if (buFontAttrs !== undefined) {\n        marginLeft = parseInt(getTextByPathList(pPrNode, ['attrs', 'marL'])) * 96 / 914400\n        marginRight = parseInt(buFontAttrs['pitchFamily'])\n\n        if (isNaN(marginLeft)) {\n          marginLeft = 328600 * 96 / 914400\n        }\n        if (isNaN(marginRight)) {\n          marginRight = 0\n        }\n        // const typeface = buFontAttrs[\"typeface\"];\n\n        bullet = '<span style=\\'margin-left: ' + marginLeft * lvl + 'px' +\n          '; margin-right: ' + marginRight + 'px' +\n          ';color:' + bultColor +\n          ';font-size:' + bultSize + ';'\n        if (isRTL) {\n          bullet += ' float: right; direction:rtl;'\n        } else {\n          bullet += ' float: left; direction:ltr;'\n        }\n        bullet += '\\' data-bulltname = \\'' + buNum + '\\' data-bulltlvl = \\'' + lvl + '\\' class=\\'numeric-bullet-style\\'></span>'\n      } else {\n        marginLeft = 328600 * 96 / 914400 * lvl\n        bullet = '<span style=\\'margin-left: ' + marginLeft + 'px;'\n        if (isRTL) {\n          bullet += ' float: right; direction:rtl;'\n        } else {\n          bullet += ' float: left; direction:ltr;'\n        }\n        bullet += '\\' data-bulltname = \\'' + buNum + '\\' data-bulltlvl = \\'' + lvl + '\\' class=\\'numeric-bullet-style\\'></span>'\n      }\n    } else if (buType === 'TYPE_BULPIC') { // PIC BULLET\n      marginLeft = parseInt(getTextByPathList(pPrNode, ['attrs', 'marL'])) * 96 / 914400\n      marginRight = parseInt(getTextByPathList(pPrNode, ['attrs', 'marR'])) * 96 / 914400\n\n      if (isNaN(marginRight)) {\n        marginRight = 0\n      }\n      // console.log(\"marginRight: \"+marginRight)\n      // buPic\n      if (isNaN(marginLeft)) {\n        marginLeft = 328600 * 96 / 914400\n      } else {\n        marginLeft = 0\n      }\n      // const buPicId = getTextByPathList(buPic, [\"a:blip\",\"a:extLst\",\"a:ext\",\"asvg:svgBlip\" , \"attrs\", \"r:embed\"]);\n      const buPicId = getTextByPathList(buPic, ['a:blip', 'attrs', 'r:embed'])\n      // const svgPicPath = ''\n      let buImg\n      if (buPicId !== undefined) {\n        // svgPicPath = warpObj[\"slideResObj\"][buPicId][\"target\"];\n        // buImg = warpObj[\"zip\"].file(svgPicPath).asText();\n        // }else{\n        // buPicId = getTextByPathList(buPic, [\"a:blip\", \"attrs\", \"r:embed\"]);\n        const imgPath = warpObj['slideResObj'][buPicId]['target']\n        const imgArrayBuffer = warpObj['zip'].file(imgPath).asArrayBuffer()\n        const imgExt = imgPath.split('.').pop()\n        const imgMimeType = getImageMimeType(imgExt)\n        buImg = '<img src=\\'data:' + imgMimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer) + '\\' style=\\'width: 100%; height: 100%\\'/>'\n        // console.log(\"imgPath: \"+imgPath+\"\\nimgMimeType: \"+imgMimeType)\n      }\n      if (buPicId === undefined) {\n        buImg = '&#8227;'\n      }\n      bullet = '<span style=\\'margin-left: ' + marginLeft * lvl + 'px' +\n        '; margin-right: ' + marginRight + 'px' +\n        ';width:' + bultSize + ';display: inline-block; '\n      if (isRTL) {\n        bullet += ' float: right;direction:rtl'\n      }\n      bullet += '\\'>' + buImg + '  </span>'\n      // ////////////////////////////////////////////////////////////////////////////////////\n    } else {\n      bullet = '<span style=\\'margin-left: ' + 328600 * 96 / 914400 * lvl + 'px' +\n        '; margin-right: ' + 0 + 'px;\\'></span>'\n    }\n\n    return bullet\n  }\n\n  function genSpanElement (node, slideLayoutSpNode, slideMasterSpNode, type, warpObj) {\n    const slideMasterTextStyles = warpObj['slideMasterTextStyles']\n\n    let text = node['a:t']\n    if (typeof text !== 'string' && !(text instanceof String)) {\n      text = getTextByPathList(node, ['a:fld', 'a:t'])\n      if (typeof text !== 'string' && !(text instanceof String)) {\n        text = '&nbsp;'\n      }\n    }\n\n    let styleText =\n      'color:' + getFontColor(node, type, slideMasterTextStyles) +\n      ';font-size:' + getFontSize(node, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) +\n      ';font-family:' + getFontType(node, type, slideMasterTextStyles) +\n      ';font-weight:' + getFontBold(node, type, slideMasterTextStyles) +\n      ';font-style:' + getFontItalic(node, type, slideMasterTextStyles) +\n      ';text-decoration:' + getFontDecoration(node, type, slideMasterTextStyles) +\n      ';text-align:' + getTextHorizontalAlign(node, type, slideMasterTextStyles) +\n      ';vertical-align:' + getTextVerticalAlign(node, type, slideMasterTextStyles) +\n      ';'\n    // ////////////////Amir///////////////\n    const highlight = getTextByPathList(node, ['a:rPr', 'a:highlight'])\n    if (highlight !== undefined) {\n      styleText += 'background-color:#' + getSolidFill(highlight) + ';'\n      styleText += 'Opacity:' + getColorOpacity(highlight) + ';'\n    }\n    // /////////////////////////////////////////\n    let cssName = ''\n\n    if (styleText in styleTable) {\n      cssName = styleTable[styleText]['name']\n    } else {\n      cssName = '_css_' + (Object.keys(styleTable).length + 1)\n      styleTable[styleText] = {\n        'name': cssName,\n        'text': styleText\n      }\n    }\n\n    const linkID = getTextByPathList(node, ['a:rPr', 'a:hlinkClick', 'attrs', 'r:id'])\n    // get link colors : TODO\n    if (linkID !== undefined) {\n      const linkURL = warpObj['slideResObj'][linkID]['target']\n      return '<span class=\\'text-block ' + cssName + '\\'><a href=\\'' + linkURL + '\\' target=\\'_blank\\'>' + text.replace(/\\s/i, '&nbsp;') + '</a></span>'\n    } else {\n      return '<span class=\\'text-block ' + cssName + '\\'>' + text.replace(/\\s/i, '&nbsp;') + '</span>'\n    }\n  }\n\n  function genGlobalCSS () {\n    let cssText = ''\n    for (let key in styleTable) {\n      cssText += 'section .' + styleTable[key]['name'] + '{' + styleTable[key]['text'] + '}\\n'\n    }\n    return cssText\n  }\n\n  function genTable (node, warpObj) {\n    const order = node['attrs']['order']\n    const tableNode = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'a:tbl'])\n    const xfrmNode = getTextByPathList(node, ['p:xfrm'])\n    // ///////////////////////////////////////Amir////////////////////////////////////////////////\n    const getTblPr = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'a:tbl', 'a:tblPr'])\n    const getColsGrid = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'a:tbl', 'a:tblGrid', 'a:gridCol'])\n    let tblDir = ''\n    if (getTblPr !== undefined) {\n      const isRTL = getTblPr['attrs']['rtl']\n      tblDir = (isRTL === 1 ? 'dir=rtl' : 'dir=ltr')\n    }\n    const firstRowAttr = getTblPr['attrs']['firstRow'] // associated element <a:firstRow> in the table styles\n    // const firstColAttr = getTblPr['attrs']['firstCol'] // associated element <a:firstCol> in the table styles\n    // const lastRowAttr = getTblPr['attrs']['lastRow'] // associated element <a:lastRow> in the table styles\n    // const lastColAttr = getTblPr['attrs']['lastCol'] // associated element <a:lastCol> in the table styles\n    const bandRowAttr = getTblPr['attrs']['bandRow'] // associated element <a:band1H>, <a:band2H> in the table styles\n    // const bandColAttr = getTblPr['attrs']['bandCol'] // associated element <a:band1V>, <a:band2V> in the table styles\n    // console.log(firstColAttr);\n    // //////////////////////////////////////////////////////////////////////////////////////////\n    let tableHtml = '<table ' + tblDir + ' style=\\'border-collapse: collapse;' + getPosition(xfrmNode, undefined, undefined) + getSize(xfrmNode, undefined, undefined) + ' z-index: ' + order + ';\\'>'\n\n    const trNodes = tableNode['a:tr']\n    if (trNodes.constructor === Array) {\n      for (let i = 0; i < trNodes.length; i++) {\n        // ////////////rows Style ////////////Amir\n        const rowHeightParam = trNodes[i]['attrs']['h']\n        let rowHeight = 0\n        let rowsStyl = ''\n        if (rowHeightParam !== undefined) {\n          rowHeight = parseInt(rowHeightParam) * 96 / 914400\n          rowsStyl += 'height:' + rowHeight + 'px;'\n          // tableHtml += \"<tr style='height:\"+rowHeight+\"px;'>\";\n        }\n\n        // get from Theme (tableStyles.xml) TODO\n        // get tableStyleId = a:tbl => a:tblPr => a:tableStyleId\n        let thisTblStyle\n        const tbleStyleId = getTblPr['a:tableStyleId']\n        if (tbleStyleId !== undefined) {\n          // get Style from tableStyles.xml by {const tbleStyleId}\n          // table style object : tableStyles\n          const tbleStylList = tableStyles['a:tblStyleLst']['a:tblStyle']\n\n          for (let k = 0; k < tbleStylList.length; k++) {\n            if (tbleStylList[k]['attrs']['styleId'] === tbleStyleId) {\n              thisTblStyle = tbleStylList[k]\n            }\n          }\n        }\n        // console.log(thisTblStyle);\n        if (i === 0 && firstRowAttr !== undefined) {\n          let fillColor = 'fff'\n          let colorOpacity = 1\n          if (thisTblStyle['a:firstRow'] !== undefined) {\n            const bgFillschemeClr = getTextByPathList(thisTblStyle, ['a:firstRow', 'a:tcStyle', 'a:fill', 'a:solidFill'])\n            if (bgFillschemeClr !== undefined) {\n              fillColor = getSolidFill(bgFillschemeClr)\n              colorOpacity = getColorOpacity(bgFillschemeClr)\n            }\n            // console.log(thisTblStyle[\"a:firstRow\"])\n\n            // borders color\n            // borders Width\n            const borderStyl = getTextByPathList(thisTblStyle, ['a:firstRow', 'a:tcStyle', 'a:tcBdr'])\n            if (borderStyl !== undefined) {\n              const rowBorders = getTableBorders(borderStyl)\n              rowsStyl += rowBorders\n            }\n            // console.log(thisTblStyle[\"a:firstRow\"])\n\n            // Text Style - TODO\n            const rowTxtStyl = getTextByPathList(thisTblStyle, ['a:firstRow', 'a:tcTxStyle'])\n            if (rowTxtStyl !== undefined) {\n              /*\n                    const styleText =\n                        \"color:\" + getFontColor(node, type, slideMasterTextStyles) +\n                        \";font-size:\" + getFontSize(node, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) +\n                        \";font-family:\" + getFontType(node, type, slideMasterTextStyles) +\n                        \";font-weight:\" + getFontBold(node, type, slideMasterTextStyles) +\n                        \";font-style:\" + getFontItalic(node, type, slideMasterTextStyles) +\n                        \";text-decoration:\" + getFontDecoration(node, type, slideMasterTextStyles) +\n                        \";text-align:\" + getTextHorizontalAlign(node, type, slideMasterTextStyles) +\n                        \";vertical-align:\" + getTextVerticalAlign(node, type, slideMasterTextStyles) +\n                        \";\";\n                        */\n            }\n          }\n          rowsStyl += ' background-color:#' + fillColor + ';' +\n            ' opacity:' + colorOpacity + ';'\n        } else if (i > 0 && bandRowAttr !== undefined) {\n          let fillColor = 'fff'\n          let colorOpacity = 1\n          if ((i % 2) === 0) {\n            if (thisTblStyle['a:band2H'] !== undefined) {\n              // console.log(thisTblStyle[\"a:band2H\"]);\n              const bgFillschemeClr = getTextByPathList(thisTblStyle, ['a:band2H', 'a:tcStyle', 'a:fill', 'a:solidFill'])\n              if (bgFillschemeClr !== undefined) {\n                fillColor = getSolidFill(bgFillschemeClr)\n                colorOpacity = getColorOpacity(bgFillschemeClr)\n              }\n              // borders color\n              // borders Width\n              const borderStyl = getTextByPathList(thisTblStyle, ['a:band2H', 'a:tcStyle', 'a:tcBdr'])\n              if (borderStyl !== undefined) {\n                const rowBorders = getTableBorders(borderStyl)\n                rowsStyl += rowBorders\n              }\n              // console.log(thisTblStyle[\"a:band2H\"])\n\n              // Text Style - TODO\n              const rowTxtStyl = getTextByPathList(thisTblStyle, ['a:band2H', 'a:tcTxStyle'])\n              if (rowTxtStyl !== undefined) {\n              }\n              // console.log(i,thisTblStyle)\n            }\n            /* else{\n                        const bgFillschemeClr = thisTblStyle[\"a:wholeTbl\"][\"a:tcStyle\"][\"a:fill\"][\"a:solidFill\"];\n                        if(bgFillschemeClr !==undefined){\n                            fillColor = getSolidFill(bgFillschemeClr);\n                            colorOpacity = getColorOpacity(bgFillschemeClr);\n                        }\n                        //borders color\n                        //borders Width\n                        const borderStyl = thisTblStyle[\"a:wholeTbl\"][\"a:tcStyle\"][\"a:tcBdr\"];\n                        if(borderStyl !== undefined){\n                            const rowBorders = getTableBorders(borderStyl);\n                            rowsStyl += rowBorders;\n                        }\n                        //console.log(thisTblStyle[\"a:wholeTbl\"])\n\n                        //Text Style - TODO\n                        const rowTxtStyl = thisTblStyle[\"a:wholeTbl\"][\"a:tcTxStyle\"];\n                        if(rowTxtStyl !== undefined){\n                        }\n                    } */\n          } else {\n            if (thisTblStyle['a:band1H'] !== undefined) {\n              const bgFillschemeClr = getTextByPathList(thisTblStyle, ['a:band1H', 'a:tcStyle', 'a:fill', 'a:solidFill'])\n              if (bgFillschemeClr !== undefined) {\n                fillColor = getSolidFill(bgFillschemeClr)\n                colorOpacity = getColorOpacity(bgFillschemeClr)\n              }\n              // borders color\n              // borders Width\n              const borderStyl = getTextByPathList(thisTblStyle, ['a:band1H', 'a:tcStyle', 'a:tcBdr'])\n              if (borderStyl !== undefined) {\n                const rowBorders = getTableBorders(borderStyl)\n                rowsStyl += rowBorders\n              }\n              // console.log(thisTblStyle[\"a:band1H\"])\n\n              // Text Style - TODO\n              const rowTxtStyl = getTextByPathList(thisTblStyle, ['a:band1H', 'a:tcTxStyle'])\n              if (rowTxtStyl !== undefined) {\n              }\n            }\n          }\n          rowsStyl += ' background-color:#' + fillColor + ';' +\n            ' opacity:' + colorOpacity + ';'\n        }\n        tableHtml += '<tr style=\\'' + rowsStyl + '\\'>'\n        // //////////////////////////////////////////////\n\n        const tcNodes = trNodes[i]['a:tc']\n\n        if (tcNodes.constructor === Array) {\n          for (let j = 0; j < tcNodes.length; j++) {\n            const text = genTextBody(tcNodes[j]['a:txBody'], undefined, undefined, undefined, warpObj)\n            const rowSpan = getTextByPathList(tcNodes[j], ['attrs', 'rowSpan'])\n            const colSpan = getTextByPathList(tcNodes[j], ['attrs', 'gridSpan'])\n            const vMerge = getTextByPathList(tcNodes[j], ['attrs', 'vMerge'])\n            const hMerge = getTextByPathList(tcNodes[j], ['attrs', 'hMerge'])\n            // Cells Style : TODO /////////////Amir\n            // console.log(tcNodes[j]);\n            // if(j==0 && ())\n            const colWidthParam = getColsGrid[j]['attrs']['w']\n            let colStyl = ''\n            if (colWidthParam !== undefined) {\n              const colWidth = parseInt(colWidthParam) * 96 / 914400\n              colStyl += 'width:' + colWidth + 'px;'\n            }\n            const getFill = tcNodes[j]['a:tcPr']['a:solidFill']\n            let fillColor = ''\n            let colorOpacity = 1\n            if (getFill !== undefined) {\n              // console.log(getFill);\n              fillColor = getSolidFill(getFill)\n              colorOpacity = getColorOpacity(getFill)\n            } else {\n              // get from Theme (tableStyles.xml) TODO\n              // get tableStyleId = a:tbl => a:tblPr => a:tableStyleId\n              const tbleStyleId = getTblPr['a:tableStyleId']\n              if (tbleStyleId !== undefined) {\n                // get Style from tableStyles.xml by {const tbleStyleId}\n                // table style object : tableStyles\n                const tbleStylList = tableStyles['a:tblStyleLst']['a:tblStyle']\n\n                for (let k = 0; k < tbleStylList.length; k++) {\n                  if (tbleStylList[k]['attrs']['styleId'] === tbleStyleId) {\n                    // console.log(tbleStylList[k]);\n                  }\n                }\n              }\n              // console.log(tbleStyleId);\n            }\n            if (fillColor !== '') {\n              colStyl += ' background-color:#' + fillColor + ';'\n              colStyl += ' opacity' + colorOpacity + ';'\n            }\n            // console.log(fillColor);\n            // //////////////////////////////////\n\n            if (rowSpan !== undefined) {\n              tableHtml += '<td rowspan=\\'' + parseInt(rowSpan) + '\\' style=\\'' + colStyl + '\\'>' + text + '</td>'\n            } else if (colSpan !== undefined) {\n              tableHtml += '<td colspan=\\'' + parseInt(colSpan) + '\\' style=\\'' + colStyl + '\\'>' + text + '</td>'\n            } else if (vMerge === undefined && hMerge === undefined) {\n              tableHtml += '<td style=\\'' + colStyl + '\\'>' + text + '</td>'\n            }\n          }\n        } else {\n          const text = genTextBody(tcNodes['a:txBody'])\n          // Cells Style : TODO /////////////Amir\n          const colWidthParam = getColsGrid[0]['attrs']['w']\n          let colStyl = ''\n          if (colWidthParam !== undefined) {\n            const colWidth = parseInt(colWidthParam) * 96 / 914400\n            colStyl += 'width:' + colWidth + 'px;'\n          }\n          const getFill = tcNodes['a:tcPr']['a:solidFill']\n          let fillColor = ''\n          let colorOpacity = 1\n          if (getFill !== undefined) {\n            // console.log(getFill);\n            fillColor = getSolidFill(getFill)\n            colorOpacity = getColorOpacity(getFill)\n          } else {\n            // get from Theme TODO\n          }\n          if (fillColor !== '') {\n            colStyl += ' background-color:#' + fillColor + ';'\n            colStyl += ' opacity' + colorOpacity + ';'\n          }\n          // //////////////////////////////////\n          tableHtml += '<td style=\\'' + colStyl + '\\'>' + text + '</td>'\n        }\n        tableHtml += '</tr>'\n      }\n    } else {\n      // ////////////row height ////////////Amir\n      const rowHeightParam = trNodes['attrs']['h']\n      let rowHeight = 0\n      if (rowHeightParam !== undefined) {\n        rowHeight = parseInt(rowHeightParam) * 96 / 914400\n        tableHtml += '<tr style=\\'height:' + rowHeight + 'px;\\'>'\n      } else {\n        tableHtml += '<tr>'\n      }\n      // //////////////////////////////////////////////\n      const tcNodes = trNodes['a:tc']\n      if (tcNodes.constructor === Array) {\n        for (let j = 0; j < tcNodes.length; j++) {\n          const text = genTextBody(tcNodes[j]['a:txBody'])\n          // Cells Style : TODO /////////////Amir\n          const colWidthParam = getColsGrid[j]['attrs']['w']\n          let colStyl = ''\n          if (colWidthParam !== undefined) {\n            const colWidth = parseInt(colWidthParam) * 96 / 914400\n            colStyl += 'width:' + colWidth + 'px;'\n          }\n          const getFill = tcNodes[j]['a:tcPr']['a:solidFill']\n          let fillColor = ''\n          let colorOpacity = 1\n          if (getFill !== undefined) {\n            fillColor = getSolidFill(getFill)\n            colorOpacity = getColorOpacity(getFill)\n          } else {\n            // get from Theme TODO\n            // get tableStyleId\n            // a:tbl => a:tblPr => a:tableStyleId\n          }\n          if (fillColor !== '') {\n            colStyl += ' background-color:#' + fillColor + ';'\n            colStyl += ' opacity' + colorOpacity + ';'\n          }\n          // //////////////////////////////////\n          tableHtml += '<td style=\\'' + colStyl + '\\'>' + text + '</td>'\n        }\n      } else {\n        const text = genTextBody(tcNodes['a:txBody'])\n        // Cells Style : TODO /////////////Amir\n        const colWidthParam = getColsGrid[0]['attrs']['w']\n        let colStyl = ''\n        if (colWidthParam !== undefined) {\n          const colWidth = parseInt(colWidthParam) * 96 / 914400\n          colStyl += 'width:' + colWidth + 'px;'\n        }\n        const getFill = tcNodes['a:tcPr']['a:solidFill']\n        let fillColor = ''\n        let colorOpacity = 1\n        if (getFill !== undefined) {\n          // console.log(getFill);\n          fillColor = getSolidFill(getFill)\n          colorOpacity = getColorOpacity(getFill)\n        } else {\n          // get from Theme TODO\n        }\n        if (fillColor !== '') {\n          colStyl += ' background-color:#' + fillColor + ';'\n          colStyl += ' opacity' + colorOpacity + ';'\n        }\n        // //////////////////////////////////\n        tableHtml += '<td style=\\'' + colStyl + '\\'>' + text + '</td>'\n      }\n      tableHtml += '</tr>'\n    }\n\n    return tableHtml\n  }\n\n  async function genChart (node, warpObj) {\n    const order = node['attrs']['order']\n    const xfrmNode = getTextByPathList(node, ['p:xfrm'])\n    const result = '<div id=\\'chart' + chartID + '\\' class=\\'block content\\' style=\\'' +\n      getPosition(xfrmNode, undefined, undefined) + getSize(xfrmNode, undefined, undefined) +\n      ' z-index: ' + order + ';\\'></div>'\n\n    const rid = node['a:graphic']['a:graphicData']['c:chart']['attrs']['r:id']\n    const refName = warpObj['slideResObj'][rid]['target']\n    const content = await readXmlFile(warpObj['zip'], refName)\n    const plotArea = getTextByPathList(content, ['c:chartSpace', 'c:chart', 'c:plotArea'])\n\n    let chartData = null\n    for (let key in plotArea) {\n      switch (key) {\n        case 'c:lineChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'lineChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:barChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'barChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:pieChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'pieChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:pie3DChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'pie3DChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:areaChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'areaChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:scatterChart':\n          chartData = {\n            'type': 'createChart',\n            'data': {\n              'chartID': 'chart' + chartID,\n              'chartType': 'scatterChart',\n              'chartData': extractChartData(plotArea[key]['c:ser'])\n            }\n          }\n          break\n        case 'c:catAx':\n          break\n        case 'c:valAx':\n          break\n        default:\n      }\n    }\n\n    if (chartData !== null) {\n      charts.push(chartData)\n    }\n\n    chartID++\n    return result\n  }\n\n  function genDiagram (node, warpObj) {\n    // const order = node['attrs']['order']\n    const xfrmNode = getTextByPathList(node, ['p:xfrm'])\n    return '<div class=\\'block content\\' style=\\'border: 1px dotted;' +\n      getPosition(xfrmNode, undefined, undefined) + getSize(xfrmNode, undefined, undefined) +\n      '\\'>TODO: diagram</div>'\n  }\n\n  function getPosition (slideSpNode, slideLayoutSpNode, slideMasterSpNode) {\n    let off\n    let x = -1\n    let y = -1\n\n    if (slideSpNode !== undefined) {\n      off = slideSpNode['a:off']['attrs']\n    } else if (slideLayoutSpNode !== undefined) {\n      off = slideLayoutSpNode['a:off']['attrs']\n    } else if (slideMasterSpNode !== undefined) {\n      off = slideMasterSpNode['a:off']['attrs']\n    }\n\n    if (off === undefined) {\n      return ''\n    } else {\n      x = parseInt(off['x']) * 96 / 914400\n      y = parseInt(off['y']) * 96 / 914400\n      return (isNaN(x) || isNaN(y)) ? '' : 'top:' + y + 'px; left:' + x + 'px;'\n    }\n  }\n\n  function getSize (slideSpNode, slideLayoutSpNode, slideMasterSpNode) {\n    let ext\n    let w = -1\n    let h = -1\n\n    if (slideSpNode !== undefined) {\n      ext = slideSpNode['a:ext']['attrs']\n    } else if (slideLayoutSpNode !== undefined) {\n      ext = slideLayoutSpNode['a:ext']['attrs']\n    } else if (slideMasterSpNode !== undefined) {\n      ext = slideMasterSpNode['a:ext']['attrs']\n    }\n\n    if (ext === undefined) {\n      return ''\n    } else {\n      w = parseInt(ext['cx']) * 96 / 914400\n      h = parseInt(ext['cy']) * 96 / 914400\n      return (isNaN(w) || isNaN(h)) ? '' : 'width:' + w + 'px; height:' + h + 'px;'\n    }\n  }\n\n  function getHorizontalAlign (node, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) {\n    let algn = getTextByPathList(node, ['a:pPr', 'attrs', 'algn'])\n    if (algn === undefined) {\n      algn = getTextByPathList(slideLayoutSpNode, ['p:txBody', 'a:p', 'a:pPr', 'attrs', 'algn'])\n      if (algn === undefined) {\n        algn = getTextByPathList(slideMasterSpNode, ['p:txBody', 'a:p', 'a:pPr', 'attrs', 'algn'])\n        if (algn === undefined) {\n          switch (type) {\n            case 'title':\n            case 'subTitle':\n            case 'ctrTitle': {\n              algn = getTextByPathList(slideMasterTextStyles, ['p:titleStyle', 'a:lvl1pPr', 'attrs', 'alng'])\n              break\n            }\n            default: {\n              algn = getTextByPathList(slideMasterTextStyles, ['p:otherStyle', 'a:lvl1pPr', 'attrs', 'alng'])\n            }\n          }\n        }\n      }\n    }\n    // TODO:\n    if (algn === undefined) {\n      if (type === 'title' || type === 'subTitle' || type === 'ctrTitle') {\n        return 'h-mid'\n      } else if (type === 'sldNum') {\n        return 'h-right'\n      }\n    }\n    return algn === 'ctr' ? 'h-mid' : algn === 'r' ? 'h-right' : 'h-left'\n  }\n\n  function getVerticalAlign (node, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) {\n    // 上中下對齊: X, <a:bodyPr anchor=\"ctr\">, <a:bodyPr anchor=\"b\">\n    let anchor = getTextByPathList(node, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n    if (anchor === undefined) {\n      anchor = getTextByPathList(slideLayoutSpNode, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n      if (anchor === undefined) {\n        anchor = getTextByPathList(slideMasterSpNode, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n      }\n    }\n\n    return anchor === 'ctr' ? 'v-mid' : anchor === 'b' ? 'v-down' : 'v-up'\n  }\n\n  function getFontType (node, type, slideMasterTextStyles) {\n    let typeface = getTextByPathList(node, ['a:rPr', 'a:latin', 'attrs', 'typeface'])\n\n    if (typeface === undefined) {\n      const fontSchemeNode = getTextByPathList(themeContent, ['a:theme', 'a:themeElements', 'a:fontScheme'])\n      if (type === 'title' || type === 'subTitle' || type === 'ctrTitle') {\n        typeface = getTextByPathList(fontSchemeNode, ['a:majorFont', 'a:latin', 'attrs', 'typeface'])\n      } else if (type === 'body') {\n        typeface = getTextByPathList(fontSchemeNode, ['a:minorFont', 'a:latin', 'attrs', 'typeface'])\n      } else {\n        typeface = getTextByPathList(fontSchemeNode, ['a:minorFont', 'a:latin', 'attrs', 'typeface'])\n      }\n    }\n\n    return (typeface === undefined) ? 'inherit' : typeface\n  }\n\n  function getFontColor (node, type, slideMasterTextStyles) {\n    const solidFillNode = getTextByPathStr(node, 'a:rPr a:solidFill')\n\n    const color = getSolidFill(solidFillNode)\n    // console.log(themeContent)\n    // const schemeClr = getTextByPathList(buClrNode ,[\"a:schemeClr\", \"attrs\",\"val\"]);\n    return (color === undefined || color === 'FFF') ? '#000' : '#' + color\n  }\n\n  function getFontSize (node, slideLayoutSpNode, slideMasterSpNode, type, slideMasterTextStyles) {\n    let fontSize\n    let sz\n    if (node['a:rPr'] !== undefined) {\n      fontSize = parseInt(node['a:rPr']['attrs']['sz']) / 100\n    }\n\n    if ((isNaN(fontSize) || fontSize === undefined)) {\n      sz = getTextByPathList(slideLayoutSpNode, ['p:txBody', 'a:lstStyle', 'a:lvl1pPr', 'a:defRPr', 'attrs', 'sz'])\n      fontSize = parseInt(sz) / 100\n    }\n\n    if (isNaN(fontSize) || fontSize === undefined) {\n      if (type === 'title' || type === 'subTitle' || type === 'ctrTitle') {\n        sz = getTextByPathList(slideMasterTextStyles, ['p:titleStyle', 'a:lvl1pPr', 'a:defRPr', 'attrs', 'sz'])\n      } else if (type === 'body') {\n        sz = getTextByPathList(slideMasterTextStyles, ['p:bodyStyle', 'a:lvl1pPr', 'a:defRPr', 'attrs', 'sz'])\n      } else if (type === 'dt' || type === 'sldNum') {\n        sz = '1200'\n      } else if (type === undefined) {\n        sz = getTextByPathList(slideMasterTextStyles, ['p:otherStyle', 'a:lvl1pPr', 'a:defRPr', 'attrs', 'sz'])\n      }\n      fontSize = parseInt(sz) / 100\n    }\n\n    const baseline = getTextByPathList(node, ['a:rPr', 'attrs', 'baseline'])\n    if (baseline !== undefined && !isNaN(fontSize)) {\n      fontSize -= 10\n    }\n\n    return isNaN(fontSize) ? 'inherit' : (fontSize + 'pt')\n  }\n\n  function getFontBold (node, type, slideMasterTextStyles) {\n    return (node['a:rPr'] !== undefined && node['a:rPr']['attrs']['b'] === '1') ? 'bold' : 'initial'\n  }\n\n  function getFontItalic (node, type, slideMasterTextStyles) {\n    return (node['a:rPr'] !== undefined && node['a:rPr']['attrs']['i'] === '1') ? 'italic' : 'normal'\n  }\n\n  function getFontDecoration (node, type, slideMasterTextStyles) {\n    // /////////////////////////////Amir///////////////////////////////\n    if (node['a:rPr'] !== undefined) {\n      const underLine = node['a:rPr']['attrs']['u'] !== undefined ? node['a:rPr']['attrs']['u'] : 'none'\n      const strikethrough = node['a:rPr']['attrs']['strike'] !== undefined ? node['a:rPr']['attrs']['strike'] : 'noStrike'\n      // console.log(\"strikethrough: \"+strikethrough);\n\n      if (underLine !== 'none' && strikethrough === 'noStrike') {\n        return 'underline'\n      } else if (underLine === 'none' && strikethrough !== 'noStrike') {\n        return 'line-through'\n      } else if (underLine !== 'none' && strikethrough !== 'noStrike') {\n        return 'underline line-through'\n      } else {\n        return 'initial'\n      }\n    } else {\n      return 'initial'\n    }\n    // ///////////////////////////////////////////////////////////////\n    // return (node[\"a:rPr\"] !== undefined && node[\"a:rPr\"][\"attrs\"][\"u\"] === \"sng\") ? \"underline\" : \"initial\";\n  }\n\n// //////////////////////////////////Amir/////////////////////////////////////\n  function getTextHorizontalAlign (node, type, slideMasterTextStyles) {\n    const getAlgn = getTextByPathList(node, ['a:pPr', 'attrs', 'algn'])\n    let align = 'initial'\n    if (getAlgn !== undefined) {\n      switch (getAlgn) {\n        case 'l': {\n          align = 'left'\n          break\n        }\n        case 'r': {\n          align = 'right'\n          break\n        }\n        case 'ctr': {\n          align = 'center'\n          break\n        }\n        case 'just': {\n          align = 'justify'\n          break\n        }\n        case 'dist': {\n          align = 'justify'\n          break\n        }\n        default:\n          align = 'initial'\n      }\n    }\n    return align\n  }\n\n// ///////////////////////////////////////////////////////////////////\n  function getTextVerticalAlign (node, type, slideMasterTextStyles) {\n    const baseline = getTextByPathList(node, ['a:rPr', 'attrs', 'baseline'])\n    return baseline === undefined ? 'baseline' : (parseInt(baseline) / 1000) + '%'\n  }\n\n// /////////////////////////////////Amir/////////////////////////////\n  /*\nfunction getTextDirection (node, type, slideMasterTextStyles) {\n  // get lvl\n  const pprLvl = getTextByPathList(node, ['a:pPr', 'attrs', 'lvl'])\n  const pprLvlNum = pprLvl === undefined ? 1 : Number(pprLvl) + 1\n  const lvlNode = 'a:lvl' + pprLvlNum + 'pPr'\n  const pprAlgn = getTextByPathList(node, ['a:pPr', 'attrs', 'algn'])\n  const isDir = getTextByPathList(slideMasterTextStyles, ['p:bodyStyle', lvlNode, 'attrs', 'rtl'])\n  // const tmp = getTextByPathList(node, [\"a:r\", \"a:t\"]);\n  let dir = ''\n  if (isDir !== undefined) {\n    if (isDir === '1' && (pprAlgn === undefined || pprAlgn === 'r')) {\n      dir = 'rtl'\n    } else { // isDir ==\"0\"\n      dir = 'ltr'\n    }\n  }\n  // console.log(tmp,isDir,pprAlgn,dir)\n  return dir\n}\n*/\n\n  function getTableBorders (node) {\n    let borderStyle = ''\n    let obj\n    let borders\n    if (node['a:bottom'] !== undefined) {\n      obj = {\n        'p:spPr': {\n          'a:ln': node['a:bottom']['a:ln']\n        }\n      }\n      borders = getBorder(obj, false)\n      borderStyle += borders.replace('border', 'border-bottom')\n    }\n    if (node['a:top'] !== undefined) {\n      obj = {\n        'p:spPr': {\n          'a:ln': node['a:top']['a:ln']\n        }\n      }\n      borders = getBorder(obj, false)\n      borderStyle += borders.replace('border', 'border-top')\n    }\n    if (node['a:right'] !== undefined) {\n      obj = {\n        'p:spPr': {\n          'a:ln': node['a:right']['a:ln']\n        }\n      }\n      borders = getBorder(obj, false)\n      borderStyle += borders.replace('border', 'border-right')\n    }\n    if (node['a:left'] !== undefined) {\n      obj = {\n        'p:spPr': {\n          'a:ln': node['a:left']['a:ln']\n        }\n      }\n      borders = getBorder(obj, false)\n      borderStyle += borders.replace('border', 'border-left')\n    }\n\n    return borderStyle\n  }\n\n// ////////////////////////////////////////////////////////////////\n  function getBorder (node, isSvgMode) {\n    let cssText = 'border: '\n\n    // 1. presentationML\n    const lineNode = node['p:spPr']['a:ln']\n\n    // Border width: 1pt = 12700, default = 0.75pt\n    const borderWidth = parseInt(getTextByPathList(lineNode, ['attrs', 'w'])) / 12700\n    if (isNaN(borderWidth) || borderWidth < 1) {\n      cssText += '1pt '\n    } else {\n      cssText += borderWidth + 'pt '\n    }\n    // Border type\n    const borderType = getTextByPathList(lineNode, ['a:prstDash', 'attrs', 'val'])\n    let strokeDasharray = '0'\n    switch (borderType) {\n      case 'solid': {\n        cssText += 'solid'\n        strokeDasharray = '0'\n        break\n      }\n      case 'dash': {\n        cssText += 'dashed'\n        strokeDasharray = '5'\n        break\n      }\n      case 'dashDot': {\n        cssText += 'dashed'\n        strokeDasharray = '5, 5, 1, 5'\n        break\n      }\n      case 'dot': {\n        cssText += 'dotted'\n        strokeDasharray = '1, 5'\n        break\n      }\n      case 'lgDash': {\n        cssText += 'dashed'\n        strokeDasharray = '10, 5'\n        break\n      }\n      case 'lgDashDotDot': {\n        cssText += 'dashed'\n        strokeDasharray = '10, 5, 1, 5, 1, 5'\n        break\n      }\n      case 'sysDash': {\n        cssText += 'dashed'\n        strokeDasharray = '5, 2'\n        break\n      }\n      case 'sysDashDot': {\n        cssText += 'dashed'\n        strokeDasharray = '5, 2, 1, 5'\n        break\n      }\n      case 'sysDashDotDot': {\n        cssText += 'dashed'\n        strokeDasharray = '5, 2, 1, 5, 1, 5'\n        break\n      }\n      case 'sysDot': {\n        cssText += 'dotted'\n        strokeDasharray = '2, 5'\n        break\n      }\n      default: {\n        cssText += 'solid'\n        strokeDasharray = '0'\n      }\n    }\n    // Border color\n    let borderColor = getTextByPathList(lineNode, ['a:solidFill', 'a:srgbClr', 'attrs', 'val'])\n    if (borderColor === undefined) {\n      const schemeClrNode = getTextByPathList(lineNode, ['a:solidFill', 'a:schemeClr'])\n      if (schemeClrNode !== undefined) {\n        const schemeClr = 'a:' + getTextByPathList(schemeClrNode, ['attrs', 'val'])\n        borderColor = getSchemeColorFromTheme(schemeClr, undefined)\n      }\n    }\n\n    // 2. drawingML namespace\n    if (borderColor === undefined) {\n      const schemeClrNode = getTextByPathList(node, ['p:style', 'a:lnRef', 'a:schemeClr'])\n      if (schemeClrNode !== undefined) {\n        const schemeClr = 'a:' + getTextByPathList(schemeClrNode, ['attrs', 'val'])\n        borderColor = getSchemeColorFromTheme(schemeClr, undefined)\n      }\n\n      if (borderColor !== undefined) {\n        let shade = getTextByPathList(schemeClrNode, ['a:shade', 'attrs', 'val'])\n        if (shade !== undefined) {\n          shade = parseInt(shade) / 100000\n          const color = new colz.Color('#' + borderColor)\n          color.setLum(color.hsl.l * shade)\n          borderColor = color.hex.replace('#', '')\n        }\n      }\n    }\n\n    if (borderColor === undefined) {\n      if (isSvgMode) {\n        borderColor = 'none'\n      } else {\n        borderColor = '#000'\n      }\n    } else {\n      borderColor = '#' + borderColor\n    }\n    cssText += ' ' + borderColor + ' '\n\n    if (isSvgMode) {\n      return {'color': borderColor, 'width': borderWidth, 'type': borderType, 'strokeDasharray': strokeDasharray}\n    } else {\n      return cssText + ';'\n    }\n  }\n\n  function getSlideBackgroundFill (slideContent, slideLayoutContent, slideMasterContent, warpObj) {\n    // console.log(slideContent)\n    // getFillType(node)\n    let bgPr = getTextByPathList(slideContent, ['p:sld', 'p:cSld', 'p:bg', 'p:bgPr'])\n    let bgRef = getTextByPathList(slideContent, ['p:sld', 'p:cSld', 'p:bg', 'p:bgRef'])\n    let bgcolor\n\n    if (bgPr !== undefined) {\n      // bgcolor = \"background-color: blue;\";\n      const bgFillTyp = getFillType(bgPr)\n\n      if (bgFillTyp === 'SOLID_FILL') {\n        const sldFill = bgPr['a:solidFill']\n        const bgColor = getSolidFill(sldFill)\n        const sldTint = getColorOpacity(sldFill)\n        bgcolor = 'background: rgba(' + hexToRgbNew(bgColor) + ',' + sldTint + ');'\n      } else if (bgFillTyp === 'GRADIENT_FILL') {\n        const grdFill = bgPr['a:gradFill']\n        // const grdFillVals =  getGradientFill(grdFill);\n        // console.log(\"grdFillVals\",grdFillVals)\n        const gsLst = grdFill['a:gsLst']['a:gs']\n        // get start color\n        // let startColorNode\n        // let endColorNode\n        const colorArray = []\n        const tintArray = []\n        for (let i = 0; i < gsLst.length; i++) {\n          let loTint\n          let loColor\n          if (gsLst[i]['a:srgbClr'] !== undefined) {\n            loColor = getTextByPathList(gsLst[i], ['a:srgbClr', 'attrs', 'val']) // #...\n            loTint = getTextByPathList(gsLst[i], ['a:srgbClr', 'a:tint', 'attrs', 'val'])\n          } else if (gsLst[i]['a:schemeClr'] !== undefined) { // a:schemeClr\n            const schemeClr = getTextByPathList(gsLst[i], ['a:schemeClr', 'attrs', 'val'])\n            loColor = getSchemeColorFromTheme('a:' + schemeClr, slideMasterContent) // #...\n            loTint = getTextByPathList(gsLst[i], ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n            // console.log(\"schemeClr\",schemeClr,slideMasterContent)\n          }\n          // console.log(\"loColor\",loColor)\n          colorArray[i] = loColor\n          tintArray[i] = (loTint !== undefined) ? parseInt(loTint) / 100000 : 1\n        }\n        // get rot\n        const lin = grdFill['a:lin']\n        let rot = 90\n        if (lin !== undefined) {\n          rot = angleToDegrees(lin['attrs']['ang']) + 90\n        }\n        bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n        for (let i = 0; i < gsLst.length; i++) {\n          if (i === gsLst.length - 1) {\n            bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ');'\n          } else {\n            bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ', '\n          }\n        }\n      } else if (bgFillTyp === 'PIC_FILL') {\n        const picFillBase64 = getPicFill('slideBg', bgPr['a:blipFill'], warpObj)\n        const ordr = bgPr['attrs']['order']\n        // a:srcRect\n        // a:stretch => a:fillRect =>attrs (l:-17000, r:-17000)\n        bgcolor = 'background-image: url(' + picFillBase64 + ');  z-index: ' + ordr + ';'\n        // console.log(picFillBase64);\n      }\n      // console.log(slideContent,slideMasterContent,colorArray,tintArray,rot,bgcolor)\n    } else if (bgRef !== undefined) {\n      // console.log(\"slideContent\",bgRef)\n      let phClr\n      if (bgRef['a:srgbClr'] !== undefined) {\n        phClr = getTextByPathList(bgRef, ['a:srgbClr', 'attrs', 'val']) // #...\n      } else if (bgRef['a:schemeClr'] !== undefined) { // a:schemeClr\n        const schemeClr = getTextByPathList(bgRef, ['a:schemeClr', 'attrs', 'val'])\n        phClr = getSchemeColorFromTheme('a:' + schemeClr, slideMasterContent) // #...\n        // console.log(\"schemeClr\",schemeClr,\"phClr=\",phClr)\n      }\n      const idx = Number(bgRef['attrs']['idx'])\n\n      if (idx === 0 || idx === 1000) {\n        // no background\n      } else if (idx > 0 && idx < 1000) {\n        // fillStyleLst in themeContent\n        // themeContent[\"a:fmtScheme\"][\"a:fillStyleLst\"]\n        // bgcolor = \"background: red;\";\n      } else if (idx > 1000) {\n        // bgFillStyleLst  in themeContent\n        // themeContent[\"a:fmtScheme\"][\"a:bgFillStyleLst\"]\n        const trueIdx = idx - 1000\n        const bgFillLst = themeContent['a:theme']['a:themeElements']['a:fmtScheme']['a:bgFillStyleLst']\n        const sortblAry = []\n        Object.keys(bgFillLst).forEach(function (key) {\n          const bgFillLstTyp = bgFillLst[key]\n          if (key !== 'attrs') {\n            if (bgFillLstTyp.constructor === Array) {\n              for (let i = 0; i < bgFillLstTyp.length; i++) {\n                const obj = {}\n                obj[key] = bgFillLstTyp[i]\n                obj['idex'] = bgFillLstTyp[i]['attrs']['order']\n                sortblAry.push(obj)\n              }\n            } else {\n              const obj = {}\n              obj[key] = bgFillLstTyp\n              obj['idex'] = bgFillLstTyp['attrs']['order']\n              sortblAry.push(obj)\n            }\n          }\n        })\n        const sortByOrder = sortblAry.slice(0)\n        sortByOrder.sort(function (a, b) {\n          return a.idex - b.idex\n        })\n        const bgFillLstIdx = sortByOrder[trueIdx - 1]\n        const bgFillTyp = getFillType(bgFillLstIdx)\n        if (bgFillTyp === 'SOLID_FILL') {\n          const sldFill = bgFillLstIdx['a:solidFill']\n          // const sldBgColor = getSolidFill(sldFill);\n          const sldTint = getColorOpacity(sldFill)\n          bgcolor = 'background: rgba(' + hexToRgbNew(phClr) + ',' + sldTint + ');'\n          // console.log(\"slideMasterContent - sldFill\",sldFill)\n        } else if (bgFillTyp === 'GRADIENT_FILL') {\n          const grdFill = bgFillLstIdx['a:gradFill']\n          const gsLst = grdFill['a:gsLst']['a:gs']\n          // get start color\n          // let startColorNode\n          // let endColorNode\n          const tintArray = []\n          for (let i = 0; i < gsLst.length; i++) {\n            const loTint = getTextByPathList(gsLst[i], ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n            tintArray[i] = (loTint !== undefined) ? parseInt(loTint) / 100000 : 1\n          }\n          // console.log(\"gsLst\",gsLst)\n          // get rot\n          const lin = grdFill['a:lin']\n          let rot = 90\n          if (lin !== undefined) {\n            rot = angleToDegrees(lin['attrs']['ang']) + 90\n          }\n          bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n          for (let i = 0; i < gsLst.length; i++) {\n            if (i === gsLst.length - 1) {\n              bgcolor += 'rgba(' + hexToRgbNew(phClr) + ',' + tintArray[i] + ')' + ');'\n            } else {\n              bgcolor += 'rgba(' + hexToRgbNew(phClr) + ',' + tintArray[i] + ')' + ', '\n            }\n          }\n        }\n      }\n    } else {\n      bgPr = getTextByPathList(slideLayoutContent, ['p:sldLayout', 'p:cSld', 'p:bg', 'p:bgPr'])\n      bgRef = getTextByPathList(slideLayoutContent, ['p:sldLayout', 'p:cSld', 'p:bg', 'p:bgRef'])\n      // console.log(\"slideLayoutContent\",bgPr,bgRef)\n      if (bgPr !== undefined) {\n        const bgFillTyp = getFillType(bgPr)\n        if (bgFillTyp === 'SOLID_FILL') {\n          const sldFill = bgPr['a:solidFill']\n          const bgColor = getSolidFill(sldFill)\n          const sldTint = getColorOpacity(sldFill)\n          bgcolor = 'background: rgba(' + hexToRgbNew(bgColor) + ',' + sldTint + ');'\n        } else if (bgFillTyp === 'GRADIENT_FILL') {\n          const grdFill = bgPr['a:gradFill']\n          // const grdFillVals =  getGradientFill(grdFill);\n          // console.log(\"grdFillVals\",grdFillVals)\n          const gsLst = grdFill['a:gsLst']['a:gs']\n          // get start color\n          // let startColorNode\n          // let endColorNode\n          const colorArray = []\n          const tintArray = []\n          for (let i = 0; i < gsLst.length; i++) {\n            let loTint\n            let loColor\n            if (gsLst[i]['a:srgbClr'] !== undefined) {\n              loColor = getTextByPathList(gsLst[i], ['a:srgbClr', 'attrs', 'val']) // #...\n              loTint = getTextByPathList(gsLst[i], ['a:srgbClr', 'a:tint', 'attrs', 'val'])\n            } else if (gsLst[i]['a:schemeClr'] !== undefined) { // a:schemeClr\n              const schemeClr = getTextByPathList(gsLst[i], ['a:schemeClr', 'attrs', 'val'])\n              loColor = getSchemeColorFromTheme('a:' + schemeClr, slideMasterContent) // #...\n              loTint = getTextByPathList(gsLst[i], ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n              // console.log(\"schemeClr\",schemeClr,slideMasterContent)\n            }\n            // console.log(\"loColor\",loColor)\n            colorArray[i] = loColor\n            tintArray[i] = (loTint !== undefined) ? parseInt(loTint) / 100000 : 1\n          }\n          // console.log(\"colorArray\",colorArray,\"tintArray\",tintArray)\n          // get rot\n          const lin = grdFill['a:lin']\n          let rot = 90\n          if (lin !== undefined) {\n            rot = angleToDegrees(lin['attrs']['ang']) + 90\n          }\n\n          bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n          for (let i = 0; i < gsLst.length; i++) {\n            if (i === gsLst.length - 1) {\n              bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ');'\n            } else {\n              bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ', '\n            }\n          }\n        } else if (bgFillTyp === 'PIC_FILL') {\n          // console.log(\"bgPr\",bgPr,\"bgFillTyp\",bgFillTyp)\n          const picFillBase64 = getPicFill('layoutBg', bgPr['a:blipFill'], warpObj)\n          const ordr = bgPr['attrs']['order']\n          // a:srcRect\n          // a:stretch => a:fillRect =>attrs (l:-17000, r:-17000)\n          bgcolor = 'background-image: url(' + picFillBase64 + ');  z-index: ' + ordr + ';'\n          // console.log(warpObj)\n        }\n        // console.log(\"slideLayoutContent\",bgcolor)\n      } else if (bgRef !== undefined) {\n        bgcolor = 'background: red;'\n      } else {\n        bgPr = getTextByPathList(slideMasterContent, ['p:sldMaster', 'p:cSld', 'p:bg', 'p:bgPr'])\n        bgRef = getTextByPathList(slideMasterContent, ['p:sldMaster', 'p:cSld', 'p:bg', 'p:bgRef'])\n\n        // console.log(\"bgRef\",bgRef[\"a:schemeClr\"][\"attrs\"][\"val\"])\n        if (bgPr !== undefined) {\n          const bgFillTyp = getFillType(bgPr)\n          if (bgFillTyp === 'SOLID_FILL') {\n            const sldFill = bgPr['a:solidFill']\n            const bgColor = getSolidFill(sldFill)\n            const sldTint = getColorOpacity(sldFill)\n            bgcolor = 'background: rgba(' + hexToRgbNew(bgColor) + ',' + sldTint + ');'\n          } else if (bgFillTyp === 'GRADIENT_FILL') {\n            const grdFill = bgPr['a:gradFill']\n            // const grdFillVals =  getGradientFill(grdFill);\n            // console.log(\"grdFillVals\",grdFillVals)\n            const gsLst = grdFill['a:gsLst']['a:gs']\n            // get start color\n            // let startColorNode\n            // let endColorNode\n            const colorArray = []\n            const tintArray = []\n            for (let i = 0; i < gsLst.length; i++) {\n              let loTint\n              let loColor\n              if (gsLst[i]['a:srgbClr'] !== undefined) {\n                loColor = getTextByPathList(gsLst[i], ['a:srgbClr', 'attrs', 'val']) // #...\n                loTint = getTextByPathList(gsLst[i], ['a:srgbClr', 'a:tint', 'attrs', 'val'])\n              } else if (gsLst[i]['a:schemeClr'] !== undefined) { // a:schemeClr\n                const schemeClr = getTextByPathList(gsLst[i], ['a:schemeClr', 'attrs', 'val'])\n                loColor = getSchemeColorFromTheme('a:' + schemeClr, slideMasterContent) // #...\n                loTint = getTextByPathList(gsLst[i], ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n                // console.log(\"schemeClr\",schemeClr,slideMasterContent)\n              }\n              // console.log(\"loColor\",loColor)\n              colorArray[i] = loColor\n              tintArray[i] = (loTint !== undefined) ? parseInt(loTint) / 100000 : 1\n            }\n            // console.log(\"colorArray\",colorArray,\"tintArray\",tintArray)\n            // get rot\n            const lin = grdFill['a:lin']\n            let rot = 90\n            if (lin !== undefined) {\n              rot = angleToDegrees(lin['attrs']['ang']) + 90\n            }\n\n            bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n            for (let i = 0; i < gsLst.length; i++) {\n              if (i === gsLst.length - 1) {\n                bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ');'\n              } else {\n                bgcolor += 'rgba(' + hexToRgbNew(colorArray[i]) + ',' + tintArray[i] + ')' + ', '\n              }\n            }\n          } else if (bgFillTyp === 'PIC_FILL') {\n            // console.log(\"bgPr\",bgPr,\"bgFillTyp\",bgFillTyp)\n            const picFillBase64 = getPicFill('masterBg', bgPr['a:blipFill'], warpObj)\n            const ordr = bgPr['attrs']['order']\n            // a:srcRect\n            // a:stretch => a:fillRect =>attrs (l:-17000, r:-17000)\n            bgcolor = 'background-image: url(' + picFillBase64 + ');  z-index: ' + ordr + ';'\n            // console.log(warpObj);\n          }\n        } else if (bgRef !== undefined) {\n          // const obj={\n          //    \"a:solidFill\": bgRef\n          // }\n          // const phClr = getSolidFill(bgRef);\n          let phClr\n          if (bgRef['a:srgbClr'] !== undefined) {\n            phClr = getTextByPathList(bgRef, ['a:srgbClr', 'attrs', 'val']) // #...\n          } else if (bgRef['a:schemeClr'] !== undefined) { // a:schemeClr\n            const schemeClr = getTextByPathList(bgRef, ['a:schemeClr', 'attrs', 'val'])\n\n            phClr = getSchemeColorFromTheme('a:' + schemeClr, slideMasterContent) // #...\n            // console.log(\"phClr\",phClr)\n          }\n          const idx = Number(bgRef['attrs']['idx'])\n          // console.log(\"phClr=\",phClr,\"idx=\",idx)\n\n          if (idx === 0 || idx === 1000) {\n            // no background\n          } else if (idx > 0 && idx < 1000) {\n            // fillStyleLst in themeContent\n            // themeContent[\"a:fmtScheme\"][\"a:fillStyleLst\"]\n            // bgcolor = \"background: red;\";\n          } else if (idx > 1000) {\n            // bgFillStyleLst  in themeContent\n            // themeContent[\"a:fmtScheme\"][\"a:bgFillStyleLst\"]\n            const trueIdx = idx - 1000\n            const bgFillLst = themeContent['a:theme']['a:themeElements']['a:fmtScheme']['a:bgFillStyleLst']\n            const sortblAry = []\n            Object.keys(bgFillLst).forEach(function (key) {\n              // console.log(\"cubicBezTo[\"+key+\"]:\");\n              const bgFillLstTyp = bgFillLst[key]\n              if (key !== 'attrs') {\n                if (bgFillLstTyp.constructor === Array) {\n                  for (let i = 0; i < bgFillLstTyp.length; i++) {\n                    const obj = {}\n                    obj[key] = bgFillLstTyp[i]\n                    obj['idex'] = bgFillLstTyp[i]['attrs']['order']\n                    sortblAry.push(obj)\n                  }\n                } else {\n                  const obj = {}\n                  obj[key] = bgFillLstTyp\n                  obj['idex'] = bgFillLstTyp['attrs']['order']\n                  sortblAry.push(obj)\n                }\n              }\n            })\n            const sortByOrder = sortblAry.slice(0)\n            sortByOrder.sort(function (a, b) {\n              return a.idex - b.idex\n            })\n            const bgFillLstIdx = sortByOrder[trueIdx - 1]\n            const bgFillTyp = getFillType(bgFillLstIdx)\n            // console.log(\"bgFillLstIdx\",bgFillLstIdx);\n            if (bgFillTyp === 'SOLID_FILL') {\n              const sldFill = bgFillLstIdx['a:solidFill']\n              const sldTint = getColorOpacity(sldFill)\n              bgcolor = 'background: rgba(' + hexToRgbNew(phClr) + ',' + sldTint + ');'\n            } else if (bgFillTyp === 'GRADIENT_FILL') {\n              const grdFill = bgFillLstIdx['a:gradFill']\n              const gsLst = grdFill['a:gsLst']['a:gs']\n              // get start color\n              // let startColorNode\n              // let endColorNode\n              const tintArray = []\n              for (let i = 0; i < gsLst.length; i++) {\n                const loTint = getTextByPathList(gsLst[i], ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n                tintArray[i] = (loTint !== undefined) ? parseInt(loTint) / 100000 : 1\n              }\n\n              // get rot\n              const lin = grdFill['a:lin']\n              let rot = 90\n              if (lin !== undefined) {\n                rot = angleToDegrees(lin['attrs']['ang']) + 90\n              }\n              bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n              for (let i = 0; i < gsLst.length; i++) {\n                if (i === gsLst.length - 1) {\n                  bgcolor += 'rgba(' + hexToRgbNew(phClr) + ',' + tintArray[i] + ')' + ');'\n                } else {\n                  bgcolor += 'rgba(' + hexToRgbNew(phClr) + ',' + tintArray[i] + ')' + ', '\n                }\n              }\n            } else {\n              // console.log(bgFillTyp) // TODO\n            }\n          }\n        }\n      }\n    }\n\n    // console.log(\"bgcolor: \",bgcolor)\n    return bgcolor\n  }\n\n  function hexToRgbNew (hex) {\n    const arrBuff = new ArrayBuffer(4)\n    const vw = new DataView(arrBuff)\n    vw.setUint32(0, parseInt(hex, 16), false)\n    const arrByte = new Uint8Array(arrBuff)\n\n    return arrByte[1] + ',' + arrByte[2] + ',' + arrByte[3]\n  }\n\n  function getShapeFill (node, isSvgMode, warpObj) {\n    // 1. presentationML\n    // p:spPr [a:noFill, solidFill, gradFill, blipFill, pattFill, grpFill]\n    // From slide\n    // Fill Type:\n    // console.log(\"ShapeFill: \", node)\n    const fillType = getFillType(getTextByPathList(node, ['p:spPr']))\n    let fillColor\n    if (fillType === 'NO_FILL') {\n      return isSvgMode ? 'none' : 'background-color: initial;'\n    } else if (fillType === 'SOLID_FILL') {\n      const shpFill = node['p:spPr']['a:solidFill']\n      fillColor = getSolidFill(shpFill)\n    } else if (fillType === 'GRADIENT_FILL') {\n      const shpFill = node['p:spPr']['a:gradFill']\n      // fillColor = getSolidFill(shpFill);\n      fillColor = getGradientFill(shpFill)\n      // console.log(\"shpFill\",shpFill,grndColor.color)\n    } else if (fillType === 'PATTERN_FILL') {\n      const shpFill = node['p:spPr']['a:pattFill']\n      fillColor = getPatternFill(shpFill)\n    } else if (fillType === 'PIC_FILL') {\n      const shpFill = node['p:spPr']['a:blipFill']\n      fillColor = getPicFill('slideBg', shpFill, warpObj)\n    }\n\n    // 2. drawingML namespace\n    if (fillColor === undefined) {\n      const clrName = getTextByPathList(node, ['p:style', 'a:fillRef'])\n      fillColor = getSolidFill(clrName)\n    }\n\n    if (fillColor !== undefined) {\n      if (fillType === 'GRADIENT_FILL') {\n        if (isSvgMode) {\n          // console.log(\"GRADIENT_FILL color\", fillColor.color[0])\n          return fillColor\n        } else {\n          const colorAry = fillColor.color\n          const rot = fillColor.rot\n\n          let bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n          for (let i = 0; i < colorAry.length; i++) {\n            if (i === colorAry.length - 1) {\n              bgcolor += colorAry[i] + ');'\n            } else {\n              bgcolor += colorAry[i] + ', '\n            }\n          }\n          return bgcolor\n        }\n      } else if (fillType === 'PIC_FILL') {\n        if (isSvgMode) {\n          return fillColor\n        } else {\n          return 'background-image:url(' + fillColor + ');'\n        }\n      } else {\n        if (isSvgMode) {\n          const color = new colz.Color(fillColor)\n          fillColor = color.rgb.toString()\n\n          return fillColor\n        } else {\n          // console.log(node,\"fillColor: \",fillColor,\"fillType: \",fillType,\"isSvgMode: \",isSvgMode)\n          return 'background-color: #' + fillColor + ';'\n        }\n      }\n    } else {\n      if (isSvgMode) {\n        return 'none'\n      } else {\n        return 'background-color: initial;'\n      }\n    }\n  }\n\n// /////////////////////Amir//////////////////////////////\n  function getFillType (node) {\n    // Need to test/////////////////////////////////////////////\n    // SOLID_FILL\n    // PIC_FILL\n    // GRADIENT_FILL\n    // PATTERN_FILL\n    // NO_FILL\n    let fillType = ''\n    if (node['a:noFill'] !== undefined) {\n      fillType = 'NO_FILL'\n    }\n    if (node['a:solidFill'] !== undefined) {\n      fillType = 'SOLID_FILL'\n    }\n    if (node['a:gradFill'] !== undefined) {\n      fillType = 'GRADIENT_FILL'\n    }\n    if (node['a:pattFill'] !== undefined) {\n      fillType = 'PATTERN_FILL'\n    }\n    if (node['a:blipFill'] !== undefined) {\n      fillType = 'PIC_FILL'\n    }\n\n    return fillType\n  }\n\n  function getGradientFill (node) {\n    const gsLst = node['a:gsLst']['a:gs']\n    // get start color\n    const colorArray = []\n    // const tintArray = []\n    for (let i = 0; i < gsLst.length; i++) {\n      // let loTint\n      let loColor = getSolidFill(gsLst[i])\n      if (gsLst[i]['a:srgbClr'] !== undefined) {\n        let lumMod = parseInt(getTextByPathList(node, ['a:srgbClr', 'a:lumMod', 'attrs', 'val'])) / 100000\n        let lumOff = parseInt(getTextByPathList(node, ['a:srgbClr', 'a:lumOff', 'attrs', 'val'])) / 100000\n        if (isNaN(lumMod)) {\n          lumMod = 1.0\n        }\n        if (isNaN(lumOff)) {\n          lumOff = 0\n        }\n        // console.log([lumMod, lumOff]);\n        loColor = applyLumModify(loColor, lumMod, lumOff)\n      } else if (gsLst[i]['a:schemeClr'] !== undefined) { // a:schemeClr\n        let lumMod = parseInt(getTextByPathList(gsLst[i], ['a:schemeClr', 'a:lumMod', 'attrs', 'val'])) / 100000\n        let lumOff = parseInt(getTextByPathList(gsLst[i], ['a:schemeClr', 'a:lumOff', 'attrs', 'val'])) / 100000\n        if (isNaN(lumMod)) {\n          lumMod = 1.0\n        }\n        if (isNaN(lumOff)) {\n          lumOff = 0\n        }\n        // console.log([lumMod, lumOff]);\n        loColor = applyLumModify(loColor, lumMod, lumOff)\n      }\n      // console.log(\"loColor\",loColor)\n      colorArray[i] = loColor\n    }\n    // get rot\n    const lin = node['a:lin']\n    let rot = 0\n    if (lin !== undefined) {\n      rot = angleToDegrees(lin['attrs']['ang']) + 90\n    }\n    return {\n      'color': colorArray,\n      'rot': rot\n    }\n  }\n\n  function getPicFill (type, node, warpObj) {\n    // Need to test/////////////////////////////////////////////\n    // rId\n    // TODO - Image Properties - Tile, Stretch, or Display Portion of Image\n    // (http://officeopenxml.com/drwPic-tile.php)\n    let img\n    const rId = node['a:blip']['attrs']['r:embed']\n    let imgPath\n    if (type === 'slideBg') {\n      imgPath = getTextByPathList(warpObj, ['slideResObj', rId, 'target'])\n    } else if (type === 'layoutBg') {\n      imgPath = getTextByPathList(warpObj, ['layoutResObj', rId, 'target'])\n    } else if (type === 'masterBg') {\n      imgPath = getTextByPathList(warpObj, ['masterResObj', rId, 'target'])\n    }\n    if (imgPath === undefined) {\n      return undefined\n    }\n    const imgExt = imgPath.split('.').pop()\n    if (imgExt === 'xml') {\n      return undefined\n    }\n    const imgArrayBuffer = warpObj['zip'].file(imgPath).asArrayBuffer()\n    const imgMimeType = getImageMimeType(imgExt)\n    img = 'data:' + imgMimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer)\n    return img\n  }\n\n  function getPatternFill (node) {\n    // Need to test/////////////////////////////////////////////\n    const bgClr = node['a:bgClr']\n    return getSolidFill(bgClr)\n  }\n\n  function getSolidFill (node) {\n    if (node === undefined) {\n      return undefined\n    }\n\n    let color = 'FFF'\n\n    if (node['a:srgbClr'] !== undefined) {\n      color = getTextByPathList(node, ['a:srgbClr', 'attrs', 'val']) // #...\n    } else if (node['a:schemeClr'] !== undefined) { // a:schemeClr\n      const schemeClr = getTextByPathList(node, ['a:schemeClr', 'attrs', 'val'])\n      // console.log(schemeClr)\n      color = getSchemeColorFromTheme('a:' + schemeClr, undefined) // #...\n    } else if (node['a:scrgbClr'] !== undefined) {\n      // <a:scrgbClr r=\"50%\" g=\"50%\" b=\"50%\"/>  //Need to test/////////////////////////////////////////////\n      const defBultColorVals = node['a:scrgbClr']['attrs']\n      const red = (defBultColorVals['r'].indexOf('%') !== -1) ? defBultColorVals['r'].split('%').shift() : defBultColorVals['r']\n      const green = (defBultColorVals['g'].indexOf('%') !== -1) ? defBultColorVals['g'].split('%').shift() : defBultColorVals['g']\n      const blue = (defBultColorVals['b'].indexOf('%') !== -1) ? defBultColorVals['b'].split('%').shift() : defBultColorVals['b']\n      // const scrgbClr = red + ',' + green + ',' + blue\n      color = toHex(255 * (Number(red) / 100)) + toHex(255 * (Number(green) / 100)) + toHex(255 * (Number(blue) / 100))\n      // console.log(\"scrgbClr: \" + scrgbClr);\n    } else if (node['a:prstClr'] !== undefined) {\n      // <a:prstClr val=\"black\"/>  //Need to test/////////////////////////////////////////////\n      const prstClr = node['a:prstClr']['attrs']['val']\n      color = getColorName2Hex(prstClr)\n      // console.log(\"prstClr: \" + prstClr+\" => hexClr: \"+color);\n    } else if (node['a:hslClr'] !== undefined) {\n      // <a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"50%\"/>  //Need to test/////////////////////////////////////////////\n      const defBultColorVals = node['a:hslClr']['attrs']\n      const hue = Number(defBultColorVals['hue']) / 100000\n      const sat = Number((defBultColorVals['sat'].indexOf('%') !== -1) ? defBultColorVals['sat'].split('%').shift() : defBultColorVals['sat']) / 100\n      const lum = Number((defBultColorVals['lum'].indexOf('%') !== -1) ? defBultColorVals['lum'].split('%').shift() : defBultColorVals['lum']) / 100\n      // const hslClr = defBultColorVals['hue'] + ',' + defBultColorVals['sat'] + ',' + defBultColorVals['lum']\n      const hsl2rgb = hslToRgb(hue, sat, lum)\n      color = toHex(hsl2rgb.r) + toHex(hsl2rgb.g) + toHex(hsl2rgb.b)\n      // defBultColor = cnvrtHslColor2Hex(hslClr); //TODO\n      // console.log(\"hslClr: \" + hslClr);\n    } else if (node['a:sysClr'] !== undefined) {\n      // <a:sysClr val=\"windowText\" lastClr=\"000000\"/>  //Need to test/////////////////////////////////////////////\n      const sysClr = getTextByPathList(node, ['a:sysClr', 'attrs', 'lastClr'])\n      if (sysClr !== undefined) {\n        color = sysClr\n      }\n    }\n    return color\n  }\n\n  function toHex (n) {\n    let hex = n.toString(16)\n    while (hex.length < 2) { hex = '0' + hex }\n    return hex\n  }\n\n  function hslToRgb (hue, sat, light) {\n    let t1, t2, r, g, b\n    hue = hue / 60\n    if (light <= 0.5) {\n      t2 = light * (sat + 1)\n    } else {\n      t2 = light + sat - (light * sat)\n    }\n    t1 = light * 2 - t2\n    r = hueToRgb(t1, t2, hue + 2) * 255\n    g = hueToRgb(t1, t2, hue) * 255\n    b = hueToRgb(t1, t2, hue - 2) * 255\n    return {r: r, g: g, b: b}\n  }\n\n  function hueToRgb (t1, t2, hue) {\n    if (hue < 0) hue += 6\n    if (hue >= 6) hue -= 6\n    if (hue < 1) return (t2 - t1) * hue + t1\n    else if (hue < 3) return t2\n    else if (hue < 4) return (t2 - t1) * (4 - hue) + t1\n    else return t1\n  }\n\n  function getColorName2Hex (name) {\n    let hex\n    const colorName = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'RebeccaPurple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen']\n    const colorHex = ['f0f8ff', 'faebd7', '00ffff', '7fffd4', 'f0ffff', 'f5f5dc', 'ffe4c4', '000000', 'ffebcd', '0000ff', '8a2be2', 'a52a2a', 'deb887', '5f9ea0', '7fff00', 'd2691e', 'ff7f50', '6495ed', 'fff8dc', 'dc143c', '00ffff', '00008b', '008b8b', 'b8860b', 'a9a9a9', 'a9a9a9', '006400', 'bdb76b', '8b008b', '556b2f', 'ff8c00', '9932cc', '8b0000', 'e9967a', '8fbc8f', '483d8b', '2f4f4f', '2f4f4f', '00ced1', '9400d3', 'ff1493', '00bfff', '696969', '696969', '1e90ff', 'b22222', 'fffaf0', '228b22', 'ff00ff', 'dcdcdc', 'f8f8ff', 'ffd700', 'daa520', '808080', '808080', '008000', 'adff2f', 'f0fff0', 'ff69b4', 'cd5c5c', '4b0082', 'fffff0', 'f0e68c', 'e6e6fa', 'fff0f5', '7cfc00', 'fffacd', 'add8e6', 'f08080', 'e0ffff', 'fafad2', 'd3d3d3', 'd3d3d3', '90ee90', 'ffb6c1', 'ffa07a', '20b2aa', '87cefa', '778899', '778899', 'b0c4de', 'ffffe0', '00ff00', '32cd32', 'faf0e6', 'ff00ff', '800000', '66cdaa', '0000cd', 'ba55d3', '9370db', '3cb371', '7b68ee', '00fa9a', '48d1cc', 'c71585', '191970', 'f5fffa', 'ffe4e1', 'ffe4b5', 'ffdead', '000080', 'fdf5e6', '808000', '6b8e23', 'ffa500', 'ff4500', 'da70d6', 'eee8aa', '98fb98', 'afeeee', 'db7093', 'ffefd5', 'ffdab9', 'cd853f', 'ffc0cb', 'dda0dd', 'b0e0e6', '800080', '663399', 'ff0000', 'bc8f8f', '4169e1', '8b4513', 'fa8072', 'f4a460', '2e8b57', 'fff5ee', 'a0522d', 'c0c0c0', '87ceeb', '6a5acd', '708090', '708090', 'fffafa', '00ff7f', '4682b4', 'd2b48c', '008080', 'd8bfd8', 'ff6347', '40e0d0', 'ee82ee', 'f5deb3', 'ffffff', 'f5f5f5', 'ffff00', '9acd32']\n    const findIndx = colorName.indexOf(name)\n    if (findIndx !== -1) {\n      hex = colorHex[findIndx]\n    }\n    return hex\n  }\n\n  function getColorOpacity (solidFill) {\n    if (solidFill === undefined) {\n      return undefined\n    }\n    let opcity = 1\n\n    if (solidFill['a:srgbClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:srgbClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    } else if (solidFill['a:schemeClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:schemeClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    } else if (solidFill['a:scrgbClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:scrgbClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    } else if (solidFill['a:prstClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:prstClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    } else if (solidFill['a:hslClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:hslClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    } else if (solidFill['a:sysClr'] !== undefined) {\n      const tint = getTextByPathList(solidFill, ['a:sysClr', 'a:tint', 'attrs', 'val'])\n      if (tint !== undefined) {\n        opcity = parseInt(tint) / 100000\n      }\n    }\n\n    return opcity\n  }\n\n  function getSchemeColorFromTheme (schemeClr, sldMasterNode) {\n    // <p:clrMap ...> in slide master\n    // e.g. tx2=\"dk2\" bg2=\"lt2\" tx1=\"dk1\" bg1=\"lt1\" slideLayoutClrOvride\n\n    if (slideLayoutClrOvride === '' || slideLayoutClrOvride === undefined) {\n      slideLayoutClrOvride = getTextByPathList(sldMasterNode, ['p:sldMaster', 'p:clrMap', 'attrs'])\n    }\n    // console.log(slideLayoutClrOvride);\n    const schmClrName = schemeClr.substr(2)\n    switch (schmClrName) {\n      case 'tx1':\n      case 'tx2':\n      case 'bg1':\n      case 'bg2': {\n        schemeClr = 'a:' + slideLayoutClrOvride[schmClrName]\n        // console.log(schmClrName+ \"=> \"+schemeClr);\n        break\n      }\n    }\n\n    const refNode = getTextByPathList(themeContent, ['a:theme', 'a:themeElements', 'a:clrScheme', schemeClr])\n    let color = getTextByPathList(refNode, ['a:srgbClr', 'attrs', 'val'])\n    if (color === undefined) {\n      color = getTextByPathList(refNode, ['a:sysClr', 'attrs', 'lastClr'])\n    }\n    return color\n  }\n\n  function extractChartData (serNode) {\n    // console.log('PARSING PPTX CHART:', serNode)\n    const dataMat = []\n\n    if (serNode === undefined) {\n      return dataMat\n    }\n\n    if (serNode['c:xVal'] !== undefined) {\n      let dataRow = []\n      eachElement(serNode['c:xVal']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n        dataRow.push(parseFloat(innerNode['c:v']))\n        return ''\n      })\n      dataMat.push(dataRow)\n      dataRow = []\n      eachElement(serNode['c:yVal']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n        dataRow.push(parseFloat(innerNode['c:v']))\n        return ''\n      })\n      dataMat.push(dataRow)\n    } else {\n      eachElement(serNode, function (innerNode, index) {\n        const dataRow = []\n        const colName = getTextByPathList(innerNode, ['c:tx', 'c:strRef', 'c:strCache', 'c:pt', 'c:v']) || index\n\n        // Category (string or number)\n        const rowNames = {}\n        if (getTextByPathList(innerNode, ['c:cat', 'c:strRef', 'c:strCache', 'c:pt']) !== undefined) {\n          eachElement(innerNode['c:cat']['c:strRef']['c:strCache']['c:pt'], function (innerNode, index) {\n            rowNames[innerNode['attrs']['idx']] = innerNode['c:v']\n            return ''\n          })\n        } else if (getTextByPathList(innerNode, ['c:cat', 'c:numRef', 'c:numCache', 'c:pt']) !== undefined) {\n          eachElement(innerNode['c:cat']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n            rowNames[innerNode['attrs']['idx']] = innerNode['c:v']\n            return ''\n          })\n        }\n\n        // Value\n        if (getTextByPathList(innerNode, ['c:val', 'c:numRef', 'c:numCache', 'c:pt']) !== undefined) {\n          eachElement(innerNode['c:val']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n            dataRow.push({x: innerNode['attrs']['idx'], y: parseFloat(innerNode['c:v'])})\n            return ''\n          })\n        }\n\n        dataMat.push({key: colName, values: dataRow, xlabels: rowNames})\n        return ''\n      })\n    }\n\n    return dataMat\n  }\n\n// ===== Node functions =====\n  /**\n   * getTextByPathStr\n   * @param {Object} node\n   * @param {string} pathStr\n   */\n  function getTextByPathStr (node, pathStr) {\n    return getTextByPathList(node, pathStr.trim().split(/\\s+/))\n  }\n\n  /**\n   * getTextByPathList\n   * @param {Object} node\n   * @param {Array.<string>} path\n   */\n  function getTextByPathList (node, path) {\n    if (path.constructor !== Array) {\n      throw Error('Error of path type! path is not array.')\n    }\n\n    if (node === undefined) {\n      return undefined\n    }\n\n    const l = path.length\n    for (let i = 0; i < l; i++) {\n      node = node[path[i]]\n      if (node === undefined) {\n        return undefined\n      }\n    }\n\n    return node\n  }\n\n  /**\n   * eachElement\n   * @param {Object} node\n   * @param {function} doFunction\n   */\n  function eachElement (node, doFunction) {\n    if (node === undefined) {\n      return\n    }\n    let result = ''\n    if (node.constructor === Array) {\n      const l = node.length\n      for (let i = 0; i < l; i++) {\n        result += doFunction(node[i], i)\n      }\n    } else {\n      result += doFunction(node, 0)\n    }\n    return result\n  }\n\n  /*\n// ===== Color functions =====\n/!**\n * applyShade\n * @param {string} rgbStr\n * @param {number} shadeValue\n *!/\nfunction applyShade (rgbStr, shadeValue) {\n  const color = new colz.Color(rgbStr)\n  color.setLum(color.hsl.l * shadeValue)\n  return color.rgb.toString()\n}\n\n/!**\n * applyTint\n * @param {string} rgbStr\n * @param {number} tintValue\n *!/\nfunction applyTint (rgbStr, tintValue) {\n  const color = new colz.Color(rgbStr)\n  color.setLum(color.hsl.l * tintValue + (1 - tintValue))\n  return color.rgb.toString()\n}\n*/\n\n  /**\n   * applyLumModify\n   * @param {string} rgbStr\n   * @param {number} factor\n   * @param {number} offset\n   */\n  function applyLumModify (rgbStr, factor, offset) {\n    const color = new colz.Color(rgbStr)\n    // color.setLum(color.hsl.l * factor);\n    color.setLum(color.hsl.l * (1 + offset))\n    return color.rgb.toString()\n  }\n\n// /////////////////////Amir////////////////\n  function angleToDegrees (angle) {\n    if (angle === '' || angle == null) {\n      return 0\n    }\n    return Math.round(angle / 60000)\n  }\n\n  function getImageMimeType (imgFileExt) {\n    let mimeType = ''\n    // console.log(imgFileExt)\n    switch (imgFileExt.toLowerCase()) {\n      case 'jpg':\n      case 'jpeg': {\n        mimeType = 'image/jpeg'\n        break\n      }\n      case 'png': {\n        mimeType = 'image/png'\n        break\n      }\n      case 'gif': {\n        mimeType = 'image/gif'\n        break\n      }\n      case 'emf': { // Not native support\n        mimeType = 'image/x-emf'\n        break\n      }\n      case 'wmf': { // Not native support\n        mimeType = 'image/x-wmf'\n        break\n      }\n      case 'svg': {\n        mimeType = 'image/svg+xml'\n        break\n      }\n      default: {\n        mimeType = 'image/*'\n      }\n    }\n    return mimeType\n  }\n\n  function getSvgGradient (w, h, angl, colorArray, shpId) {\n    const stopsArray = getMiddleStops(colorArray.length - 2)\n\n    const xyArray = SVGangle(angl, h, w)\n    const x1 = xyArray[0]\n    const y1 = xyArray[1]\n    const x2 = xyArray[2]\n    const y2 = xyArray[3]\n\n    const sal = stopsArray.length\n    const sr = sal < 20 ? 100 : 1000\n    let svgAngle = ' gradientUnits=\"userSpaceOnUse\" x1=\"' + x1 + '%\" y1=\"' + y1 + '%\" x2=\"' + x2 + '%\" y2=\"' + y2 + '%\"'\n    let svg = '<linearGradient id=\"linGrd_' + shpId + '\"' + svgAngle + '>\\n'\n\n    for (let i = 0; i < sal; i++) {\n      svg += '<stop offset=\"' + Math.round(parseFloat(stopsArray[i]) / 100 * sr) / sr + '\" stop-color=\"' + colorArray[i] + '\"'\n      svg += '/>\\n'\n    }\n\n    svg += '</linearGradient>\\n' + ''\n\n    return svg\n  }\n\n  function getMiddleStops (s) {\n    const sArry = ['0%', '100%']\n    if (s === 0) {\n      return true\n    } else {\n      let i = s\n      while (i--) {\n        const middleStop = 100 - ((100 / (s + 1)) * (i + 1)) // AM: Ex - For 3 middle stops, progression will be 25%, 50%, and 75%, plus 0% and 100% at the ends.\n        const middleStopString = middleStop + '%'\n        sArry.splice(-1, 0, middleStopString)\n      } // AM: add into stopsArray before 100%\n    }\n    return sArry\n  }\n\n  function SVGangle (deg, svgHeight, svgWidth) {\n    const w = parseFloat(svgWidth)\n    const h = parseFloat(svgHeight)\n    const ang = parseFloat(deg)\n    let o = 2\n    let n = 2\n    const wc = w / 2\n    const hc = h / 2\n    let tx1 = 2\n    let ty1 = 2\n    let tx2 = 2\n    let ty2 = 2\n    const k = (((ang % 360) + 360) % 360)\n    const j = (360 - k) * Math.PI / 180\n    const i = Math.tan(j)\n    const l = hc - i * wc\n\n    if (k === 0) {\n      tx1 = w\n      ty1 = hc\n      tx2 = 0\n      ty2 = hc\n    } else if (k < 90) {\n      n = w\n      o = 0\n    } else if (k === 90) {\n      tx1 = wc\n      ty1 = 0\n      tx2 = wc\n      ty2 = h\n    } else if (k < 180) {\n      n = 0\n      o = 0\n    } else if (k === 180) {\n      tx1 = 0\n      ty1 = hc\n      tx2 = w\n      ty2 = hc\n    } else if (k < 270) {\n      n = 0\n      o = h\n    } else if (k === 270) {\n      tx1 = wc\n      ty1 = h\n      tx2 = wc\n      ty2 = 0\n    } else {\n      n = w\n      o = h\n    }\n    // AM: I could not quite figure out what m, n, and o are supposed to represent from the original code on visualcsstools.com.\n    const m = o + (n / i)\n    tx1 = tx1 === 2 ? i * (m - l) / (Math.pow(i, 2) + 1) : tx1\n    ty1 = ty1 === 2 ? i * tx1 + l : ty1\n    tx2 = tx2 === 2 ? w - tx1 : tx2\n    ty2 = ty2 === 2 ? h - ty1 : ty2\n    const x1 = Math.round(tx2 / w * 100 * 100) / 100\n    const y1 = Math.round(ty2 / h * 100 * 100) / 100\n    const x2 = Math.round(tx1 / w * 100 * 100) / 100\n    const y2 = Math.round(ty1 / h * 100 * 100) / 100\n    return [x1, y1, x2, y2]\n  }\n\n  function getSvgImagePattern (fillColor, shpId) {\n    let ptrn = '<pattern id=\"imgPtrn_' + shpId + '\"  patternContentUnits=\"objectBoundingBox\"  width=\"1\" height=\"1\">'\n    ptrn += '<image  xlink:href=\"' + fillColor + '\" preserveAspectRatio=\"none\" width=\"1\" height=\"1\"></image>'\n    ptrn += '</pattern>'\n    return ptrn\n  }\n}\n","export default `section {\n  width: 100%;\n  height: 690px;\n  position: relative;\n  border: 1px solid #333;\n  background-color: #EFEFEF;\n  text-align: center;\n  border-radius: 10px;\n  box-shadow: 1px 1px 3px #AAA;\n  overflow: hidden;\n}\n\nsection div.block {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n}\n\nsection div.content {\n  display: flex;\n  flex-direction: column;\n  /*\n  justify-content: center;\n  align-items: flex-end;\n  */\n}\n\nsection div.v-up {\n  justify-content: flex-start;\n}\nsection div.v-mid {\n  justify-content: center;\n}\nsection div.v-down {\n  justify-content: flex-end;\n}\nsection div.h-left {\n  align-items: flex-start;\n  text-align: left;\n}\nsection div.h-mid {\n  align-items: center;\n  text-align: center;\n}\nsection div.h-right {\n  align-items: flex-end;\n  text-align: right;\n}\nsection div.up-left {\n  justify-content: flex-start;\n  align-items: flex-start;\n  text-align: left;\n}\nsection div.up-center {\n  justify-content: flex-start;\n  align-items: center;\n}\nsection div.up-right {\n  justify-content: flex-start;\n  align-items: flex-end;\n}\nsection div.center-left {\n  justify-content: center;\n  align-items: flex-start;\n  text-align: left;\n}\nsection div.center-center {\n  justify-content: center;\n  align-items: center;\n}\nsection div.center-right {\n  justify-content: center;\n  align-items: flex-end;\n}\nsection div.down-left {\n  justify-content: flex-end;\n  align-items: flex-start;\n  text-align: left;\n}\nsection div.down-center {\n  justify-content: flex-end;\n  align-items: center;\n}\nsection div.down-right {\n  justify-content: flex-end;\n  align-items: flex-end;\n}\n\nsection span.text-block {\n  /* display: inline-block; */\n}\n\nli.slide {\n  margin: 10px 0;\n  font-size: 18px;\n}\n\ndiv.footer {\n  text-align: center;\n}\n\nsection table {\n  position: absolute;\n}\n\nsection table, section th, section td {\n  border: 1px solid black;\n}\n\nsection svg.drawing {\n  position: absolute;\n  overflow: visible;\n}`\n","/* global $, dimple */\n'use strict'\n\nimport processPptx from './process_pptx'\nimport pptxStyle from './pptx_css'\n\n/**\n * @param {ArrayBuffer} pptx\n * @param {Element|String} resultElement\n * @param {Element|String} [thumbElement]\n */\nconst renderPptx = (pptx, resultElement, thumbElement) => {\n  const $result = $(resultElement)\n  const $wrapper = $('<div class=\"pptx-wrapper\"></div>')\n  $result.html('')\n  $result.append($wrapper)\n  $wrapper.append(`<style>${pptxStyle}</style>`)\n  let isDone = false\n\n  return new Promise((resolve, reject) => {\n    const processMessage = (msg) => {\n      if (isDone) return\n      switch (msg.type) {\n        case 'slide':\n          $wrapper.append(msg.data)\n          break\n        case 'pptx-thumb':\n          if (thumbElement) $(thumbElement).attr('src', `data:image/jpeg;base64,${msg.data}`)\n          break\n        case 'slideSize':\n          break\n        case 'globalCSS':\n          $wrapper.append(`<style>${msg.data}</style>`)\n          break\n        case 'Done':\n          isDone = true\n          processCharts(msg.data.charts)\n          resolve(msg.data.time)\n          break\n        case 'WARN':\n          console.warn('PPTX processing warning: ', msg.data)\n          break\n        case 'ERROR':\n          isDone = true\n          console.error('PPTX processing error: ', msg.data)\n          reject(new Error(msg.data))\n          break\n        case 'DEBUG':\n          // console.debug('Worker: ', msg.data);\n          break\n        case 'INFO':\n        default:\n        // console.info('Worker: ', msg.data);\n      }\n    }\n    /*\n    // Actual Web Worker - If you want to use this, switching worker's url to Blob is probably better\n    const worker = new Worker('./dist/worker.js')\n    worker.addEventListener('message', event => processMessage(event.data), false)\n    const stopWorker = setInterval(() => { // Maybe this should be done in the message processing\n      if (isDone) {\n        worker.terminate()\n        // console.log(\"worker terminated\");\n        clearInterval(stopWorker)\n      }\n    }, 500)\n    */\n    const worker = { // shim worker\n      postMessage: () => {},\n      terminate: () => {}\n    }\n    processPptx(\n      func => { worker.postMessage = func },\n      processMessage\n    )\n    worker.postMessage({\n      'type': 'processPPTX',\n      'data': pptx\n    })\n  }).then(time => {\n    const resize = () => {\n      const slidesWidth = Math.max(...Array.from($wrapper.children('section')).map(s => s.offsetWidth))\n      const wrapperWidth = $wrapper[0].offsetWidth\n      $wrapper.css({\n        'transform': `scale(${wrapperWidth / slidesWidth})`,\n        'transform-origin': 'top left'\n      })\n    }\n    resize()\n    window.addEventListener('resize', resize)\n    setNumericBullets($('.block'))\n    setNumericBullets($('table td'))\n    return time\n  })\n}\n\nexport default renderPptx\n\nfunction processCharts (queue) {\n  for (let i = 0; i < queue.length; i++) {\n    processSingleChart(queue[i].data)\n  }\n}\n\nfunction convertChartData (chartData) {\n  const data = []\n  const xLabels = []\n  const groupLabels = []\n  chartData.forEach((group, i) => {\n    const groupName = group.key\n    groupLabels[i] = group.key\n    group.values.forEach((value, j) => {\n      const labelName = group.xlabels[j]\n      xLabels[j] = group.xlabels[j]\n      data.push({name: labelName, group: groupName, value: value.y})\n    })\n  })\n  // console.log('TRANSFORMED DATA:', (data))\n  return {data, xLabels, groupLabels}\n}\n\nfunction processSingleChart (d) {\n  const chartID = d.chartID\n  const chartType = d.chartType\n  const chartData = d.chartData\n  // console.log(`WRITING GRAPH OF TYPE ${chartType} TO ID #${chartID}:`, chartData)\n\n  let data = []\n\n  switch (chartType) {\n    case 'lineChart': {\n      const {data: data_, xLabels, groupLabels} = convertChartData(chartData)\n      data = data_\n      const container = document.getElementById(chartID)\n      const svg = dimple.newSvg(`#${chartID}`, container.style.width, container.style.height)\n\n      // eslint-disable-next-line new-cap\n      const myChart = new dimple.chart(svg, data)\n      const xAxis = myChart.addCategoryAxis('x', 'name')\n      xAxis.addOrderRule(xLabels)\n      xAxis.addGroupOrderRule(groupLabels)\n      xAxis.title = null\n      const yAxis = myChart.addMeasureAxis('y', 'value')\n      yAxis.title = null\n      myChart.addSeries('group', dimple.plot.line)\n      myChart.addLegend(60, 10, 500, 20, 'right')\n      myChart.draw()\n\n      break\n    }\n    case 'barChart': {\n      const {data: data_, xLabels, groupLabels} = convertChartData(chartData)\n      data = data_\n      const container = document.getElementById(chartID)\n      const svg = dimple.newSvg('#' + chartID, container.style.width, container.style.height)\n\n      // eslint-disable-next-line new-cap\n      const myChart = new dimple.chart(svg, data)\n      const xAxis = myChart.addCategoryAxis('x', ['name', 'group'])\n      xAxis.addOrderRule(xLabels)\n      xAxis.addGroupOrderRule(groupLabels)\n      xAxis.title = null\n      const yAxis = myChart.addMeasureAxis('y', 'value')\n      yAxis.title = null\n      myChart.addSeries('group', dimple.plot.bar)\n      myChart.addLegend(60, 10, 500, 20, 'right')\n      myChart.draw()\n      break\n    }\n    case 'pieChart':\n    case 'pie3DChart': {\n      // data = chartData[0].values\n      // chart = nv.models.pieChart()\n      // nvDraw(chart, data)\n      const {data: data_, groupLabels} = convertChartData(chartData)\n      data = data_\n      const container = document.getElementById(chartID)\n      const svg = dimple.newSvg(`#${chartID}`, container.style.width, container.style.height)\n\n      // eslint-disable-next-line new-cap\n      const myChart = new dimple.chart(svg, data)\n      const pieAxis = myChart.addMeasureAxis('p', 'value')\n      pieAxis.addOrderRule(groupLabels)\n      myChart.addSeries('name', dimple.plot.pie)\n      myChart.addLegend(50, 20, 400, 300, 'left')\n      myChart.draw()\n      break\n    }\n    case 'areaChart': {\n      const {data: data_, xLabels, groupLabels} = convertChartData(chartData)\n      data = data_\n      const container = document.getElementById(chartID)\n      const svg = dimple.newSvg('#' + chartID, container.style.width, container.style.height)\n\n      // eslint-disable-next-line new-cap\n      const myChart = new dimple.chart(svg, data)\n      const xAxis = myChart.addCategoryAxis('x', 'name')\n      xAxis.addOrderRule(xLabels)\n      xAxis.addGroupOrderRule(groupLabels)\n      xAxis.title = null\n      const yAxis = myChart.addMeasureAxis('y', 'value')\n      yAxis.title = null\n      myChart.addSeries('group', dimple.plot.area)\n      myChart.addLegend(60, 10, 500, 20, 'right')\n      myChart.draw()\n\n      break\n    }\n    case 'scatterChart': {\n      for (let i = 0; i < chartData.length; i++) {\n        const arr = []\n        for (let j = 0; j < chartData[i].length; j++) {\n          arr.push({x: j, y: chartData[i][j]})\n        }\n        data.push({key: 'data' + (i + 1), values: arr})\n      }\n\n      // data = chartData;\n      // chart = nv.models.scatterChart()\n      //   .showDistX(true)\n      //   .showDistY(true)\n      //   .color(d3.scale.category10().range())\n      // chart.xAxis.axisLabel('X').tickFormat(d3.format('.02f'))\n      // chart.yAxis.axisLabel('Y').tickFormat(d3.format('.02f'))\n      // nvDraw(chart, data)\n      break\n    }\n    default:\n  }\n}\n\nfunction setNumericBullets (elem) {\n  const paragraphsArray = elem\n  for (let i = 0; i < paragraphsArray.length; i++) {\n    const buSpan = $(paragraphsArray[i]).find('.numeric-bullet-style')\n    if (buSpan.length > 0) {\n      // console.log(\"DIV-\"+i+\":\");\n      let prevBultTyp = ''\n      let prevBultLvl = ''\n      let buletIndex = 0\n      const tmpArry = []\n      let tmpArryIndx = 0\n      const buletTypSrry = []\n      for (let j = 0; j < buSpan.length; j++) {\n        const bulletType = $(buSpan[j]).data('bulltname')\n        const bulletLvl = $(buSpan[j]).data('bulltlvl')\n        // console.log(j+\" - \"+bult_typ+\" lvl: \"+bult_lvl );\n        if (buletIndex === 0) {\n          prevBultTyp = bulletType\n          prevBultLvl = bulletLvl\n          tmpArry[tmpArryIndx] = buletIndex\n          buletTypSrry[tmpArryIndx] = bulletType\n          buletIndex++\n        } else {\n          if (bulletType === prevBultTyp && bulletLvl === prevBultLvl) {\n            prevBultTyp = bulletType\n            prevBultLvl = bulletLvl\n            buletIndex++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bulletType\n          } else if (bulletType !== prevBultTyp && bulletLvl === prevBultLvl) {\n            prevBultTyp = bulletType\n            prevBultLvl = bulletLvl\n            tmpArryIndx++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bulletType\n            buletIndex = 1\n          } else if (bulletType !== prevBultTyp && Number(bulletLvl) > Number(prevBultLvl)) {\n            prevBultTyp = bulletType\n            prevBultLvl = bulletLvl\n            tmpArryIndx++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bulletType\n            buletIndex = 1\n          } else if (bulletType !== prevBultTyp && Number(bulletLvl) < Number(prevBultLvl)) {\n            prevBultTyp = bulletType\n            prevBultLvl = bulletLvl\n            tmpArryIndx--\n            buletIndex = tmpArry[tmpArryIndx] + 1\n          }\n        }\n        // console.log(buletTypSrry[tmpArryIndx]+\" - \"+buletIndex);\n        const numIdx = getNumTypeNum(buletTypSrry[tmpArryIndx], buletIndex)\n        $(buSpan[j]).html(numIdx)\n      }\n    }\n  }\n}\n\nfunction getNumTypeNum (numTyp, num) {\n  let rtrnNum = ''\n  switch (numTyp) {\n    case 'arabicPeriod':\n      rtrnNum = num + '. '\n      break\n    case 'arabicParenR':\n      rtrnNum = num + ') '\n      break\n    case 'alphaLcParenR':\n      rtrnNum = alphaNumeric(num, 'lowerCase') + ') '\n      break\n    case 'alphaLcPeriod':\n      rtrnNum = alphaNumeric(num, 'lowerCase') + '. '\n      break\n\n    case 'alphaUcParenR':\n      rtrnNum = alphaNumeric(num, 'upperCase') + ') '\n      break\n    case 'alphaUcPeriod':\n      rtrnNum = alphaNumeric(num, 'upperCase') + '. '\n      break\n\n    case 'romanUcPeriod':\n      rtrnNum = romanize(num) + '. '\n      break\n    case 'romanLcParenR':\n      rtrnNum = romanize(num) + ') '\n      break\n    case 'hebrew2Minus':\n      rtrnNum = hebrew2Minus.format(num) + '-'\n      break\n    default:\n      rtrnNum = num\n  }\n  return rtrnNum\n}\n\nfunction romanize (num) {\n  if (!+num) return false\n  const digits = String(+num).split('')\n  const key = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM',\n    '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC',\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n  let roman = ''\n  let i = 3\n  while (i--) roman = (key[+digits.pop() + (i * 10)] || '') + roman\n  return (new Array(+digits.join('') + 1)).join('M') + roman\n}\n\nconst hebrew2Minus = archaicNumbers([\n  [1000, ''],\n  [400, 'ת'],\n  [300, 'ש'],\n  [200, 'ר'],\n  [100, 'ק'],\n  [90, 'צ'],\n  [80, 'פ'],\n  [70, 'ע'],\n  [60, 'ס'],\n  [50, 'נ'],\n  [40, 'מ'],\n  [30, 'ל'],\n  [20, 'כ'],\n  [10, 'י'],\n  [9, 'ט'],\n  [8, 'ח'],\n  [7, 'ז'],\n  [6, 'ו'],\n  [5, 'ה'],\n  [4, 'ד'],\n  [3, 'ג'],\n  [2, 'ב'],\n  [1, 'א'],\n  [/יה/, 'ט״ו'],\n  [/יו/, 'ט״ז'],\n  [/([א-ת])([א-ת])$/, '$1״$2'],\n  [/^([א-ת])$/, '$1׳']\n])\n\nfunction archaicNumbers (arr) {\n  // const arrParse = arr.slice().sort(function (a, b) { return b[1].length - a[1].length })\n  return {\n    format: function (n) {\n      let ret = ''\n      $.each(arr, function () {\n        const num = this[0]\n        if (parseInt(num) > 0) {\n          for (; n >= num; n -= num) ret += this[1]\n        } else {\n          ret = ret.replace(num, this[1])\n        }\n      })\n      return ret\n    }\n  }\n}\n\nfunction alphaNumeric (num, upperLower) {\n  num = Number(num) - 1\n  let aNum = ''\n  if (upperLower === 'upperCase') {\n    aNum = (((num / 26 >= 1) ? String.fromCharCode(num / 26 + 64) : '') + String.fromCharCode(num % 26 + 65)).toUpperCase()\n  } else if (upperLower === 'lowerCase') {\n    aNum = (((num / 26 >= 1) ? String.fromCharCode(num / 26 + 64) : '') + String.fromCharCode(num % 26 + 65)).toLowerCase()\n  }\n  return aNum\n}\n"],"names":["isObject","require$$0","document","require$$1","require$$2","anObject","toPrimitive","IE8_DOM_DEFINE","dP","createDesc","has","hide","global","uid","wks","defined","fails","redefine","cof","aFunction","core","ctx","toInteger","isArray","speciesConstructor","asc","toObject","IObject","toLength","$export","ArrayProto","Iterators","$defineProperty","ITERATOR","classof","getIterFn","isArrayIter","createProperty","call","SPECIES","process","invoke","cel","html","Promise","isNode","newPromiseCapability","TAG","DESCRIPTORS","TypeError","newPromiseCapabilityModule","perform","anInstance","require$$3","require$$4","require$$5","require$$6","LIBRARY","promiseResolve","require$$7","forOf","min","toIObject","toAbsoluteIndex","shared","$keys","toIndex","$typed","arrayFill","redefineAll","setToStringTag","pIE","wksExt","enumBugKeys","getKeys","gOPS","IE_PROTO","PROTOTYPE","dPs","gOPN","toString","gOPD","$GOPD","$DP","gOPNExt","USE_NATIVE","$fails","_create","enumKeys","create","wksDefine","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","runtime","regeneratorRuntime","exports","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","AsyncIterator","resolve","reject","record","type","result","value","rollupPluginBabelHelpers.typeof","__await","then","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","async","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","info","resultName","nextLoc","pushTryEntry","locs","entry","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","key","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","tryLoc","hasCatch","hasFinally","finallyEntry","complete","thrown","Function","ObjectProto","descriptor","$iterCreate","step","addToUnscopables","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","require$$35","require$$36","require$$37","require$$38","_order","tXml","S","openBracket","openBracketCC","charCodeAt","closeBracket","closeBracketCC","minusCC","slashCC","exclamationCC","singleQuoteCC","doubleQuoteCC","questionMarkCC","nameSpacer","pos","parseChildren","children","indexOf","startNamePos","nodeTagName","attrFound","nodeAttributes","c","code","startChar","startStringPos","nodeChildren","startTextPos","text","trim","simplefy","node","String","child","tagName","kids","attrs","round","Math","Rgb","col","r","g","b","Rgba","a","Hsl","h","s","l","Hsla","Color","str","hexToRgb","Array","rgb","rgba","hex","rgbToHex","hsl","rgbToHsl","hsla","newHue","updateFromHsl","newSat","newLum","newAlpha","hslToRgb","exec","parseInt","componentToHex","d","max","hue2rgb","p","q","t","ColorScheme","colorVal","angleArray","palette","createFromColors","createFromAngles","tempHue","base64ArrayBuffer","arrayBuff","buff","Uint8Array","byteLength","fromCharCode","btoa","extractFileExtension","filename","dot","lastIndexOf","substr","processPptx","data","JSZip","loadAsync","Date","zip","file","pptxThumbImg","getContentTypes","getSlideSize","loadTheme","readXmlFile","slideSize","filesInfo","numOfSlides","processSingleSlide","slideHtml","genGlobalCSS","dateAfter","dateBefore","processPPTX","ContentTypesJson","subObj","slidesLocArray","slideLayoutsLocArray","content","sldSzAttrs","preResContent","relationshipArray","themeURI","sldFileName","index","replace","resName","resContent","RelationshipArray","layoutFilename","indexNodes","slideLayoutContent","sldLayoutClrOvr","slideLayoutResFilename","slideLayoutResContent","masterFilename","getTextByPathList","slideMasterContent","slideMasterResFilename","slideMasterResContent","themeFilename","slideContent","slideLayoutTables","slideMasterTables","slideResObj","slideMasterTextStyles","layoutResObj","masterResObj","getSlideBackgroundFill","warpObj","width","height","bgColor","nodes","nodeKey","processNodesInSlide","nodeValue","processSpNode","processCxnSpNode","processPicNode","processGraphicFrameNode","processGroupSpNode","xfrmNode","factor","order","y","chy","x","chx","cx","chcx","cy","chcy","graphicTypeUri","genTable","genChart","genDiagram","chartID","getPosition","getSize","rid","refName","plotArea","extractChartData","chartData","setOnMessage","postMessage","charts","themeContent","slideLayoutClrOvride","styleTable","tableStyles","e","error","spTreeNode","idTable","idxTable","typeTable","targetNode","nvSpPrNode","id","idx","slideLayoutSpNode","slideMasterSpNode","genShape","xfrmList","slideXfrmNode","slideLayoutXfrmNode","slideMasterXfrmNode","shpId","shapType","custShapType","isFlipV","rotate","angleToDegrees","w","border","headEndNodeAttrs","tailEndNodeAttrs","fillColor","grndFillFlg","imgFillFlg","ext","getShapeFill","clrFillType","getFillType","colorArray","color","angl","rot","svgGrdnt","getSvgGradient","svgBgImg","getSvgImagePattern","getBorder","triangleMarker","strokeDasharray","shapAdjst","shapAdjstVal","adjstVal","maxAdjConst","adjst","shapAdjstArray","adj1","adj2","sAdj1","sAdj1Val","sAdj2","sAdj2Val","maxSAdj2Const","sAdjName","sAdj2Val2","warn","getVerticalAlign","genTextBody","pathLstNode","closeNode","startPoint","spX","spY","pathNodes","lnToNodes","cubicBezToNodes","sortblAry","lnToPtNode","key2","ptObj","lnToNoPt","ptX","ptY","ptOrdr","cubicBezToPtNodes","cubBzPts","key3","cubBzPt","sortByOrder","sort","k","Lx","Ly","Cx1","Cy1","Cx2","Cy2","Cx3","Cy3","imgName","imgFileExt","toLowerCase","imgArrayBuffer","asArrayBuffer","mimeType","getImageMimeType","textBodyNode","pNode","rNode","getHorizontalAlign","genBuChar","genSpanElement","j","sldMstrTxtStyles","dfltBultColor","dfltBultSize","bultColor","bultSize","getFontColor","getFontSize","bullet","pPrNode","getRtlVal","isRTL","lvl","buChar","buType","buNum","buPic","buFontAttrs","defBultColor","buClrNode","getSolidFill","buFontSize","prcnt","dfltBultSizeNoPt","marginLeft","marginRight","typeface","buPicId","buImg","imgPath","imgExt","split","imgMimeType","styleText","getFontType","getFontBold","getFontItalic","getFontDecoration","getTextHorizontalAlign","getTextVerticalAlign","highlight","getColorOpacity","cssName","linkID","linkURL","cssText","tableNode","getTblPr","getColsGrid","tblDir","firstRowAttr","bandRowAttr","tableHtml","trNodes","rowHeightParam","rowHeight","rowsStyl","thisTblStyle","tbleStyleId","tbleStylList","colorOpacity","bgFillschemeClr","borderStyl","rowBorders","getTableBorders","rowTxtStyl","tcNodes","rowSpan","colSpan","vMerge","hMerge","colWidthParam","colStyl","colWidth","getFill","slideSpNode","off","algn","anchor","fontSchemeNode","solidFillNode","getTextByPathStr","fontSize","sz","baseline","underLine","strikethrough","getAlgn","align","borderStyle","borders","isSvgMode","lineNode","borderWidth","borderType","borderColor","schemeClrNode","schemeClr","getSchemeColorFromTheme","shade","colz","setLum","bgPr","bgRef","bgcolor","bgFillTyp","sldFill","sldTint","hexToRgbNew","grdFill","gsLst","tintArray","loTint","loColor","lin","picFillBase64","getPicFill","ordr","phClr","Number","trueIdx","bgFillLst","bgFillLstTyp","idex","bgFillLstIdx","arrBuff","ArrayBuffer","vw","DataView","setUint32","arrByte","fillType","shpFill","getGradientFill","getPatternFill","clrName","colorAry","lumMod","lumOff","applyLumModify","img","rId","bgClr","defBultColorVals","red","shift","green","blue","toHex","prstClr","getColorName2Hex","hue","sat","lum","hsl2rgb","sysClr","n","light","t1","t2","hueToRgb","colorName","colorHex","findIndx","solidFill","opcity","tint","sldMasterNode","schmClrName","refNode","serNode","dataMat","dataRow","innerNode","parseFloat","colName","rowNames","pathStr","path","eachElement","doFunction","rgbStr","offset","angle","stopsArray","getMiddleStops","xyArray","SVGangle","x1","y1","x2","y2","sal","sr","svgAngle","svg","sArry","middleStop","middleStopString","splice","deg","svgHeight","svgWidth","ang","o","wc","hc","tx1","ty1","tx2","ty2","PI","tan","m","pow","ptrn","renderPptx","pptx","resultElement","thumbElement","$result","$","$wrapper","append","pptxStyle","isDone","processMessage","msg","attr","time","worker","func","resize","slidesWidth","from","map","offsetWidth","wrapperWidth","css","addEventListener","processCharts","queue","convertChartData","xLabels","groupLabels","group","groupName","labelName","xlabels","processSingleChart","chartType","data_","container","getElementById","dimple","newSvg","style","myChart","chart","xAxis","addCategoryAxis","addOrderRule","addGroupOrderRule","title","yAxis","addMeasureAxis","addSeries","plot","line","addLegend","draw","bar","pieAxis","pie","area","arr","setNumericBullets","elem","paragraphsArray","buSpan","find","prevBultTyp","prevBultLvl","buletIndex","tmpArry","tmpArryIndx","buletTypSrry","bulletType","bulletLvl","numIdx","getNumTypeNum","numTyp","num","rtrnNum","alphaNumeric","romanize","hebrew2Minus","format","digits","roman","join","archaicNumbers","ret","each","upperLower","aNum","toUpperCase"],"mappings":";;;AAAA,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,OAAO,EAAE,KAAK,QAAQ,GAAG,EAAE,KAAK,IAAI,GAAG,OAAO,EAAE,KAAK,UAAU,CAAC;CACxE;;ACDD,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,CAACA,SAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,SAAS,CAAC,EAAE,GAAG,oBAAoB,CAAC,CAAC;EAC9D,OAAO,EAAE,CAAC;CACX;;ACJD,UAAc,GAAG,UAAU,IAAI,EAAE;EAC/B,IAAI;IACF,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;GACjB,CAAC,OAAO,CAAC,EAAE;IACV,OAAO,IAAI,CAAC;GACb;CACF;;ACND;AACA,gBAAc,GAAG,CAACC,MAAmB,CAAC,YAAY;EAChD,OAAO,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;CAClF,CAAC;;;;;;;;ACFF,IAAI,MAAM,GAAG,cAAc,GAAG,OAAO,MAAM,IAAI,WAAW,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI;IAC7E,MAAM,GAAG,OAAO,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI;;IAE/D,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;AAC9B,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,GAAG,GAAG,MAAM,CAAC;;;ACJzC,IAAIC,UAAQ,GAAGD,OAAoB,CAAC,QAAQ,CAAC;;AAE7C,IAAI,EAAE,GAAGD,SAAQ,CAACE,UAAQ,CAAC,IAAIF,SAAQ,CAACE,UAAQ,CAAC,aAAa,CAAC,CAAC;AAChE,cAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,EAAE,GAAGA,UAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;CAC7C;;ACND,iBAAc,GAAG,CAACD,YAAyB,IAAI,CAACE,MAAmB,CAAC,YAAY;EAC9E,OAAO,MAAM,CAAC,cAAc,CAACC,UAAwB,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;CAC/G,CAAC;;ACFF;;;;AAIA,gBAAc,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;EAChC,IAAI,CAACJ,SAAQ,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC;EAC7B,IAAI,EAAE,EAAE,GAAG,CAAC;EACZ,IAAI,CAAC,IAAI,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,UAAU,IAAI,CAACA,SAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC;EAC7F,IAAI,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,UAAU,IAAI,CAACA,SAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC;EACvF,IAAI,CAAC,CAAC,IAAI,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,UAAU,IAAI,CAACA,SAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC;EAC9F,MAAM,SAAS,CAAC,yCAAyC,CAAC,CAAC;CAC5D;;ACRD,IAAI,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC;;AAE/B,KAAS,GAAGC,YAAyB,GAAG,MAAM,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE;EACxGI,SAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,GAAGC,YAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;EACzBD,SAAQ,CAAC,UAAU,CAAC,CAAC;EACrB,IAAIE,aAAc,EAAE,IAAI;IACtB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;GAC7B,CAAC,OAAO,CAAC,EAAE,eAAe;EAC3B,IAAI,KAAK,IAAI,UAAU,IAAI,KAAK,IAAI,UAAU,EAAE,MAAM,SAAS,CAAC,0BAA0B,CAAC,CAAC;EAC5F,IAAI,OAAO,IAAI,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;EACnD,OAAO,CAAC,CAAC;CACV,CAAC;;;;;;ACfF,iBAAc,GAAG,UAAU,MAAM,EAAE,KAAK,EAAE;EACxC,OAAO;IACL,UAAU,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;IACzB,YAAY,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;IAC3B,QAAQ,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;IACvB,KAAK,EAAE,KAAK;GACb,CAAC;CACH;;ACLD,SAAc,GAAGN,YAAyB,GAAG,UAAU,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE;EACzE,OAAOO,SAAE,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,EAAEC,aAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;CAChD,GAAG,UAAU,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE;EAChC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;EACpB,OAAO,MAAM,CAAC;CACf;;ACPD,IAAI,cAAc,GAAG,EAAE,CAAC,cAAc,CAAC;AACvC,QAAc,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE;EAClC,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;CACrC;;ACHD,IAAI,EAAE,GAAG,CAAC,CAAC;AACX,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AACvB,QAAc,GAAG,UAAU,GAAG,EAAE;EAC9B,OAAO,SAAS,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;CACvF;;;ACJD,IAAI,IAAI,GAAG,cAAc,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACjD,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,GAAG,GAAG,IAAI,CAAC;;;;ACEvC,IAAI,GAAG,GAAGR,IAAiB,CAAC,KAAK,CAAC,CAAC;AACnC,IAAI,SAAS,GAAG,UAAU,CAAC;AAC3B,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;AACpC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;;AAE5CE,KAAkB,CAAC,aAAa,GAAG,UAAU,EAAE,EAAE;EAC/C,OAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAC3B,CAAC;;AAEF,CAAC,cAAc,GAAG,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;EAC7C,IAAI,UAAU,GAAG,OAAO,GAAG,IAAI,UAAU,CAAC;EAC1C,IAAI,UAAU,EAAEO,IAAG,CAAC,GAAG,EAAE,MAAM,CAAC,IAAIC,KAAI,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;EAC3D,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,OAAO;EAC3B,IAAI,UAAU,EAAED,IAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAIC,KAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9F,IAAI,CAAC,KAAKC,OAAM,EAAE;IAChB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;GACd,MAAM,IAAI,CAAC,IAAI,EAAE;IAChB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IACdD,KAAI,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;GACnB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;IACjB,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;GACd,MAAM;IACLA,KAAI,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;GACnB;;CAEF,EAAE,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,QAAQ,GAAG;EACpD,OAAO,OAAO,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACvE,CAAC,CAAC;;;AC9BH;AACA,YAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,EAAE,IAAI,SAAS,EAAE,MAAM,SAAS,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC;EACpE,OAAO,EAAE,CAAC;CACX;;ACHD,IAAI,MAAM,GAAG,oBAAoB,CAAC;AAClC,IAAI,KAAK,GAAGC,OAAM,CAAC,MAAM,CAAC,KAAKA,OAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;AACpD,WAAc,GAAG,UAAU,GAAG,EAAE;EAC9B,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;CACxC;;;ACLD,IAAI,KAAK,GAAGX,OAAoB,CAAC,KAAK,CAAC,CAAC;;AAExC,IAAI,MAAM,GAAGE,OAAoB,CAAC,MAAM,CAAC;AACzC,IAAI,UAAU,GAAG,OAAO,MAAM,IAAI,UAAU,CAAC;;AAE7C,IAAI,QAAQ,GAAG,cAAc,GAAG,UAAU,IAAI,EAAE;EAC9C,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC;IAChC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,MAAM,GAAGU,IAAG,EAAE,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;CAChF,CAAC;;AAEF,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;;;ACVvB,YAAY,CAAC;;;;;;;AAOb,aAAc,GAAG,UAAU,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;EAC5C,IAAI,MAAM,GAAGC,IAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,GAAG,GAAG,IAAI,CAACC,QAAO,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EACzC,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAIC,MAAK,CAAC,YAAY;IACpB,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,CAAC,CAAC,MAAM,CAAC,GAAG,YAAY,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC;IACtC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;GACxB,CAAC,EAAE;IACFC,SAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACvCN,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;;;QAGtC,UAAU,MAAM,EAAE,GAAG,EAAE,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE;;;QAG/D,UAAU,MAAM,EAAE,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE;KACxD,CAAC;GACH;CACF;;AC3BD;AACAV,SAAwB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;;EAE3E,OAAO,CAAC,SAAS,OAAO,CAAC,WAAW,EAAE,YAAY,EAAE;IAClD,YAAY,CAAC;IACb,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IACtB,IAAI,EAAE,GAAG,WAAW,IAAI,SAAS,GAAG,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IACrE,OAAO,EAAE,KAAK,SAAS;QACnB,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,YAAY,CAAC;QACrC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;GACzD,EAAE,QAAQ,CAAC,CAAC;CACd,CAAC,CAAC;;ACXH,IAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;;AAE3B,QAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;CACvC;;ACJD;;;AAGA,IAAI,KAAK,GAAGA,IAAiB,CAAC,OAAO,CAAC,CAAC;AACvC,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,QAAQ,CAAC;EACb,OAAOD,SAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,SAAS,GAAG,CAAC,CAAC,QAAQ,GAAGkB,IAAG,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC;CAClG;;ACPD;AACAjB,SAAwB,CAAC,OAAO,EAAE,CAAC,EAAE,UAAU,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE;EACrE,YAAY,CAAC;EACb,IAAI,QAAQ,GAAGE,SAAuB,CAAC;EACvC,IAAI,MAAM,GAAG,MAAM,CAAC;EACpB,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC;EACpB,IAAI,MAAM,GAAG,OAAO,CAAC;EACrB,IAAI,MAAM,GAAG,QAAQ,CAAC;EACtB,IAAI,UAAU,GAAG,WAAW,CAAC;EAC7B;IACE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;IAChC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IACpC,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IACpC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;IAC/B,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IACxB;IACA,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;;IAE5C,MAAM,GAAG,UAAU,SAAS,EAAE,KAAK,EAAE;MACnC,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;MAC1B,IAAI,SAAS,KAAK,SAAS,IAAI,KAAK,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC;;MAEtD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;MACvE,IAAI,MAAM,GAAG,EAAE,CAAC;MAChB,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,UAAU,GAAG,GAAG,GAAG,EAAE;mBAC/B,SAAS,CAAC,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC;mBAC/B,SAAS,CAAC,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC;mBAC7B,SAAS,CAAC,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;MAC1C,IAAI,aAAa,GAAG,CAAC,CAAC;MACtB,IAAI,UAAU,GAAG,KAAK,KAAK,SAAS,GAAG,UAAU,GAAG,KAAK,KAAK,CAAC,CAAC;;MAEhE,IAAI,aAAa,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,GAAG,GAAG,CAAC,CAAC;MAC9D,IAAI,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;;MAEhD,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,GAAG,UAAU,EAAE,KAAK,CAAC,CAAC;MACnF,OAAO,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;;QAEzC,SAAS,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,SAAS,GAAG,aAAa,EAAE;UAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;;UAGtD,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY;YACvE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;WAClG,CAAC,CAAC;UACH,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3F,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;UAC9B,aAAa,GAAG,SAAS,CAAC;UAC1B,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,UAAU,EAAE,MAAM;SACzC;QACD,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC;OAC5E;MACD,IAAI,aAAa,KAAK,MAAM,CAAC,MAAM,CAAC,EAAE;QACpC,IAAI,UAAU,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;OAC5D,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;MAChD,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,MAAM,CAAC;KAC3E,CAAC;;GAEH,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;IAC5C,MAAM,GAAG,UAAU,SAAS,EAAE,KAAK,EAAE;MACnC,OAAO,SAAS,KAAK,SAAS,IAAI,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;KAC1F,CAAC;GACH;;EAED,OAAO,CAAC,SAAS,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE;IACvC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IACtB,IAAI,EAAE,GAAG,SAAS,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAC/D,OAAO,EAAE,KAAK,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;GACnG,EAAE,MAAM,CAAC,CAAC;CACZ,CAAC,CAAC;;ACtEH,cAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,OAAO,EAAE,IAAI,UAAU,EAAE,MAAM,SAAS,CAAC,EAAE,GAAG,qBAAqB,CAAC,CAAC;EACzE,OAAO,EAAE,CAAC;CACX;;ACHD;;AAEA,QAAc,GAAG,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;EAC3CgB,UAAS,CAAC,EAAE,CAAC,CAAC;EACd,IAAI,IAAI,KAAK,SAAS,EAAE,OAAO,EAAE,CAAC;EAClC,QAAQ,MAAM;IACZ,KAAK,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE;MAC1B,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;KACzB,CAAC;IACF,KAAK,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE,CAAC,EAAE;MAC7B,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5B,CAAC;IACF,KAAK,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;MAChC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KAC/B,CAAC;GACH;EACD,OAAO,yBAAyB;IAC9B,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GAClC,CAAC;CACH;;ACdD,IAAI,SAAS,GAAG,WAAW,CAAC;;AAE5B,IAAI,OAAO,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE;EAC1C,IAAI,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;EACjC,IAAI,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;EACjC,IAAI,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;EACjC,IAAI,QAAQ,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;EAChC,IAAI,OAAO,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,GAAG,SAAS,GAAGP,OAAM,GAAG,SAAS,GAAGA,OAAM,CAAC,IAAI,CAAC,KAAKA,OAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAACA,OAAM,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,SAAS,CAAC,CAAC;EACpH,IAAI,OAAO,GAAG,SAAS,GAAGQ,KAAI,GAAGA,KAAI,CAAC,IAAI,CAAC,KAAKA,KAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;EACjE,IAAI,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;EAC/D,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACvB,IAAI,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC;EAC7B,KAAK,GAAG,IAAI,MAAM,EAAE;;IAElB,GAAG,GAAG,CAAC,SAAS,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;;IAExD,GAAG,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;;IAEnC,GAAG,GAAG,OAAO,IAAI,GAAG,GAAGC,IAAG,CAAC,GAAG,EAAET,OAAM,CAAC,GAAG,QAAQ,IAAI,OAAO,GAAG,IAAI,UAAU,GAAGS,IAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;;IAE/G,IAAI,MAAM,EAAEJ,SAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEzD,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,EAAEN,KAAI,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACjD,IAAI,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;GAC3D;CACF,CAAC;AACFC,OAAM,CAAC,IAAI,GAAGQ,KAAI,CAAC;;AAEnB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACf,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACf,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACf,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAChB,WAAc,GAAG,OAAO;;AC1CxB;;;AAGA,YAAc,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,UAAU,EAAE,EAAE;EAC5E,OAAOF,IAAG,CAAC,EAAE,CAAC,IAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;CACxD;;ACLD;;AAEA,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,MAAM,CAACH,QAAO,CAAC,EAAE,CAAC,CAAC,CAAC;CAC5B;;ACJD;AACA,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,cAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,KAAK,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;CAC1D;;ACLD;;AAEA,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG,CAACO,UAAS,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC;CAC1D;;ACLD;;AAEA,YAAc,GAAG,KAAK,CAAC,OAAO,IAAI,SAAS,OAAO,CAAC,GAAG,EAAE;EACtD,OAAOJ,IAAG,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC;CAC5B;;ACFD,IAAI,OAAO,GAAGjB,IAAiB,CAAC,SAAS,CAAC,CAAC;;AAE3C,4BAAc,GAAG,UAAU,QAAQ,EAAE;EACnC,IAAI,CAAC,CAAC;EACN,IAAIsB,QAAO,CAAC,QAAQ,CAAC,EAAE;IACrB,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC;;IAEzB,IAAI,OAAO,CAAC,IAAI,UAAU,KAAK,CAAC,KAAK,KAAK,IAAIA,QAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;IACnF,IAAIvB,SAAQ,CAAC,CAAC,CAAC,EAAE;MACf,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;MACf,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,SAAS,CAAC;KAC/B;GACF,CAAC,OAAO,CAAC,KAAK,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;CACtC;;ACfD;;;AAGA,uBAAc,GAAG,UAAU,QAAQ,EAAE,MAAM,EAAE;EAC3C,OAAO,KAAKwB,wBAAkB,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;CACnD;;ACLD;;;;;;;;;;;;AAYA,iBAAc,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;EACxC,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC;EACvB,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,CAAC;EAC1B,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC;EACxB,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC;EACzB,IAAI,aAAa,GAAG,IAAI,IAAI,CAAC,CAAC;EAC9B,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,aAAa,CAAC;EAC1C,IAAI,MAAM,GAAG,OAAO,IAAIC,mBAAG,CAAC;EAC5B,OAAO,UAAU,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;IACxC,IAAI,CAAC,GAAGC,SAAQ,CAAC,KAAK,CAAC,CAAC;IACxB,IAAI,IAAI,GAAGC,QAAO,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,CAAC,GAAGN,IAAG,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACjC,IAAI,MAAM,GAAGO,SAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC;IACvF,IAAI,GAAG,EAAE,GAAG,CAAC;IACb,MAAM,MAAM,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE,IAAI,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE;MAC5D,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;MAClB,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;MACvB,IAAI,IAAI,EAAE;QACR,IAAI,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;aAC3B,IAAI,GAAG,EAAE,QAAQ,IAAI;UACxB,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;UACpB,KAAK,CAAC,EAAE,OAAO,GAAG,CAAC;UACnB,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;UACrB,KAAK,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC1B,MAAM,IAAI,QAAQ,EAAE,OAAO,KAAK,CAAC;OACnC;KACF;IACD,OAAO,aAAa,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC;GACrE,CAAC;CACH;;AC3CD;AACA,IAAI,WAAW,GAAG3B,IAAiB,CAAC,aAAa,CAAC,CAAC;AACnD,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;AACjC,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,SAAS,EAAEE,KAAkB,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;AAC1F,qBAAc,GAAG,UAAU,GAAG,EAAE;EAC9B,UAAU,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;CACrC;;ACND,YAAY,CAAC;;;AAGb,IAAI,KAAK,GAAGF,aAA2B,CAAC,CAAC,CAAC,CAAC;AAC3C,IAAI,GAAG,GAAG,MAAM,CAAC;AACjB,IAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,IAAI,GAAG,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;AAC9D4B,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE;EAC/C,IAAI,EAAE,SAAS,IAAI,CAAC,UAAU,2BAA2B;IACvD,OAAO,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;GACjF;CACF,CAAC,CAAC;AACH1B,iBAAgC,CAAC,GAAG,CAAC,CAAC;;ACbtC;;AAEA,aAAc,GAAG,UAAU,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE;EACvD,IAAI;IACF,OAAO,OAAO,GAAG,EAAE,CAACE,SAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;;GAE/D,CAAC,OAAO,CAAC,EAAE;IACV,IAAI,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7B,IAAI,GAAG,KAAK,SAAS,EAAEA,SAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpD,MAAM,CAAC,CAAC;GACT;CACF;;ACXD,cAAc,GAAG,EAAE;;ACAnB;;AAEA,IAAI,QAAQ,GAAGJ,IAAiB,CAAC,UAAU,CAAC,CAAC;AAC7C,IAAI6B,YAAU,GAAG,KAAK,CAAC,SAAS,CAAC;;AAEjC,gBAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAO,EAAE,KAAK,SAAS,KAAKC,UAAS,CAAC,KAAK,KAAK,EAAE,IAAID,YAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;CACpF;;ACPD,YAAY,CAAC;;;;AAIb,mBAAc,GAAG,UAAU,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;EAC/C,IAAI,KAAK,IAAI,MAAM,EAAEE,SAAe,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,EAAEvB,aAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;OACvE,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;CAC5B;;ACPD;;AAEA,IAAI,GAAG,GAAGR,IAAiB,CAAC,aAAa,CAAC,CAAC;;AAE3C,IAAI,GAAG,GAAGiB,IAAG,CAAC,YAAY,EAAE,OAAO,SAAS,CAAC,EAAE,EAAE,CAAC,IAAI,WAAW,CAAC;;;AAGlE,IAAI,MAAM,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE;EAC9B,IAAI;IACF,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;GAChB,CAAC,OAAO,CAAC,EAAE,eAAe;CAC5B,CAAC;;AAEF,YAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACZ,OAAO,EAAE,KAAK,SAAS,GAAG,WAAW,GAAG,EAAE,KAAK,IAAI,GAAG,MAAM;;MAExD,QAAQ,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,QAAQ,GAAG,CAAC;;MAExD,GAAG,GAAGA,IAAG,CAAC,CAAC,CAAC;;MAEZ,CAAC,CAAC,GAAGA,IAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,MAAM,IAAI,UAAU,GAAG,WAAW,GAAG,CAAC,CAAC;CACjF;;ACrBD,IAAIe,UAAQ,GAAGhC,IAAiB,CAAC,UAAU,CAAC,CAAC;;AAE7C,0BAAc,GAAGE,KAAkB,CAAC,iBAAiB,GAAG,UAAU,EAAE,EAAE;EACpE,IAAI,EAAE,IAAI,SAAS,EAAE,OAAO,EAAE,CAAC8B,UAAQ,CAAC;OACnC,EAAE,CAAC,YAAY,CAAC;OAChBF,UAAS,CAACG,QAAO,CAAC,EAAE,CAAC,CAAC,CAAC;CAC7B;;ACPD,IAAID,UAAQ,GAAGhC,IAAiB,CAAC,UAAU,CAAC,CAAC;AAC7C,IAAI,YAAY,GAAG,KAAK,CAAC;;AAEzB,IAAI;EACF,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAACgC,UAAQ,CAAC,EAAE,CAAC;EAC5B,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY,EAAE,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC;;EAEvD,AAA4C;CAC7C,CAAC,OAAO,CAAC,EAAE,eAAe;;AAE3B,eAAc,GAAG,UAAU,IAAI,EAAE,WAAW,EAAE;EAC5C,IAAI,CAAC,WAAW,IAAI,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC;EAChD,IAAI,IAAI,GAAG,KAAK,CAAC;EACjB,IAAI;IACF,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACd,IAAI,IAAI,GAAG,GAAG,CAACA,UAAQ,CAAC,EAAE,CAAC;IAC3B,IAAI,CAAC,IAAI,GAAG,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,CAAC,EAAE,CAAC;IAC1D,GAAG,CAACA,UAAQ,CAAC,GAAG,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC;IAC7C,IAAI,CAAC,GAAG,CAAC,CAAC;GACX,CAAC,OAAO,CAAC,EAAE,eAAe;EAC3B,OAAO,IAAI,CAAC;CACb;;ACrBD,YAAY,CAAC;;;;;;;;;;AAUbJ,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAAC5B,WAAyB,CAAC,UAAU,IAAI,EAAE,EAAE,AAAiB,EAAE,CAAC,EAAE,OAAO,EAAE;;EAE1G,IAAI,EAAE,SAAS,IAAI,CAAC,SAAS,iDAAiD;IAC5E,IAAI,CAAC,GAAGyB,SAAQ,CAAC,SAAS,CAAC,CAAC;IAC5B,IAAI,CAAC,GAAG,OAAO,IAAI,IAAI,UAAU,GAAG,IAAI,GAAG,KAAK,CAAC;IACjD,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;IAC5B,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;IAChD,IAAI,OAAO,GAAG,KAAK,KAAK,SAAS,CAAC;IAClC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAGS,sBAAS,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC;IACnC,IAAI,OAAO,EAAE,KAAK,GAAGd,IAAG,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC;;IAExE,IAAI,MAAM,IAAI,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK,IAAIe,YAAW,CAAC,MAAM,CAAC,CAAC,EAAE;MAC/D,KAAK,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzFC,eAAc,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,GAAGC,SAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;OACxG;KACF,MAAM;MACL,MAAM,GAAGV,SAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MAC5B,KAAK,MAAM,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE;QACpDS,eAAc,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;OAC5E;KACF;IACD,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,OAAO,MAAM,CAAC;GACf;CACF,CAAC,CAAC;;ACpCH,YAAc,GAAG,KAAK;;ACAtB,eAAc,GAAG,UAAU,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,cAAc,EAAE;EAChE,IAAI,EAAE,EAAE,YAAY,WAAW,CAAC,KAAK,cAAc,KAAK,SAAS,IAAI,cAAc,IAAI,EAAE,CAAC,EAAE;IAC1F,MAAM,SAAS,CAAC,IAAI,GAAG,yBAAyB,CAAC,CAAC;GACnD,CAAC,OAAO,EAAE,CAAC;CACb;;;ACED,IAAI,KAAK,GAAG,EAAE,CAAC;AACf,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,IAAI,OAAO,GAAG,cAAc,GAAG,UAAU,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;EAC9E,IAAI,MAAM,GAAG,QAAQ,GAAG,YAAY,EAAE,OAAO,QAAQ,CAAC,EAAE,GAAGF,sBAAS,CAAC,QAAQ,CAAC,CAAC;EAC/E,IAAI,CAAC,GAAGd,IAAG,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACvC,IAAI,KAAK,GAAG,CAAC,CAAC;EACd,IAAI,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;EACnC,IAAI,OAAO,MAAM,IAAI,UAAU,EAAE,MAAM,SAAS,CAAC,QAAQ,GAAG,mBAAmB,CAAC,CAAC;;EAEjF,IAAIe,YAAW,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,GAAGR,SAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE;IACzF,MAAM,GAAG,OAAO,GAAG,CAAC,CAACvB,SAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACxF,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM,EAAE,OAAO,MAAM,CAAC;GAC1D,MAAM,KAAK,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,IAAI,GAAG;IAC7E,MAAM,GAAGiC,SAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAChD,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM,EAAE,OAAO,MAAM,CAAC;GAC1D;CACF,CAAC;AACF,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AACtB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;;;ACxBxB;;;AAGA,IAAIC,SAAO,GAAGtC,IAAiB,CAAC,SAAS,CAAC,CAAC;AAC3C,uBAAc,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAGI,SAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;EAChC,IAAI,CAAC,CAAC;EACN,OAAO,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,GAAGA,SAAQ,CAAC,CAAC,CAAC,CAACkC,SAAO,CAAC,KAAK,SAAS,GAAG,CAAC,GAAGpB,UAAS,CAAC,CAAC,CAAC,CAAC;CACtF;;ACRD;AACA,WAAc,GAAG,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;EACzC,IAAI,EAAE,GAAG,IAAI,KAAK,SAAS,CAAC;EAC5B,QAAQ,IAAI,CAAC,MAAM;IACjB,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE;wBACJ,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACX,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC7B,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;GACvE,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CAC/B;;ACfD,IAAIjB,UAAQ,GAAGD,OAAoB,CAAC,QAAQ,CAAC;AAC7C,SAAc,GAAGC,UAAQ,IAAIA,UAAQ,CAAC,eAAe;;ACIrD,IAAIsC,SAAO,GAAG5B,OAAM,CAAC,OAAO,CAAC;AAC7B,IAAI,OAAO,GAAGA,OAAM,CAAC,YAAY,CAAC;AAClC,IAAI,SAAS,GAAGA,OAAM,CAAC,cAAc,CAAC;AACtC,IAAI,cAAc,GAAGA,OAAM,CAAC,cAAc,CAAC;AAC3C,IAAI,QAAQ,GAAGA,OAAM,CAAC,QAAQ,CAAC;AAC/B,IAAI,OAAO,GAAG,CAAC,CAAC;AAChB,IAAI,KAAK,GAAG,EAAE,CAAC;AACf,IAAI,kBAAkB,GAAG,oBAAoB,CAAC;AAC9C,IAAI,KAAK;IAAE,OAAO;IAAE,IAAI,CAAC;AACzB,IAAI,GAAG,GAAG,YAAY;EACpB,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC;;EAEf,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;IAC5B,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;IACnB,OAAO,KAAK,CAAC,EAAE,CAAC,CAAC;IACjB,EAAE,EAAE,CAAC;GACN;CACF,CAAC;AACF,IAAI,QAAQ,GAAG,UAAU,KAAK,EAAE;EAC9B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CACtB,CAAC;;AAEF,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE;EAC1B,OAAO,GAAG,SAAS,YAAY,CAAC,EAAE,EAAE;IAClC,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,YAAY;;MAE7B6B,OAAM,CAAC,OAAO,EAAE,IAAI,UAAU,GAAG,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;KAC3D,CAAC;IACF,KAAK,CAAC,OAAO,CAAC,CAAC;IACf,OAAO,OAAO,CAAC;GAChB,CAAC;EACF,SAAS,GAAG,SAAS,cAAc,CAAC,EAAE,EAAE;IACtC,OAAO,KAAK,CAAC,EAAE,CAAC,CAAC;GAClB,CAAC;;EAEF,IAAIxC,IAAiB,CAACuC,SAAO,CAAC,IAAI,SAAS,EAAE;IAC3C,KAAK,GAAG,UAAU,EAAE,EAAE;MACpBA,SAAO,CAAC,QAAQ,CAACnB,IAAG,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KACnC,CAAC;;GAEH,MAAM,IAAI,QAAQ,IAAI,QAAQ,CAAC,GAAG,EAAE;IACnC,KAAK,GAAG,UAAU,EAAE,EAAE;MACpB,QAAQ,CAAC,GAAG,CAACA,IAAG,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KAC/B,CAAC;;GAEH,MAAM,IAAI,cAAc,EAAE;IACzB,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;IAC/B,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;IACrB,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;IACnC,KAAK,GAAGA,IAAG,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;;GAGxC,MAAM,IAAIT,OAAM,CAAC,gBAAgB,IAAI,OAAO,WAAW,IAAI,UAAU,IAAI,CAACA,OAAM,CAAC,aAAa,EAAE;IAC/F,KAAK,GAAG,UAAU,EAAE,EAAE;MACpBA,OAAM,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC;KAClC,CAAC;IACFA,OAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;;GAErD,MAAM,IAAI,kBAAkB,IAAI8B,UAAG,CAAC,QAAQ,CAAC,EAAE;IAC9C,KAAK,GAAG,UAAU,EAAE,EAAE;MACpBC,KAAI,CAAC,WAAW,CAACD,UAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,YAAY;QAChEC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;OACd,CAAC;KACH,CAAC;;GAEH,MAAM;IACL,KAAK,GAAG,UAAU,EAAE,EAAE;MACpB,UAAU,CAACtB,IAAG,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAChC,CAAC;GACH;CACF;AACD,SAAc,GAAG;EACf,GAAG,EAAE,OAAO;EACZ,KAAK,EAAE,SAAS;CACjB;;AClFD,IAAI,SAAS,GAAGpB,KAAkB,CAAC,GAAG,CAAC;AACvC,IAAI,QAAQ,GAAGW,OAAM,CAAC,gBAAgB,IAAIA,OAAM,CAAC,sBAAsB,CAAC;AACxE,IAAI4B,SAAO,GAAG5B,OAAM,CAAC,OAAO,CAAC;AAC7B,IAAIgC,SAAO,GAAGhC,OAAM,CAAC,OAAO,CAAC;AAC7B,IAAIiC,QAAM,GAAG1C,IAAiB,CAACqC,SAAO,CAAC,IAAI,SAAS,CAAC;;AAErD,cAAc,GAAG,YAAY;EAC3B,IAAI,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;;EAEvB,IAAI,KAAK,GAAG,YAAY;IACtB,IAAI,MAAM,EAAE,EAAE,CAAC;IACf,IAAIK,QAAM,KAAK,MAAM,GAAGL,SAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;IACvD,OAAO,IAAI,EAAE;MACX,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;MACb,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;MACjB,IAAI;QACF,EAAE,EAAE,CAAC;OACN,CAAC,OAAO,CAAC,EAAE;QACV,IAAI,IAAI,EAAE,MAAM,EAAE,CAAC;aACd,IAAI,GAAG,SAAS,CAAC;QACtB,MAAM,CAAC,CAAC;OACT;KACF,CAAC,IAAI,GAAG,SAAS,CAAC;IACnB,IAAI,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;GAC5B,CAAC;;;EAGF,IAAIK,QAAM,EAAE;IACV,MAAM,GAAG,YAAY;MACnBL,SAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACzB,CAAC;;GAEH,MAAM,IAAI,QAAQ,EAAE;IACnB,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACvC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3D,MAAM,GAAG,YAAY;MACnB,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC;KAC9B,CAAC;;GAEH,MAAM,IAAII,SAAO,IAAIA,SAAO,CAAC,OAAO,EAAE;IACrC,IAAI,OAAO,GAAGA,SAAO,CAAC,OAAO,EAAE,CAAC;IAChC,MAAM,GAAG,YAAY;MACnB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACrB,CAAC;;;;;;;GAOH,MAAM;IACL,MAAM,GAAG,YAAY;;MAEnB,SAAS,CAAC,IAAI,CAAChC,OAAM,EAAE,KAAK,CAAC,CAAC;KAC/B,CAAC;GACH;;EAED,OAAO,UAAU,EAAE,EAAE;IACnB,IAAI,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;IACvC,IAAI,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3B,IAAI,CAAC,IAAI,EAAE;MACT,IAAI,GAAG,IAAI,CAAC;MACZ,MAAM,EAAE,CAAC;KACV,CAAC,IAAI,GAAG,IAAI,CAAC;GACf,CAAC;CACH;;ACnED,YAAY,CAAC;;;;AAIb,SAAS,iBAAiB,CAAC,CAAC,EAAE;EAC5B,IAAI,OAAO,EAAE,MAAM,CAAC;EACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,UAAU,SAAS,EAAE,QAAQ,EAAE;IAClD,IAAI,OAAO,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,EAAE,MAAM,SAAS,CAAC,yBAAyB,CAAC,CAAC;IAC9F,OAAO,GAAG,SAAS,CAAC;IACpB,MAAM,GAAG,QAAQ,CAAC;GACnB,CAAC,CAAC;EACH,IAAI,CAAC,OAAO,GAAGO,UAAS,CAAC,OAAO,CAAC,CAAC;EAClC,IAAI,CAAC,MAAM,GAAGA,UAAS,CAAC,MAAM,CAAC,CAAC;CACjC;;AAED,OAAgB,GAAG,UAAU,CAAC,EAAE;EAC9B,OAAO,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;CACjC,CAAC;;;;;;ACjBF,YAAc,GAAG,UAAU,IAAI,EAAE;EAC/B,IAAI;IACF,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;GAChC,CAAC,OAAO,CAAC,EAAE;IACV,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;GAC1B;CACF;;ACFD,mBAAc,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;EAC/Bd,SAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIL,SAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EACjD,IAAI,iBAAiB,GAAG8C,qBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,IAAI,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC,CAAC,CAAC;EACX,OAAO,iBAAiB,CAAC,OAAO,CAAC;CAClC;;ACVD,gBAAc,GAAG,UAAU,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;EAC5C,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE7B,SAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;EAC3D,OAAO,MAAM,CAAC;CACf;;ACJD,IAAI,GAAG,GAAGhB,SAAuB,CAAC,CAAC,CAAC;;AAEpC,IAAI8C,KAAG,GAAG5C,IAAiB,CAAC,aAAa,CAAC,CAAC;;AAE3C,mBAAc,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;EACxC,IAAI,EAAE,IAAI,CAACO,IAAG,CAAC,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,SAAS,EAAEqC,KAAG,CAAC,EAAE,GAAG,CAAC,EAAE,EAAEA,KAAG,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;CACtG;;ACND,YAAY,CAAC;;;;AAIb,IAAIR,SAAO,GAAGtC,IAAiB,CAAC,SAAS,CAAC,CAAC;;AAE3C,eAAc,GAAG,UAAU,GAAG,EAAE;EAC9B,IAAI,CAAC,GAAGW,OAAM,CAAC,GAAG,CAAC,CAAC;EACpB,IAAIoC,YAAW,IAAI,CAAC,IAAI,CAAC,CAAC,CAACT,SAAO,CAAC,EAAE/B,SAAE,CAAC,CAAC,CAAC,CAAC,EAAE+B,SAAO,EAAE;IACpD,YAAY,EAAE,IAAI;IAClB,GAAG,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE;GAClC,CAAC,CAAC;CACJ;;ACZD,YAAY,CAAC;;;;;;;;;;;AAWb,IAAI,IAAI,GAAGtC,KAAkB,CAAC,GAAG,CAAC;AAClC,IAAI,SAAS,GAAGE,UAAuB,EAAE,CAAC;;;;AAI1C,IAAI,OAAO,GAAG,SAAS,CAAC;AACxB,IAAI8C,WAAS,GAAGrC,OAAM,CAAC,SAAS,CAAC;AACjC,IAAI,OAAO,GAAGA,OAAM,CAAC,OAAO,CAAC;AAC7B,IAAI,QAAQ,GAAGA,OAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAGsB,QAAO,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC;AAC3C,IAAI,KAAK,GAAG,YAAY,eAAe,CAAC;AACxC,IAAI,QAAQ;IAAE,2BAA2B;IAAE,oBAAoB;IAAE,OAAO,CAAC;AACzE,IAAI,oBAAoB,GAAG,2BAA2B,GAAGgB,qBAA0B,CAAC,CAAC,CAAC;;AAEtF,IAAI,UAAU,GAAG,CAAC,CAAC,YAAY;EAC7B,IAAI;;IAEF,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,WAAW,GAAG,CAAC,OAAO,CAAC,WAAW,GAAG,EAAE,EAAE9C,IAAiB,CAAC,SAAS,CAAC,CAAC,GAAG,UAAU,IAAI,EAAE;MAC3F,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACpB,CAAC;;IAEF,OAAO,CAAC,MAAM,IAAI,OAAO,qBAAqB,IAAI,UAAU,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,WAAW,CAAC;GAC7G,CAAC,OAAO,CAAC,EAAE,eAAe;CAC5B,EAAE,CAAC;;;AAGJ,IAAI,UAAU,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,IAAI,CAAC;EACT,OAAOJ,SAAQ,CAAC,EAAE,CAAC,IAAI,QAAQ,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,UAAU,GAAG,IAAI,GAAG,KAAK,CAAC;CAC7E,CAAC;AACF,IAAI,MAAM,GAAG,UAAU,OAAO,EAAE,QAAQ,EAAE;EACxC,IAAI,OAAO,CAAC,EAAE,EAAE,OAAO;EACvB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;EAClB,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,CAAC;EACvB,SAAS,CAAC,YAAY;IACpB,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,CAAC;IACvB,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;IACzB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,GAAG,GAAG,UAAU,QAAQ,EAAE;MAC5B,IAAI,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC;MAC/C,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;MAC/B,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;MAC7B,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;MAC7B,IAAI,MAAM,EAAE,IAAI,CAAC;MACjB,IAAI;QACF,IAAI,OAAO,EAAE;UACX,IAAI,CAAC,EAAE,EAAE;YACP,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAChD,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;WAChB;UACD,IAAI,OAAO,KAAK,IAAI,EAAE,MAAM,GAAG,KAAK,CAAC;eAChC;YACH,IAAI,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;YAC3B,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;WAC3B;UACD,IAAI,MAAM,KAAK,QAAQ,CAAC,OAAO,EAAE;YAC/B,MAAM,CAACiD,WAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;WAC1C,MAAM,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;WACpC,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC;SACxB,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC;OACtB,CAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC;IACF,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC;IAChB,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC;IACnB,IAAI,QAAQ,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;GACnD,CAAC,CAAC;CACJ,CAAC;AACF,IAAI,WAAW,GAAG,UAAU,OAAO,EAAE;EACnC,IAAI,CAAC,IAAI,CAACrC,OAAM,EAAE,YAAY;IAC5B,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,CAAC;IACvB,IAAI,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC;IAC7B,IAAI,SAAS,EAAE;MACb,MAAM,GAAGuC,QAAO,CAAC,YAAY;QAC3B,IAAI,MAAM,EAAE;UACV,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;SACpD,MAAM,IAAI,OAAO,GAAGvC,OAAM,CAAC,oBAAoB,EAAE;UAChD,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;SAC9C,MAAM,IAAI,CAAC,OAAO,GAAGA,OAAM,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,EAAE;UACtD,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;SACrD;OACF,CAAC,CAAC;;MAEH,OAAO,CAAC,EAAE,GAAG,MAAM,IAAI,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACrD,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,CAAC;IACzB,IAAI,SAAS,IAAI,MAAM,CAAC,CAAC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC;GAC3C,CAAC,CAAC;CACJ,CAAC;AACF,IAAI,WAAW,GAAG,UAAU,OAAO,EAAE;EACnC,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAClC,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,IAAI,OAAO,CAAC,EAAE,CAAC;EACrC,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,QAAQ,CAAC;EACb,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;IACvB,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,KAAK,CAAC;GACnE,CAAC,OAAO,IAAI,CAAC;CACf,CAAC;AACF,IAAI,iBAAiB,GAAG,UAAU,OAAO,EAAE;EACzC,IAAI,CAAC,IAAI,CAACA,OAAM,EAAE,YAAY;IAC5B,IAAI,OAAO,CAAC;IACZ,IAAI,MAAM,EAAE;MACV,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;KAC3C,MAAM,IAAI,OAAO,GAAGA,OAAM,CAAC,kBAAkB,EAAE;MAC9C,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;KACnD;GACF,CAAC,CAAC;CACJ,CAAC;AACF,IAAI,OAAO,GAAG,UAAU,KAAK,EAAE;EAC7B,IAAI,OAAO,GAAG,IAAI,CAAC;EACnB,IAAI,OAAO,CAAC,EAAE,EAAE,OAAO;EACvB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;EAClB,OAAO,GAAG,OAAO,CAAC,EAAE,IAAI,OAAO,CAAC;EAChC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC;EACnB,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;EACf,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;EACjD,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;CACvB,CAAC;AACF,IAAI,QAAQ,GAAG,UAAU,KAAK,EAAE;EAC9B,IAAI,OAAO,GAAG,IAAI,CAAC;EACnB,IAAI,IAAI,CAAC;EACT,IAAI,OAAO,CAAC,EAAE,EAAE,OAAO;EACvB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;EAClB,OAAO,GAAG,OAAO,CAAC,EAAE,IAAI,OAAO,CAAC;EAChC,IAAI;IACF,IAAI,OAAO,KAAK,KAAK,EAAE,MAAMqC,WAAS,CAAC,kCAAkC,CAAC,CAAC;IAC3E,IAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE;MAC5B,SAAS,CAAC,YAAY;QACpB,IAAI,OAAO,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC;QACzC,IAAI;UACF,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE5B,IAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,EAAEA,IAAG,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;SACvE,CAAC,OAAO,CAAC,EAAE;UACV,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SAC1B;OACF,CAAC,CAAC;KACJ,MAAM;MACL,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC;MACnB,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;MACf,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KACxB;GACF,CAAC,OAAO,CAAC,EAAE;IACV,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;GAC7C;CACF,CAAC;;;AAGF,IAAI,CAAC,UAAU,EAAE;;EAEf,QAAQ,GAAG,SAAS,OAAO,CAAC,QAAQ,EAAE;IACpC+B,WAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1CjC,UAAS,CAAC,QAAQ,CAAC,CAAC;IACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,IAAI;MACF,QAAQ,CAACE,IAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,EAAEA,IAAG,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;KACzD,CAAC,OAAO,GAAG,EAAE;MACZ,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACzB;GACF,CAAC;;EAEF,QAAQ,GAAG,SAAS,OAAO,CAAC,QAAQ,EAAE;IACpC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACb,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;IACpB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;IAChB,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;IACpB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;GACjB,CAAC;EACF,QAAQ,CAAC,SAAS,GAAGgC,YAA0B,CAAC,QAAQ,CAAC,SAAS,EAAE;;IAElE,IAAI,EAAE,SAAS,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE;MAC3C,IAAI,QAAQ,GAAG,oBAAoB,CAAC7B,mBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;MACxE,QAAQ,CAAC,EAAE,GAAG,OAAO,WAAW,IAAI,UAAU,GAAG,WAAW,GAAG,IAAI,CAAC;MACpE,QAAQ,CAAC,IAAI,GAAG,OAAO,UAAU,IAAI,UAAU,IAAI,UAAU,CAAC;MAC9D,QAAQ,CAAC,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;MACtD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MACvB,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MACpC,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;MACjC,OAAO,QAAQ,CAAC,OAAO,CAAC;KACzB;;IAED,OAAO,EAAE,UAAU,UAAU,EAAE;MAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;KACzC;GACF,CAAC,CAAC;EACH,oBAAoB,GAAG,YAAY;IACjC,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACvB,IAAI,CAAC,OAAO,GAAGH,IAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IACzC,IAAI,CAAC,MAAM,GAAGA,IAAG,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;GACxC,CAAC;EACF6B,qBAA0B,CAAC,CAAC,GAAG,oBAAoB,GAAG,UAAU,CAAC,EAAE;IACjE,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,OAAO;QAClC,IAAI,oBAAoB,CAAC,CAAC,CAAC;QAC3B,2BAA2B,CAAC,CAAC,CAAC,CAAC;GACpC,CAAC;CACH;;AAEDrB,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAChFyB,eAA+B,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACnDC,WAAyB,CAAC,OAAO,CAAC,CAAC;AACnC,OAAO,GAAGC,KAAkB,CAAC,OAAO,CAAC,CAAC;;;AAGtC3B,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE;;EAEpD,MAAM,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE;IACzB,IAAI,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC5C,IAAI,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC;IACjC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACZ,OAAO,UAAU,CAAC,OAAO,CAAC;GAC3B;CACF,CAAC,CAAC;AACHA,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,IAAI4B,QAAO,IAAI,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE;;EAEjE,OAAO,EAAE,SAAS,OAAO,CAAC,CAAC,EAAE;IAC3B,OAAOC,eAAc,CAACD,QAAO,IAAI,IAAI,KAAK,OAAO,GAAG,QAAQ,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;GACzE;CACF,CAAC,CAAC;AACH5B,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,EAAE,UAAU,IAAI8B,WAAyB,CAAC,UAAU,IAAI,EAAE;EACxF,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;CACpC,CAAC,CAAC,EAAE,OAAO,EAAE;;EAEZ,GAAG,EAAE,SAAS,GAAG,CAAC,QAAQ,EAAE;IAC1B,IAAI,CAAC,GAAG,IAAI,CAAC;IACb,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;IACjC,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,MAAM,GAAGR,QAAO,CAAC,YAAY;MAC/B,IAAI,MAAM,GAAG,EAAE,CAAC;MAChB,IAAI,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,SAAS,GAAG,CAAC,CAAC;MAClBS,MAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,OAAO,EAAE;QACxC,IAAI,MAAM,GAAG,KAAK,EAAE,CAAC;QACrB,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvB,SAAS,EAAE,CAAC;QACZ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE;UACvC,IAAI,aAAa,EAAE,OAAO;UAC1B,aAAa,GAAG,IAAI,CAAC;UACrB,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;UACvB,EAAE,SAAS,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;SAChC,EAAE,MAAM,CAAC,CAAC;OACZ,CAAC,CAAC;MACH,EAAE,SAAS,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,UAAU,CAAC,OAAO,CAAC;GAC3B;;EAED,IAAI,EAAE,SAAS,IAAI,CAAC,QAAQ,EAAE;IAC5B,IAAI,CAAC,GAAG,IAAI,CAAC;IACb,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,MAAM,GAAGT,QAAO,CAAC,YAAY;MAC/BS,MAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,OAAO,EAAE;QACxC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;OACrD,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,UAAU,CAAC,OAAO,CAAC;GAC3B;CACF,CAAC,CAAC;;ACpRH,IAAI,KAAK,GAAG/C,IAAG,CAAC,aAAa,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAGA,IAAG,CAAC,MAAM,CAAC,CAAC;AACvB,IAAI,GAAG,GAAG,CAAC,EAAED,OAAM,CAAC,WAAW,IAAIA,OAAM,CAAC,QAAQ,CAAC,CAAC;AACpD,IAAI,MAAM,GAAG,GAAG,CAAC;AACjB,IAAI,CAAC,GAAG,CAAC,CAAC;AACV,IAAI,CAAC,GAAG,CAAC,CAAC;AACV,IAAI,KAAK,CAAC;;AAEV,IAAI,sBAAsB,GAAG;EAC3B,gHAAgH;EAChH,KAAK,CAAC,GAAG,CAAC,CAAC;;AAEb,OAAO,CAAC,GAAG,CAAC,EAAE;EACZ,IAAI,KAAK,GAAGA,OAAM,CAAC,sBAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAC/CD,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACnCA,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;GACnC,MAAM,MAAM,GAAG,KAAK,CAAC;CACvB;;AAED,UAAc,GAAG;EACf,GAAG,EAAE,GAAG;EACR,MAAM,EAAE,MAAM;EACd,KAAK,EAAE,KAAK;EACZ,IAAI,EAAE,IAAI;CACX;;AC3BD;;;AAGA,YAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,EAAE,KAAK,SAAS,EAAE,OAAO,CAAC,CAAC;EAC/B,IAAI,MAAM,GAAGW,UAAS,CAAC,EAAE,CAAC,CAAC;EAC3B,IAAI,MAAM,GAAGM,SAAQ,CAAC,MAAM,CAAC,CAAC;EAC9B,IAAI,MAAM,KAAK,MAAM,EAAE,MAAM,UAAU,CAAC,eAAe,CAAC,CAAC;EACzD,OAAO,MAAM,CAAC;CACf;;ACTD;;;AAGA,cAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,OAAOD,QAAO,CAACZ,QAAO,CAAC,EAAE,CAAC,CAAC,CAAC;CAC7B;;ACJD,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,IAAI8C,KAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,oBAAc,GAAG,UAAU,KAAK,EAAE,MAAM,EAAE;EACxC,KAAK,GAAGvC,UAAS,CAAC,KAAK,CAAC,CAAC;EACzB,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,MAAM,EAAE,CAAC,CAAC,GAAGuC,KAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;CAChE;;ACND;;;;;AAKA,kBAAc,GAAG,UAAU,WAAW,EAAE;EACtC,OAAO,UAAU,KAAK,EAAE,EAAE,EAAE,SAAS,EAAE;IACrC,IAAI,CAAC,GAAGC,UAAS,CAAC,KAAK,CAAC,CAAC;IACzB,IAAI,MAAM,GAAGlC,SAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,KAAK,GAAGmC,gBAAe,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAI,KAAK,CAAC;;;IAGV,IAAI,WAAW,IAAI,EAAE,IAAI,EAAE,EAAE,OAAO,MAAM,GAAG,KAAK,EAAE;MAClD,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;;MAEnB,IAAI,KAAK,IAAI,KAAK,EAAE,OAAO,IAAI,CAAC;;KAEjC,MAAM,MAAM,MAAM,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE,IAAI,WAAW,IAAI,KAAK,IAAI,CAAC,EAAE;MACnE,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,OAAO,WAAW,IAAI,KAAK,IAAI,CAAC,CAAC;KACvD,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;GAC7B,CAAC;CACH;;ACtBD,IAAIC,QAAM,GAAG/D,OAAoB,CAAC,MAAM,CAAC,CAAC;;AAE1C,cAAc,GAAG,UAAU,GAAG,EAAE;EAC9B,OAAO+D,QAAM,CAAC,GAAG,CAAC,KAAKA,QAAM,CAAC,GAAG,CAAC,GAAGnD,IAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CAChD;;ACFD,IAAI,YAAY,GAAGZ,cAA4B,CAAC,KAAK,CAAC,CAAC;AACvD,IAAI,QAAQ,GAAGE,UAAwB,CAAC,UAAU,CAAC,CAAC;;AAEpD,uBAAc,GAAG,UAAU,MAAM,EAAE,KAAK,EAAE;EACxC,IAAI,CAAC,GAAG2D,UAAS,CAAC,MAAM,CAAC,CAAC;EAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,IAAI,GAAG,CAAC;EACR,KAAK,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,IAAI,QAAQ,EAAEpD,IAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;EAEpE,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,IAAIA,IAAG,CAAC,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IACrD,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAChD;EACD,OAAO,MAAM,CAAC;CACf;;AChBD;AACA,gBAAc,GAAG;EACf,+FAA+F;EAC/F,KAAK,CAAC,GAAG,CAAC;;ACHZ;;AAEA,IAAI,UAAU,GAAGT,YAA2B,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;;AAE3E,OAAS,GAAG,MAAM,CAAC,mBAAmB,IAAI,SAAS,mBAAmB,CAAC,CAAC,EAAE;EACxE,OAAOgE,mBAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;CAC7B,CAAC;;;;;;ACNF;AACA,YAAY,CAAC;;;;AAIb,cAAc,GAAG,SAAS,IAAI,CAAC,KAAK,mCAAmC;EACrE,IAAI,CAAC,GAAGvC,SAAQ,CAAC,IAAI,CAAC,CAAC;EACvB,IAAI,MAAM,GAAGE,SAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;EAChC,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;EAC5B,IAAI,KAAK,GAAGmC,gBAAe,CAAC,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;EACzE,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;EAC9C,IAAI,MAAM,GAAG,GAAG,KAAK,SAAS,GAAG,MAAM,GAAGA,gBAAe,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;EACvE,OAAO,MAAM,GAAG,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;EAC1C,OAAO,CAAC,CAAC;CACV;;;ACdD,YAAY,CAAC;;;;;;;;;;;;AAYb,IAAI,IAAI,GAAG9D,WAAyB,CAAC,CAAC,CAAC;AACvC,IAAI,EAAE,GAAGE,SAAuB,CAAC,CAAC,CAAC;;;AAGnC,IAAI,YAAY,GAAG,aAAa,CAAC;AACjC,IAAI,SAAS,GAAG,UAAU,CAAC;AAC3B,IAAI,SAAS,GAAG,WAAW,CAAC;AAC5B,IAAI,YAAY,GAAG,eAAe,CAAC;AACnC,IAAI,WAAW,GAAG,cAAc,CAAC;AACjC,IAAI,YAAY,GAAGS,OAAM,CAAC,YAAY,CAAC,CAAC;AACxC,IAAI,SAAS,GAAGA,OAAM,CAAC,SAAS,CAAC,CAAC;AAClC,IAAI,IAAI,GAAGA,OAAM,CAAC,IAAI,CAAC;AACvB,IAAI,UAAU,GAAGA,OAAM,CAAC,UAAU,CAAC;;AAEnC,IAAI,QAAQ,GAAGA,OAAM,CAAC,QAAQ,CAAC;AAC/B,IAAI,UAAU,GAAG,YAAY,CAAC;AAC9B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,IAAI,MAAM,GAAG,QAAQ,CAAC;AACtB,IAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,IAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,IAAI,OAAO,GAAGoC,YAAW,GAAG,IAAI,GAAG,MAAM,CAAC;AAC1C,IAAI,OAAO,GAAGA,YAAW,GAAG,IAAI,GAAG,WAAW,CAAC;AAC/C,IAAI,OAAO,GAAGA,YAAW,GAAG,IAAI,GAAG,WAAW,CAAC;;;AAG/C,SAAS,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE;EACxC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;EAC3B,IAAI,IAAI,GAAG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;EACjC,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;EAC3B,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC;EACtB,IAAI,EAAE,GAAG,IAAI,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACrD,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1D,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACZ,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;;EAEnB,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,QAAQ,EAAE;;IAExC,CAAC,GAAG,KAAK,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,GAAG,IAAI,CAAC;GACV,MAAM;IACL,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IAC5B,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;MAChC,CAAC,EAAE,CAAC;MACJ,CAAC,IAAI,CAAC,CAAC;KACR;IACD,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,EAAE;MAClB,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC;KACjB,MAAM;MACL,KAAK,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;KACjC;IACD,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;MAClB,CAAC,EAAE,CAAC;MACJ,CAAC,IAAI,CAAC,CAAC;KACR;IACD,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,EAAE;MACrB,CAAC,GAAG,CAAC,CAAC;MACN,CAAC,GAAG,IAAI,CAAC;KACV,MAAM,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,EAAE;MACzB,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;MACnC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACf,MAAM;MACL,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;MAC7C,CAAC,GAAG,CAAC,CAAC;KACP;GACF;EACD,OAAO,IAAI,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;EAC9D,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC;EAClB,IAAI,IAAI,IAAI,CAAC;EACb,OAAO,IAAI,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;EAC7D,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;EACvB,OAAO,MAAM,CAAC;CACf;AACD,SAAS,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;EAC3C,IAAI,IAAI,GAAG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;EACjC,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;EAC3B,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC;EACtB,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC;EACrB,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;EACnB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACpB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAChB,IAAI,CAAC,CAAC;EACN,CAAC,KAAK,CAAC,CAAC;EACR,OAAO,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;EAC5D,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;EAC1B,CAAC,KAAK,CAAC,KAAK,CAAC;EACb,KAAK,IAAI,IAAI,CAAC;EACd,OAAO,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;EAC5D,IAAI,CAAC,KAAK,CAAC,EAAE;IACX,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;GACf,MAAM,IAAI,CAAC,KAAK,IAAI,EAAE;IACrB,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;GAC3C,MAAM;IACL,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACrB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;GACf,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;CAC9C;;AAED,SAAS,SAAS,CAAC,KAAK,EAAE;EACxB,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;CACnE;AACD,SAAS,MAAM,CAAC,EAAE,EAAE;EAClB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;CACpB;AACD,SAAS,OAAO,CAAC,EAAE,EAAE;EACnB,OAAO,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;CACpC;AACD,SAAS,OAAO,CAAC,EAAE,EAAE;EACnB,OAAO,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;CACtE;AACD,SAAS,OAAO,CAAC,EAAE,EAAE;EACnB,OAAO,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC/B;AACD,SAAS,OAAO,CAAC,EAAE,EAAE;EACnB,OAAO,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC/B;;AAED,SAAS,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE;EACnC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;CACxE;;AAED,SAAS,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE;EAC/C,IAAI,QAAQ,GAAG,CAAC,KAAK,CAAC;EACtB,IAAI,QAAQ,GAAGkB,QAAO,CAAC,QAAQ,CAAC,CAAC;EACjC,IAAI,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC;EACpE,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;EAC7B,IAAI,KAAK,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;EACrC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,CAAC;EAC7C,OAAO,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;CAC/C;AACD,SAAS,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE;EAClE,IAAI,QAAQ,GAAG,CAAC,KAAK,CAAC;EACtB,IAAI,QAAQ,GAAGA,QAAO,CAAC,QAAQ,CAAC,CAAC;EACjC,IAAI,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC;EACpE,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;EAC7B,IAAI,KAAK,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;EACrC,IAAI,IAAI,GAAG,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;EAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CAC7F;;AAED,IAAI,CAACC,MAAM,CAAC,GAAG,EAAE;EACf,YAAY,GAAG,SAAS,WAAW,CAAC,MAAM,EAAE;IAC1Cf,WAAU,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IAC7C,IAAI,UAAU,GAAGc,QAAO,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,CAAC,EAAE,GAAGE,UAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,IAAI,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC;GAC5B,CAAC;;EAEF,SAAS,GAAG,SAAS,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE;IAC5DhB,WAAU,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACvCA,WAAU,CAAC,MAAM,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;IAC5C,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IACnC,IAAI,MAAM,GAAG9B,UAAS,CAAC,UAAU,CAAC,CAAC;IACnC,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,YAAY,EAAE,MAAM,UAAU,CAAC,eAAe,CAAC,CAAC;IAC3E,UAAU,GAAG,UAAU,KAAK,SAAS,GAAG,YAAY,GAAG,MAAM,GAAGM,SAAQ,CAAC,UAAU,CAAC,CAAC;IACrF,IAAI,MAAM,GAAG,UAAU,GAAG,YAAY,EAAE,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;IACvE,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;IACvB,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;IACvB,IAAI,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC;GAC5B,CAAC;;EAEF,IAAIoB,YAAW,EAAE;IACf,SAAS,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC3C,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACnC,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACxC,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;GACzC;;EAEDqB,YAAW,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;IAChC,OAAO,EAAE,SAAS,OAAO,CAAC,UAAU,EAAE;MACpC,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;KAChD;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,EAAE;MACtC,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KACpC;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,uBAAuB;MAC3D,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;KAC/C;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,UAAU,uBAAuB;MAC7D,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnD,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACjC;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,uBAAuB;MAC3D,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAC1D;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,UAAU,uBAAuB;MAC7D,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;KAChE;IACD,UAAU,EAAE,SAAS,UAAU,CAAC,UAAU,uBAAuB;MAC/D,OAAO,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;KACrE;IACD,UAAU,EAAE,SAAS,UAAU,CAAC,UAAU,uBAAuB;MAC/D,OAAO,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;KACrE;IACD,OAAO,EAAE,SAAS,OAAO,CAAC,UAAU,EAAE,KAAK,EAAE;MAC3C,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KACzC;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;MAC7C,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KACzC;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,uBAAuB;MAClE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,UAAU,EAAE,KAAK,uBAAuB;MACpE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,uBAAuB;MAClE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,UAAU,EAAE,KAAK,uBAAuB;MACpE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,UAAU,EAAE,SAAS,UAAU,CAAC,UAAU,EAAE,KAAK,uBAAuB;MACtE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,UAAU,EAAE,SAAS,UAAU,CAAC,UAAU,EAAE,KAAK,uBAAuB;MACtE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;GACF,CAAC,CAAC;CACJ,MAAM;EACL,IAAI,CAACrD,MAAK,CAAC,YAAY;IACrB,YAAY,CAAC,CAAC,CAAC,CAAC;GACjB,CAAC,IAAI,CAACA,MAAK,CAAC,YAAY;IACvB,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;GACtB,CAAC,IAAIA,MAAK,CAAC,YAAY;IACtB,IAAI,YAAY,EAAE,CAAC;IACnB,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC;IACtB,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC;IACtB,OAAO,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC;GAC1C,CAAC,EAAE;IACF,YAAY,GAAG,SAAS,WAAW,CAAC,MAAM,EAAE;MAC1CoC,WAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;MAC/B,OAAO,IAAI,UAAU,CAACc,QAAO,CAAC,MAAM,CAAC,CAAC,CAAC;KACxC,CAAC;IACF,IAAI,gBAAgB,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IACvE,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG;MAC9D,IAAI,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,YAAY,CAAC,EAAEvD,KAAI,CAAC,YAAY,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;KACpF;IACD,IAAI,CAAC8C,QAAO,EAAE,gBAAgB,CAAC,WAAW,GAAG,YAAY,CAAC;GAC3D;;EAED,IAAI,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,IAAI,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;EAC5C,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;EAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;EAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAEY,YAAW,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;IACzE,OAAO,EAAE,SAAS,OAAO,CAAC,UAAU,EAAE,KAAK,EAAE;MAC3C,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KACpD;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;MAC7C,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KACpD;GACF,EAAE,IAAI,CAAC,CAAC;CACV;AACDC,eAAc,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;AAC3CA,eAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACrC3D,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAEwD,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9C,OAAO,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;AACrC,OAAO,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;;;AClR/BtC,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAAC5B,MAAmB,CAAC,GAAG,EAAE;EACpE,QAAQ,EAAEE,YAA0B,CAAC,QAAQ;CAC9C,CAAC,CAAC;;ACHH,IAAIK,IAAE,GAAGP,SAAuB,CAAC,CAAC,CAAC;AACnC,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC;AAChC,IAAI,MAAM,GAAG,uBAAuB,CAAC;AACrC,IAAI,IAAI,GAAG,MAAM,CAAC;;;AAGlB,IAAI,IAAI,MAAM,IAAIE,YAAyB,IAAIK,IAAE,CAAC,MAAM,EAAE,IAAI,EAAE;EAC9D,YAAY,EAAE,IAAI;EAClB,GAAG,EAAE,YAAY;IACf,IAAI;MACF,OAAO,CAAC,EAAE,GAAG,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACrC,CAAC,OAAO,CAAC,EAAE;MACV,OAAO,EAAE,CAAC;KACX;GACF;CACF,CAAC,CAAC;;ACfH,OAAS,GAAG,EAAE,CAAC,oBAAoB,CAAC;;;;;;ACMpC,IAAI,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC;;AAE3C,OAAS,GAAGP,YAAyB,GAAG,IAAI,GAAG,SAAS,wBAAwB,CAAC,CAAC,EAAE,CAAC,EAAE;EACrF,CAAC,GAAG6D,UAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,GAAGxD,YAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;EACzB,IAAIC,aAAc,EAAE,IAAI;IACtB,OAAO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACnB,CAAC,OAAO,CAAC,EAAE,eAAe;EAC3B,IAAIG,IAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAOD,aAAU,CAAC,CAAC8D,UAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAC3D,CAAC;;;;;;ACfF;;;;AAIA,IAAI,KAAK,GAAG,UAAU,CAAC,EAAE,KAAK,EAAE;EAC9BlE,SAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,IAAI,CAACL,SAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE,MAAM,SAAS,CAAC,KAAK,GAAG,2BAA2B,CAAC,CAAC;CAC9F,CAAC;AACF,aAAc,GAAG;EACf,GAAG,EAAE,MAAM,CAAC,cAAc,KAAK,WAAW,IAAI,EAAE;IAC9C,UAAU,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE;MAC1B,IAAI;QACF,GAAG,GAAGC,IAAiB,CAAC,QAAQ,CAAC,IAAI,EAAEE,WAAyB,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC1G,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACd,KAAK,GAAG,EAAE,IAAI,YAAY,KAAK,CAAC,CAAC;OAClC,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,GAAG,IAAI,CAAC,EAAE;MAC7B,OAAO,SAAS,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE;QACvC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAChB,IAAI,KAAK,EAAE,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,CAAC;OACV,CAAC;KACH,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC;EAC3B,KAAK,EAAE,KAAK;CACb;;ACxBD;;AAEA0B,OAAO,CAACA,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,cAAc,EAAE5B,SAAuB,CAAC,GAAG,EAAE,CAAC,CAAC;;;ACF9E,IAAI,IAAI,GAAGA,IAAiB,CAAC,MAAM,CAAC,CAAC;;;AAGrC,IAAI,OAAO,GAAGE,SAAuB,CAAC,CAAC,CAAC;AACxC,IAAI,EAAE,GAAG,CAAC,CAAC;AACX,IAAI,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,YAAY;EACpD,OAAO,IAAI,CAAC;CACb,CAAC;AACF,IAAI,MAAM,GAAG,CAACC,MAAmB,CAAC,YAAY;EAC5C,OAAO,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;CACnD,CAAC,CAAC;AACH,IAAI,OAAO,GAAG,UAAU,EAAE,EAAE;EAC1B,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE;IACzB,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE;IACb,CAAC,EAAE,EAAE;GACN,EAAE,CAAC,CAAC;CACN,CAAC;AACF,IAAI,OAAO,GAAG,UAAU,EAAE,EAAE,MAAM,EAAE;;EAElC,IAAI,CAACJ,SAAQ,CAAC,EAAE,CAAC,EAAE,OAAO,OAAO,EAAE,IAAI,QAAQ,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,QAAQ,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;EAChG,IAAI,CAACU,IAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;;IAElB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,CAAC;;IAElC,IAAI,CAAC,MAAM,EAAE,OAAO,GAAG,CAAC;;IAExB,OAAO,CAAC,EAAE,CAAC,CAAC;;GAEb,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACrB,CAAC;AACF,IAAI,OAAO,GAAG,UAAU,EAAE,EAAE,MAAM,EAAE;EAClC,IAAI,CAACA,IAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;;IAElB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC;;IAEnC,IAAI,CAAC,MAAM,EAAE,OAAO,KAAK,CAAC;;IAE1B,OAAO,CAAC,EAAE,CAAC,CAAC;;GAEb,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACrB,CAAC;;AAEF,IAAI,QAAQ,GAAG,UAAU,EAAE,EAAE;EAC3B,IAAI,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,YAAY,CAAC,EAAE,CAAC,IAAI,CAACA,IAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;EAC3E,OAAO,EAAE,CAAC;CACX,CAAC;AACF,IAAI,IAAI,GAAG,cAAc,GAAG;EAC1B,GAAG,EAAE,IAAI;EACT,IAAI,EAAE,KAAK;EACX,OAAO,EAAE,OAAO;EAChB,OAAO,EAAE,OAAO;EAChB,QAAQ,EAAE,QAAQ;CACnB,CAAC;;;ACpDF,OAAS,GAAGT,IAAiB,CAAC;;;;;;ACI9B,IAAI,cAAc,GAAGA,SAAuB,CAAC,CAAC,CAAC;AAC/C,cAAc,GAAG,UAAU,IAAI,EAAE;EAC/B,IAAI,OAAO,GAAGmB,KAAI,CAAC,MAAM,KAAKA,KAAI,CAAC,MAAM,GAAGqC,QAAO,GAAG,EAAE,GAAG7C,OAAM,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;EAChF,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,IAAI,OAAO,CAAC,EAAE,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE4D,OAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAC3G;;ACRD;;;;AAIA,eAAc,GAAG,MAAM,CAAC,IAAI,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE;EAC/C,OAAOP,mBAAK,CAAC,CAAC,EAAEQ,YAAW,CAAC,CAAC;CAC9B;;ACND,OAAS,GAAG,MAAM,CAAC,qBAAqB,CAAC;;;;;;ACAzC;;;;AAIA,aAAc,GAAG,UAAU,EAAE,EAAE;EAC7B,IAAI,MAAM,GAAGC,WAAO,CAAC,EAAE,CAAC,CAAC;EACzB,IAAI,UAAU,GAAGC,WAAI,CAAC,CAAC,CAAC;EACxB,IAAI,UAAU,EAAE;IACd,IAAI,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;IAC7B,IAAI,MAAM,GAAGJ,UAAG,CAAC,CAAC,CAAC;IACnB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,GAAG,CAAC;IACR,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GACtF,CAAC,OAAO,MAAM,CAAC;CACjB;;ACVD,cAAc,GAAGtE,YAAyB,GAAG,MAAM,CAAC,gBAAgB,GAAG,SAAS,gBAAgB,CAAC,CAAC,EAAE,UAAU,EAAE;EAC9GI,SAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,IAAI,IAAI,GAAGqE,WAAO,CAAC,UAAU,CAAC,CAAC;EAC/B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EACzB,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,CAAC,CAAC;EACN,OAAO,MAAM,GAAG,CAAC,EAAElE,SAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,OAAO,CAAC,CAAC;CACV;;ACZD;;;;AAIA,IAAIoE,UAAQ,GAAG3E,UAAwB,CAAC,UAAU,CAAC,CAAC;AACpD,IAAI,KAAK,GAAG,YAAY,eAAe,CAAC;AACxC,IAAI4E,WAAS,GAAG,WAAW,CAAC;;;AAG5B,IAAI,UAAU,GAAG,YAAY;;EAE3B,IAAI,MAAM,GAAG1E,UAAwB,CAAC,QAAQ,CAAC,CAAC;EAChD,IAAI,CAAC,GAAGsE,YAAW,CAAC,MAAM,CAAC;EAC3B,IAAI,EAAE,GAAG,GAAG,CAAC;EACb,IAAI,EAAE,GAAG,GAAG,CAAC;EACb,IAAI,cAAc,CAAC;EACnB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;EAC9BrE,KAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;EACvC,MAAM,CAAC,GAAG,GAAG,aAAa,CAAC;;;EAG3B,cAAc,GAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;EAC/C,cAAc,CAAC,IAAI,EAAE,CAAC;EACtB,cAAc,CAAC,KAAK,CAAC,EAAE,GAAG,QAAQ,GAAG,EAAE,GAAG,mBAAmB,GAAG,EAAE,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC;EACrF,cAAc,CAAC,KAAK,EAAE,CAAC;EACvB,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC;EAC9B,OAAO,CAAC,EAAE,EAAE,OAAO,UAAU,CAACyE,WAAS,CAAC,CAACJ,YAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,OAAO,UAAU,EAAE,CAAC;CACrB,CAAC;;AAEF,iBAAc,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,MAAM,CAAC,CAAC,EAAE,UAAU,EAAE;EAC/D,IAAI,MAAM,CAAC;EACX,IAAI,CAAC,KAAK,IAAI,EAAE;IACd,KAAK,CAACI,WAAS,CAAC,GAAGxE,SAAQ,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;IACrB,KAAK,CAACwE,WAAS,CAAC,GAAG,IAAI,CAAC;;IAExB,MAAM,CAACD,UAAQ,CAAC,GAAG,CAAC,CAAC;GACtB,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;EAC7B,OAAO,UAAU,KAAK,SAAS,GAAG,MAAM,GAAGE,UAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;CACpE;;ACxCD;;AAEA,IAAIC,MAAI,GAAG9E,WAAyB,CAAC,CAAC,CAAC;AACvC,IAAI+E,UAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;;AAE3B,IAAI,WAAW,GAAG,OAAO,MAAM,IAAI,QAAQ,IAAI,MAAM,IAAI,MAAM,CAAC,mBAAmB;IAC/E,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;;AAE5C,IAAI,cAAc,GAAG,UAAU,EAAE,EAAE;EACjC,IAAI;IACF,OAAOD,MAAI,CAAC,EAAE,CAAC,CAAC;GACjB,CAAC,OAAO,CAAC,EAAE;IACV,OAAO,WAAW,CAAC,KAAK,EAAE,CAAC;GAC5B;CACF,CAAC;;AAEF,OAAgB,GAAG,SAAS,mBAAmB,CAAC,EAAE,EAAE;EAClD,OAAO,WAAW,IAAIC,UAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,iBAAiB,GAAG,cAAc,CAAC,EAAE,CAAC,GAAGD,MAAI,CAACjB,UAAS,CAAC,EAAE,CAAC,CAAC,CAAC;CACzG,CAAC;;;;;;AClBF,YAAY,CAAC;;;;;;;AAOb,IAAI,IAAI,GAAG7D,KAAkB,CAAC,GAAG,CAAC;;;;;;;;;;;;;;;;;;;AAmBlC,IAAIgF,MAAI,GAAGC,WAAK,CAAC,CAAC,CAAC;AACnB,IAAI1E,IAAE,GAAG2E,SAAG,CAAC,CAAC,CAAC;AACf,IAAI,IAAI,GAAGC,cAAO,CAAC,CAAC,CAAC;AACrB,IAAI,OAAO,GAAGxE,OAAM,CAAC,MAAM,CAAC;AAC5B,IAAI,KAAK,GAAGA,OAAM,CAAC,IAAI,CAAC;AACxB,IAAI,UAAU,GAAG,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC;AAC1C,IAAIiE,WAAS,GAAG,WAAW,CAAC;AAC5B,IAAI,MAAM,GAAG/D,IAAG,CAAC,SAAS,CAAC,CAAC;AAC5B,IAAI,YAAY,GAAGA,IAAG,CAAC,aAAa,CAAC,CAAC;AACtC,IAAI,MAAM,GAAG,EAAE,CAAC,oBAAoB,CAAC;AACrC,IAAI,cAAc,GAAGkD,OAAM,CAAC,iBAAiB,CAAC,CAAC;AAC/C,IAAI,UAAU,GAAGA,OAAM,CAAC,SAAS,CAAC,CAAC;AACnC,IAAI,SAAS,GAAGA,OAAM,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,WAAW,GAAG,MAAM,CAACa,WAAS,CAAC,CAAC;AACpC,IAAIQ,YAAU,GAAG,OAAO,OAAO,IAAI,UAAU,CAAC;AAC9C,IAAI,OAAO,GAAGzE,OAAM,CAAC,OAAO,CAAC;;AAE7B,IAAI,MAAM,GAAG,CAAC,OAAO,IAAI,CAAC,OAAO,CAACiE,WAAS,CAAC,IAAI,CAAC,OAAO,CAACA,WAAS,CAAC,CAAC,SAAS,CAAC;;;AAG9E,IAAI,aAAa,GAAG7B,YAAW,IAAIsC,MAAM,CAAC,YAAY;EACpD,OAAOC,aAAO,CAAC/E,IAAE,CAAC,EAAE,EAAE,GAAG,EAAE;IACzB,GAAG,EAAE,YAAY,EAAE,OAAOA,IAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;GAC3D,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;CACZ,CAAC,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;EACzB,IAAI,SAAS,GAAGyE,MAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;EACvC,IAAI,SAAS,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;EACvCzE,IAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;EACf,IAAI,SAAS,IAAI,EAAE,KAAK,WAAW,EAAEA,IAAE,CAAC,WAAW,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;CACtE,GAAGA,IAAE,CAAC;;AAEP,IAAI,IAAI,GAAG,UAAU,GAAG,EAAE;EACxB,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG+E,aAAO,CAAC,OAAO,CAACV,WAAS,CAAC,CAAC,CAAC;EACxD,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC;EACb,OAAO,GAAG,CAAC;CACZ,CAAC;;AAEF,IAAI,QAAQ,GAAGQ,YAAU,IAAI,OAAO,OAAO,CAAC,QAAQ,IAAI,QAAQ,GAAG,UAAU,EAAE,EAAE;EAC/E,OAAO,OAAO,EAAE,IAAI,QAAQ,CAAC;CAC9B,GAAG,UAAU,EAAE,EAAE;EAChB,OAAO,EAAE,YAAY,OAAO,CAAC;CAC9B,CAAC;;AAEF,IAAI,eAAe,GAAG,SAAS,cAAc,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;EACxD,IAAI,EAAE,KAAK,WAAW,EAAE,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;EAC3DhF,SAAQ,CAAC,EAAE,CAAC,CAAC;EACb,GAAG,GAAGC,YAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;EAC7BD,SAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,IAAIK,IAAG,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;IACxB,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE;MACjB,IAAI,CAACA,IAAG,CAAC,EAAE,EAAE,MAAM,CAAC,EAAEF,IAAE,CAAC,EAAE,EAAE,MAAM,EAAEC,aAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACxD,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KACxB,MAAM;MACL,IAAIC,IAAG,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;MAChE,CAAC,GAAG6E,aAAO,CAAC,CAAC,EAAE,EAAE,UAAU,EAAE9E,aAAU,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;KACtD,CAAC,OAAO,aAAa,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;GACpC,CAAC,OAAOD,IAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC;AACF,IAAI,iBAAiB,GAAG,SAAS,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE;EACvDH,SAAQ,CAAC,EAAE,CAAC,CAAC;EACb,IAAI,IAAI,GAAGmF,SAAQ,CAAC,CAAC,GAAG1B,UAAS,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;EACpB,IAAI,GAAG,CAAC;EACR,OAAO,CAAC,GAAG,CAAC,EAAE,eAAe,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC3D,OAAO,EAAE,CAAC;CACX,CAAC;AACF,IAAI,OAAO,GAAG,SAAS2B,SAAM,CAAC,EAAE,EAAE,CAAC,EAAE;EACnC,OAAO,CAAC,KAAK,SAAS,GAAGF,aAAO,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAACA,aAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC1E,CAAC;AACF,IAAI,qBAAqB,GAAG,SAAS,oBAAoB,CAAC,GAAG,EAAE;EAC7D,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,GAAGjF,YAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;EACxD,IAAI,IAAI,KAAK,WAAW,IAAII,IAAG,CAAC,UAAU,EAAE,GAAG,CAAC,IAAI,CAACA,IAAG,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,OAAO,KAAK,CAAC;EACvF,OAAO,CAAC,IAAI,CAACA,IAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAACA,IAAG,CAAC,UAAU,EAAE,GAAG,CAAC,IAAIA,IAAG,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;CAC3G,CAAC;AACF,IAAI,yBAAyB,GAAG,SAAS,wBAAwB,CAAC,EAAE,EAAE,GAAG,EAAE;EACzE,EAAE,GAAGoD,UAAS,CAAC,EAAE,CAAC,CAAC;EACnB,GAAG,GAAGxD,YAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;EAC7B,IAAI,EAAE,KAAK,WAAW,IAAII,IAAG,CAAC,UAAU,EAAE,GAAG,CAAC,IAAI,CAACA,IAAG,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,OAAO;EAC/E,IAAI,CAAC,GAAGuE,MAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;EACtB,IAAI,CAAC,IAAIvE,IAAG,CAAC,UAAU,EAAE,GAAG,CAAC,IAAI,EAAEA,IAAG,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;EAC5F,OAAO,CAAC,CAAC;CACV,CAAC;AACF,IAAI,oBAAoB,GAAG,SAAS,mBAAmB,CAAC,EAAE,EAAE;EAC1D,IAAI,KAAK,GAAG,IAAI,CAACoD,UAAS,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,GAAG,CAAC;EACR,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;IACvB,IAAI,CAACpD,IAAG,CAAC,UAAU,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC1F,CAAC,OAAO,MAAM,CAAC;CACjB,CAAC;AACF,IAAI,sBAAsB,GAAG,SAAS,qBAAqB,CAAC,EAAE,EAAE;EAC9D,IAAI,KAAK,GAAG,EAAE,KAAK,WAAW,CAAC;EAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,SAAS,GAAGoD,UAAS,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,IAAI,CAAC,GAAG,CAAC,CAAC;EACV,IAAI,GAAG,CAAC;EACR,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;IACvB,IAAIpD,IAAG,CAAC,UAAU,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,GAAGA,IAAG,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;GAC/G,CAAC,OAAO,MAAM,CAAC;CACjB,CAAC;;;AAGF,IAAI,CAAC2E,YAAU,EAAE;EACf,OAAO,GAAG,SAAS,MAAM,GAAG;IAC1B,IAAI,IAAI,YAAY,OAAO,EAAE,MAAM,SAAS,CAAC,8BAA8B,CAAC,CAAC;IAC7E,IAAI,GAAG,GAAGxE,IAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;IAC/D,IAAI,IAAI,GAAG,UAAU,KAAK,EAAE;MAC1B,IAAI,IAAI,KAAK,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;MACtD,IAAIH,IAAG,CAAC,IAAI,EAAE,MAAM,CAAC,IAAIA,IAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;MAC3E,aAAa,CAAC,IAAI,EAAE,GAAG,EAAED,aAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;KAChD,CAAC;IACF,IAAIuC,YAAW,IAAI,MAAM,EAAE,aAAa,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9F,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;GAClB,CAAC;EACF/B,SAAQ,CAAC,OAAO,CAAC4D,WAAS,CAAC,EAAE,UAAU,EAAE,SAAS,QAAQ,GAAG;IAC3D,OAAO,IAAI,CAAC,EAAE,CAAC;GAChB,CAAC,CAAC;;EAEHK,WAAK,CAAC,CAAC,GAAG,yBAAyB,CAAC;EACpCC,SAAG,CAAC,CAAC,GAAG,eAAe,CAAC;EACxBhF,WAAyB,CAAC,CAAC,GAAGiF,cAAO,CAAC,CAAC,GAAG,oBAAoB,CAAC;EAC/DhF,UAAwB,CAAC,CAAC,GAAG,qBAAqB,CAAC;EACnDiD,WAAyB,CAAC,CAAC,GAAG,sBAAsB,CAAC;;EAErD,IAAIL,YAAW,IAAI,CAACM,QAAqB,EAAE;IACzCrC,SAAQ,CAAC,WAAW,EAAE,sBAAsB,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;GAC5E;;EAEDuD,OAAM,CAAC,CAAC,GAAG,UAAU,IAAI,EAAE;IACzB,OAAO,IAAI,CAAC1D,IAAG,CAAC,IAAI,CAAC,CAAC,CAAC;GACxB,CAAC;CACH;;AAEDe,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAACwD,YAAU,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;;AAE9E,KAAK,IAAI,UAAU,GAAG;;EAEpB,gHAAgH;EAChH,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,EAAEvE,IAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEjE,KAAK,IAAI,gBAAgB,GAAGmD,WAAK,CAACnD,IAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,GAAG4E,UAAS,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEpH7D,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAACwD,YAAU,EAAE,QAAQ,EAAE;;EAErD,KAAK,EAAE,UAAU,GAAG,EAAE;IACpB,OAAO3E,IAAG,CAAC,cAAc,EAAE,GAAG,IAAI,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC;QACnB,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;GACxC;;EAED,MAAM,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE;IAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,SAAS,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC;IAC/D,KAAK,IAAI,GAAG,IAAI,cAAc,EAAE,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,OAAO,GAAG,CAAC;GAC7E;EACD,SAAS,EAAE,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC,EAAE;EACzC,SAAS,EAAE,YAAY,EAAE,MAAM,GAAG,KAAK,CAAC,EAAE;CAC3C,CAAC,CAAC;;AAEHmB,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,GAAG,CAACwD,YAAU,EAAE,QAAQ,EAAE;;EAErD,MAAM,EAAE,OAAO;;EAEf,cAAc,EAAE,eAAe;;EAE/B,gBAAgB,EAAE,iBAAiB;;EAEnC,wBAAwB,EAAE,yBAAyB;;EAEnD,mBAAmB,EAAE,oBAAoB;;EAEzC,qBAAqB,EAAE,sBAAsB;CAC9C,CAAC,CAAC;;;AAGH,KAAK,IAAIxD,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,IAAI,CAACwD,YAAU,IAAIC,MAAM,CAAC,YAAY;EAC1E,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC;;;;EAIlB,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;CACrG,CAAC,CAAC,EAAE,MAAM,EAAE;EACX,SAAS,EAAE,SAAS,SAAS,CAAC,EAAE,EAAE;IAChC,IAAI,EAAE,KAAK,SAAS,IAAI,QAAQ,CAAC,EAAE,CAAC,EAAE,OAAO;IAC7C,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;IAChB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,QAAQ,EAAE,SAAS,CAAC;IACxB,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACnB,IAAI,OAAO,QAAQ,IAAI,UAAU,EAAE,SAAS,GAAG,QAAQ,CAAC;IACxD,IAAI,SAAS,IAAI,CAAC/D,QAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE;MACpE,IAAI,SAAS,EAAE,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;MACxD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;KACpC,CAAC;IACF,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;IACnB,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;GACtC;CACF,CAAC,CAAC;;;AAGH,OAAO,CAACsD,WAAS,CAAC,CAAC,YAAY,CAAC,IAAItB,KAAkB,CAAC,OAAO,CAACsB,WAAS,CAAC,EAAE,YAAY,EAAE,OAAO,CAACA,WAAS,CAAC,CAAC,OAAO,CAAC,CAAC;;AAErHP,eAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;;AAElCA,eAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;;AAEnCA,eAAc,CAAC1D,OAAM,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;;ACvO1C,SAAS,OAAO,CAAC,GAAG,EAAE;EACpB,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE;IACvE,OAAO,GAAG,UAAU,GAAG,EAAE;MACvB,OAAO,OAAO,GAAG,CAAC;KACnB,CAAC;GACH,MAAM;IACL,OAAO,GAAG,UAAU,GAAG,EAAE;MACvB,OAAO,GAAG,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,OAAO,GAAG,CAAC;KAC9H,CAAC;GACH;;EAED,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;CACrB;;AAED,AA6DA,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;CACtB;;AAED,SAAS,eAAe,CAAC,GAAG,EAAE;EAC5B,IAAI,KAAK,EAAE,IAAI,CAAC;;EAEhB,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE;IACtB,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;MAC5C,IAAI,OAAO,GAAG;QACZ,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,GAAG;QACR,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI;OACX,CAAC;;MAEF,IAAI,IAAI,EAAE;QACR,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;OAC5B,MAAM;QACL,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;OAClB;KACF,CAAC,CAAC;GACJ;;EAED,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE;IACxB,IAAI;MACF,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;MACzB,IAAI,YAAY,GAAG,KAAK,YAAY,WAAW,CAAC;MAChD,OAAO,CAAC,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;QACxE,IAAI,YAAY,EAAE;UAChB,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;UACpB,OAAO;SACR;;QAED,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;OAChD,EAAE,UAAU,GAAG,EAAE;QAChB,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;OACtB,CAAC,CAAC;KACJ,CAAC,OAAO,GAAG,EAAE;MACZ,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KACtB;GACF;;EAED,SAAS,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE;IAC3B,QAAQ,IAAI;MACV,KAAK,QAAQ;QACX,KAAK,CAAC,OAAO,CAAC;UACZ,KAAK,EAAE,KAAK;UACZ,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,MAAM;;MAER,KAAK,OAAO;QACV,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpB,MAAM;;MAER;QACE,KAAK,CAAC,OAAO,CAAC;UACZ,KAAK,EAAE,KAAK;UACZ,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;QACH,MAAM;KACT;;IAED,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;;IAEnB,IAAI,KAAK,EAAE;MACT,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;KAC9B,MAAM;MACL,IAAI,GAAG,IAAI,CAAC;KACb;GACF;;EAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;EAEpB,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,UAAU,EAAE;IACpC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;GACzB;CACF;;AAED,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,aAAa,EAAE;EACxD,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,YAAY;IAC5D,OAAO,IAAI,CAAC;GACb,CAAC;CACH;;AAED,eAAe,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,GAAG,EAAE;EAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;CAClC,CAAC;;AAEF,eAAe,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE;EAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;CACnC,CAAC;;AAEF,eAAe,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,GAAG,EAAE;EAChD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;CACpC,CAAC;;AAEF,AA8DA,SAAS,iBAAiB,CAAC,EAAE,EAAE;EAC7B,OAAO,YAAY;IACjB,IAAI,IAAI,GAAG,IAAI;QACX,IAAI,GAAG,SAAS,CAAC;IACrB,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;MAC5C,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;MAE/B,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE;QACtB,IAAI;UACF,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;UACzB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SACxB,CAAC,OAAO,KAAK,EAAE;UACd,MAAM,CAAC,KAAK,CAAC,CAAC;UACd,OAAO;SACR;;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;UACb,OAAO,CAAC,KAAK,CAAC,CAAC;SAChB,MAAM;UACL,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC5C;OACF;;MAED,SAAS,KAAK,CAAC,KAAK,EAAE;QACpB,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;OACrB;;MAED,SAAS,MAAM,CAAC,GAAG,EAAE;QACnB,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;OACpB;;MAED,KAAK,EAAE,CAAC;KACT,CAAC,CAAC;GACJ,CAAC;CACH;;AAED,SAAS,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE;EAC9C,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;IACtC,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;GAC1D;CACF;;AAED,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;EACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrC,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1B,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;IACvD,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;IAC/B,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;IACtD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;GAC3D;CACF;;AAED,SAAS,YAAY,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;EAC1D,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;EACrE,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;EAC7D,OAAO,WAAW,CAAC;CACpB;;AAED,AAgGA,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE;EACvC,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE;IAC3D,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;GAC3E;;EAED,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE;IACrE,WAAW,EAAE;MACX,KAAK,EAAE,QAAQ;MACf,UAAU,EAAE,KAAK;MACjB,QAAQ,EAAE,IAAI;MACd,YAAY,EAAE,IAAI;KACnB;GACF,CAAC,CAAC;EACH,IAAI,UAAU,EAAE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,SAAS,GAAG,UAAU,CAAC;CACvH;;AAED,AAyEA,SAAS,0BAA0B,CAAC,IAAI,EAAE,IAAI,EAAE;EAC9C,IAAI,IAAI,KAAK,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,UAAU,CAAC,EAAE;IACpE,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,IAAI,EAAE;IACT,MAAM,IAAI,cAAc,CAAC,2DAA2D,CAAC,CAAC;GACvF;;EAED,OAAO,IAAI,CAAC;CACb;;AAED,AAsBA,SAAS,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE;EAC9B,IAAI,IAAI,GAAG,EAAE,CAAC;EACd,IAAI,EAAE,GAAG,IAAI,CAAC;EACd,IAAI,EAAE,GAAG,KAAK,CAAC;EACf,IAAI,EAAE,GAAG,SAAS,CAAC;;EAEnB,IAAI;IACF,KAAK,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,EAAE;MAClF,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;MAEpB,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM;KACnC;GACF,CAAC,OAAO,GAAG,EAAE;IACZ,EAAE,GAAG,IAAI,CAAC;IACV,EAAE,GAAG,GAAG,CAAC;GACV,SAAS;IACR,IAAI;MACF,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;KACjD,SAAS;MACR,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC;KAClB;GACF;;EAED,OAAO,IAAI,CAAC;CACb;;AAED,SAAS,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE;EAC9B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACtB,OAAO,GAAG,CAAC;GACZ,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE;IACzC,OAAO,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;GAC/B,MAAM;IACL,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;GAC7E;CACF;;AAED,AA6CA,SAAS,kBAAkB,CAAC,GAAG,EAAE;EAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEpF,OAAO,IAAI,CAAC;GACb,MAAM;IACL,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GACxB;CACF;;AC9lBD;;;;;;;;;AAUA,CAAE,UAASA,MAAT,EAAiB;;;MAGb+E,KAAKC,OAAOC,SAAhB;MACIC,SAASH,GAAGI,cAAhB;MACIC,SAAJ,CALiB;;MAMbC,UAAU,OAAOC,MAAP,KAAkB,UAAlB,GAA+BA,MAA/B,GAAwC,EAAtD;MACIC,iBAAiBF,QAAQG,QAAR,IAAoB,YAAzC;MACIC,sBAAsBJ,QAAQK,aAAR,IAAyB,iBAAnD;MACIC,oBAAoBN,QAAQO,WAAR,IAAuB,eAA/C;MAEIC,WAAW,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAjC;MACIC,UAAU/F,OAAOgG,kBAArB;;MACID,OAAJ,EAAa;QACPF,QAAJ,EAAc;;;aAGLI,OAAP,GAAiBF,OAAjB;KAJS;;;;;GAbI;;;;YA0BP/F,OAAOgG,kBAAP,GAA4BH,WAAWC,OAAOG,OAAlB,GAA4B,EAAlE;;WAESC,IAAT,CAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,WAAtC,EAAmD;;QAE7CC,iBAAiBH,WAAWA,QAAQnB,SAAR,YAA6BuB,SAAxC,GAAoDJ,OAApD,GAA8DI,SAAnF;QACIC,YAAYzB,OAAOH,MAAP,CAAc0B,eAAetB,SAA7B,CAAhB;QACIyB,UAAU,IAAIC,OAAJ,CAAYL,eAAe,EAA3B,CAAd,CAJiD;;;cAQvCM,OAAV,GAAoBC,iBAAiBV,OAAjB,EAA0BE,IAA1B,EAAgCK,OAAhC,CAApB;WAEOD,SAAP;;;UAEMP,IAAR,GAAeA,IAAf,CAxCiB;;;;;;;;;;;WAoDRY,QAAT,CAAkBC,EAAlB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;QAC1B;aACK;cAAQ,QAAR;aAAuBF,GAAGrF,IAAH,CAAQsF,GAAR,EAAaC,GAAb;OAA9B;KADF,CAEE,OAAOC,GAAP,EAAY;aACL;cAAQ,OAAR;aAAsBA;OAA7B;;;;MAIAC,yBAAyB,gBAA7B;MACIC,yBAAyB,gBAA7B;MACIC,oBAAoB,WAAxB;MACIC,oBAAoB,WAAxB,CA/DiB;;;MAmEbC,mBAAmB,EAAvB,CAnEiB;;;;;WAyERf,SAAT,GAAqB;;WACZgB,iBAAT,GAA6B;;WACpBC,0BAAT,GAAsC,EA3ErB;;;;MA+EbC,oBAAoB,EAAxB;;oBACkBnC,cAAlB,IAAoC,YAAY;WACvC,IAAP;GADF;;MAIIoC,WAAW3C,OAAO4C,cAAtB;MACIC,0BAA0BF,YAAYA,SAASA,SAASG,OAAO,EAAP,CAAT,CAAT,CAA1C;;MACID,2BACAA,4BAA4B9C,EAD5B,IAEAG,OAAOxD,IAAP,CAAYmG,uBAAZ,EAAqCtC,cAArC,CAFJ,EAE0D;;;wBAGpCsC,uBAApB;;;MAGEE,KAAKN,2BAA2BxC,SAA3B,GACPuB,UAAUvB,SAAV,GAAsBD,OAAOH,MAAP,CAAc6C,iBAAd,CADxB;oBAEkBzC,SAAlB,GAA8B8C,GAAGC,WAAH,GAAiBP,0BAA/C;6BAC2BO,WAA3B,GAAyCR,iBAAzC;6BAC2B7B,iBAA3B,IACE6B,kBAAkBS,WAAlB,GAAgC,mBADlC,CAlGiB;;;WAuGRC,qBAAT,CAA+BjD,SAA/B,EAA0C;KACvC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4BkD,OAA5B,CAAoC,UAASC,MAAT,EAAiB;gBACzCA,MAAV,IAAoB,UAASnB,GAAT,EAAc;eACzB,KAAKL,OAAL,CAAawB,MAAb,EAAqBnB,GAArB,CAAP;OADF;KADF;;;UAOMoB,mBAAR,GAA8B,UAASC,MAAT,EAAiB;QACzCC,OAAO,OAAOD,MAAP,KAAkB,UAAlB,IAAgCA,OAAON,WAAlD;WACOO,OACHA,SAASf,iBAAT;;KAGCe,KAAKN,WAAL,IAAoBM,KAAKC,IAA1B,MAAoC,mBAJjC,GAKH,KALJ;GAFF;;UAUQC,IAAR,GAAe,UAASH,MAAT,EAAiB;QAC1BtD,OAAO0D,cAAX,EAA2B;aAClBA,cAAP,CAAsBJ,MAAtB,EAA8Bb,0BAA9B;KADF,MAEO;aACEkB,SAAP,GAAmBlB,0BAAnB;;UACI,EAAE9B,qBAAqB2C,MAAvB,CAAJ,EAAoC;eAC3B3C,iBAAP,IAA4B,mBAA5B;;;;WAGGV,SAAP,GAAmBD,OAAOH,MAAP,CAAckD,EAAd,CAAnB;WACOO,MAAP;GAVF,CAzHiB;;;;;;UA0ITM,KAAR,GAAgB,UAAS3B,GAAT,EAAc;WACrB;eAAWA;KAAlB;GADF;;WAIS4B,aAAT,CAAuBpC,SAAvB,EAAkC;aACvB5E,MAAT,CAAgBuG,MAAhB,EAAwBnB,GAAxB,EAA6B6B,OAA7B,EAAsCC,MAAtC,EAA8C;UACxCC,SAASlC,SAASL,UAAU2B,MAAV,CAAT,EAA4B3B,SAA5B,EAAuCQ,GAAvC,CAAb;;UACI+B,OAAOC,IAAP,KAAgB,OAApB,EAA6B;eACpBD,OAAO/B,GAAd;OADF,MAEO;YACDiC,SAASF,OAAO/B,GAApB;YACIkC,QAAQD,OAAOC,KAAnB;;YACIA,SACAC,QAAOD,KAAP,MAAiB,QADjB,IAEAjE,OAAOxD,IAAP,CAAYyH,KAAZ,EAAmB,SAAnB,CAFJ,EAEmC;iBAC1BnH,QAAQ8G,OAAR,CAAgBK,MAAME,OAAtB,EAA+BC,IAA/B,CAAoC,UAASH,KAAT,EAAgB;mBAClD,MAAP,EAAeA,KAAf,EAAsBL,OAAtB,EAA+BC,MAA/B;WADK,EAEJ,UAAS7B,GAAT,EAAc;mBACR,OAAP,EAAgBA,GAAhB,EAAqB4B,OAArB,EAA8BC,MAA9B;WAHK,CAAP;;;eAOK/G,QAAQ8G,OAAR,CAAgBK,KAAhB,EAAuBG,IAAvB,CAA4B,UAASC,SAAT,EAAoB;;;;;;;;;;;;;;;;iBAgB9CJ,KAAP,GAAeI,SAAf;kBACQL,MAAR;SAjBK,EAkBJH,MAlBI,CAAP;;;;QAsBAS,eAAJ;;aAESC,OAAT,CAAiBrB,MAAjB,EAAyBnB,GAAzB,EAA8B;eACnByC,0BAAT,GAAsC;eAC7B,IAAI1H,OAAJ,CAAY,UAAS8G,OAAT,EAAkBC,MAAlB,EAA0B;iBACpCX,MAAP,EAAenB,GAAf,EAAoB6B,OAApB,EAA6BC,MAA7B;SADK,CAAP;;;aAKKS;;;;;;;;;;;;wBAaaA,gBAAgBF,IAAhB,CAChBI,0BADgB;;gCAAA,CAAlB,GAKIA,4BAlBN;KAjD8B;;;;SAwE3B9C,OAAL,GAAe6C,OAAf;;;wBAGoBZ,cAAc5D,SAApC;;gBACcA,SAAd,CAAwBQ,mBAAxB,IAA+C,YAAY;WAClD,IAAP;GADF;;UAGQoD,aAAR,GAAwBA,aAAxB,CA7NiB;;;;UAkOTc,KAAR,GAAgB,UAASxD,OAAT,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;QACxDsD,OAAO,IAAIf,aAAJ,CACT3C,KAAKC,OAAL,EAAcC,OAAd,EAAuBC,IAAvB,EAA6BC,WAA7B,CADS,CAAX;WAIOP,QAAQsC,mBAAR,CAA4BjC,OAA5B,IACHwD,IADG;MAEHA,KAAKC,IAAL,GAAYP,IAAZ,CAAiB,UAASJ,MAAT,EAAiB;aACzBA,OAAOY,IAAP,GAAcZ,OAAOC,KAArB,GAA6BS,KAAKC,IAAL,EAApC;KADF,CAFJ;GALF;;WAYShD,gBAAT,CAA0BV,OAA1B,EAAmCE,IAAnC,EAAyCK,OAAzC,EAAkD;QAC5CqD,QAAQ5C,sBAAZ;WAEO,SAAStF,MAAT,CAAgBuG,MAAhB,EAAwBnB,GAAxB,EAA6B;UAC9B8C,UAAU1C,iBAAd,EAAiC;cACzB,IAAI2C,KAAJ,CAAU,8BAAV,CAAN;;;UAGED,UAAUzC,iBAAd,EAAiC;YAC3Bc,WAAW,OAAf,EAAwB;gBAChBnB,GAAN;SAF6B;;;;eAOxBgD,YAAP;;;cAGM7B,MAAR,GAAiBA,MAAjB;cACQnB,GAAR,GAAcA,GAAd;;aAEO,IAAP,EAAa;YACPiD,WAAWxD,QAAQwD,QAAvB;;YACIA,QAAJ,EAAc;cACRC,iBAAiBC,oBAAoBF,QAApB,EAA8BxD,OAA9B,CAArB;;cACIyD,cAAJ,EAAoB;gBACdA,mBAAmB5C,gBAAvB,EAAyC;mBAClC4C,cAAP;;;;YAIAzD,QAAQ0B,MAAR,KAAmB,MAAvB,EAA+B;;;kBAGrBiC,IAAR,GAAe3D,QAAQ4D,KAAR,GAAgB5D,QAAQO,GAAvC;SAHF,MAKO,IAAIP,QAAQ0B,MAAR,KAAmB,OAAvB,EAAgC;cACjC2B,UAAU5C,sBAAd,EAAsC;oBAC5BG,iBAAR;kBACMZ,QAAQO,GAAd;;;kBAGMsD,iBAAR,CAA0B7D,QAAQO,GAAlC;SANK,MAQA,IAAIP,QAAQ0B,MAAR,KAAmB,QAAvB,EAAiC;kBAC9BoC,MAAR,CAAe,QAAf,EAAyB9D,QAAQO,GAAjC;;;gBAGMI,iBAAR;YAEI2B,SAASlC,SAASX,OAAT,EAAkBE,IAAlB,EAAwBK,OAAxB,CAAb;;YACIsC,OAAOC,IAAP,KAAgB,QAApB,EAA8B;;;kBAGpBvC,QAAQoD,IAAR,GACJxC,iBADI,GAEJF,sBAFJ;;cAII4B,OAAO/B,GAAP,KAAeM,gBAAnB,EAAqC;;;;iBAI9B;mBACEyB,OAAO/B,GADT;kBAECP,QAAQoD;WAFhB;SAXF,MAgBO,IAAId,OAAOC,IAAP,KAAgB,OAApB,EAA6B;kBAC1B3B,iBAAR,CADkC;;;kBAI1Bc,MAAR,GAAiB,OAAjB;kBACQnB,GAAR,GAAc+B,OAAO/B,GAArB;;;KArEN;GAjPe;;;;;;WAgURmD,mBAAT,CAA6BF,QAA7B,EAAuCxD,OAAvC,EAAgD;QAC1C0B,SAAS8B,SAAS1E,QAAT,CAAkBkB,QAAQ0B,MAA1B,CAAb;;QACIA,WAAWhD,SAAf,EAA0B;;;cAGhB8E,QAAR,GAAmB,IAAnB;;UAEIxD,QAAQ0B,MAAR,KAAmB,OAAvB,EAAgC;YAC1B8B,SAAS1E,QAAT,CAAkBiF,MAAtB,EAA8B;;;kBAGpBrC,MAAR,GAAiB,QAAjB;kBACQnB,GAAR,GAAc7B,SAAd;8BACoB8E,QAApB,EAA8BxD,OAA9B;;cAEIA,QAAQ0B,MAAR,KAAmB,OAAvB,EAAgC;;;mBAGvBb,gBAAP;;;;gBAIIa,MAAR,GAAiB,OAAjB;gBACQnB,GAAR,GAAc,IAAI5E,SAAJ,CACZ,gDADY,CAAd;;;aAIKkF,gBAAP;;;QAGEyB,SAASlC,SAASsB,MAAT,EAAiB8B,SAAS1E,QAA1B,EAAoCkB,QAAQO,GAA5C,CAAb;;QAEI+B,OAAOC,IAAP,KAAgB,OAApB,EAA6B;cACnBb,MAAR,GAAiB,OAAjB;cACQnB,GAAR,GAAc+B,OAAO/B,GAArB;cACQiD,QAAR,GAAmB,IAAnB;aACO3C,gBAAP;;;QAGEmD,OAAO1B,OAAO/B,GAAlB;;QAEI,CAAEyD,IAAN,EAAY;cACFtC,MAAR,GAAiB,OAAjB;cACQnB,GAAR,GAAc,IAAI5E,SAAJ,CAAc,kCAAd,CAAd;cACQ6H,QAAR,GAAmB,IAAnB;aACO3C,gBAAP;;;QAGEmD,KAAKZ,IAAT,EAAe;;;cAGLI,SAASS,UAAjB,IAA+BD,KAAKvB,KAApC,CAHa;;cAMLU,IAAR,GAAeK,SAASU,OAAxB,CANa;;;;;;;UAcTlE,QAAQ0B,MAAR,KAAmB,QAAvB,EAAiC;gBACvBA,MAAR,GAAiB,MAAjB;gBACQnB,GAAR,GAAc7B,SAAd;;KAhBJ,MAmBO;;aAEEsF,IAAP;KArE4C;;;;YA0EtCR,QAAR,GAAmB,IAAnB;WACO3C,gBAAP;GA3Ye;;;;wBAgZKQ,EAAtB;KAEGpC,iBAAH,IAAwB,WAAxB,CAlZiB;;;;;;KAyZdJ,cAAH,IAAqB,YAAW;WACvB,IAAP;GADF;;KAIGnB,QAAH,GAAc,YAAW;WAChB,oBAAP;GADF;;WAISyG,YAAT,CAAsBC,IAAtB,EAA4B;QACtBC,QAAQ;cAAUD,KAAK,CAAL;KAAtB;;QAEI,KAAKA,IAAT,EAAe;YACPE,QAAN,GAAiBF,KAAK,CAAL,CAAjB;;;QAGE,KAAKA,IAAT,EAAe;YACPG,UAAN,GAAmBH,KAAK,CAAL,CAAnB;YACMI,QAAN,GAAiBJ,KAAK,CAAL,CAAjB;;;SAGGK,UAAL,CAAgBC,IAAhB,CAAqBL,KAArB;;;WAGOM,aAAT,CAAuBN,KAAvB,EAA8B;QACxB/B,SAAS+B,MAAMO,UAAN,IAAoB,EAAjC;WACOrC,IAAP,GAAc,QAAd;WACOD,OAAO/B,GAAd;UACMqE,UAAN,GAAmBtC,MAAnB;;;WAGOrC,OAAT,CAAiBL,WAAjB,EAA8B;;;;SAIvB6E,UAAL,GAAkB,CAAC;cAAU;KAAX,CAAlB;gBACYhD,OAAZ,CAAoB0C,YAApB,EAAkC,IAAlC;SACKU,KAAL,CAAW,IAAX;;;UAGMC,IAAR,GAAe,UAASC,MAAT,EAAiB;QAC1BD,OAAO,EAAX;;SACK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;WACjBL,IAAL,CAAUM,GAAV;;;SAEGC,OAAL,GAL8B;;;WASvB,SAAS9B,IAAT,GAAgB;aACd2B,KAAKI,MAAZ,EAAoB;YACdF,MAAMF,KAAKK,GAAL,EAAV;;YACIH,OAAOD,MAAX,EAAmB;eACZtC,KAAL,GAAauC,GAAb;eACK5B,IAAL,GAAY,KAAZ;iBACOD,IAAP;;OANiB;;;;;WAahBC,IAAL,GAAY,IAAZ;aACOD,IAAP;KAdF;GATF;;WA2BS/B,MAAT,CAAgBgE,QAAhB,EAA0B;QACpBA,QAAJ,EAAc;UACRC,iBAAiBD,SAASvG,cAAT,CAArB;;UACIwG,cAAJ,EAAoB;eACXA,eAAerK,IAAf,CAAoBoK,QAApB,CAAP;;;UAGE,OAAOA,SAASjC,IAAhB,KAAyB,UAA7B,EAAyC;eAChCiC,QAAP;;;UAGE,CAACE,MAAMF,SAASF,MAAf,CAAL,EAA6B;YACvBK,IAAI,CAAC,CAAT;YAAYpC,OAAO,SAASA,IAAT,GAAgB;iBAC1B,EAAEoC,CAAF,GAAMH,SAASF,MAAtB,EAA8B;gBACxB1G,OAAOxD,IAAP,CAAYoK,QAAZ,EAAsBG,CAAtB,CAAJ,EAA8B;mBACvB9C,KAAL,GAAa2C,SAASG,CAAT,CAAb;mBACKnC,IAAL,GAAY,KAAZ;qBACOD,IAAP;;;;eAICV,KAAL,GAAa/D,SAAb;eACK0E,IAAL,GAAY,IAAZ;iBAEOD,IAAP;SAZF;;eAeOA,KAAKA,IAAL,GAAYA,IAAnB;;KA3BoB;;;WAgCjB;YAAQI;KAAf;;;UAEMnC,MAAR,GAAiBA,MAAjB;;WAESmC,UAAT,GAAsB;WACb;aAAS7E,SAAT;YAA0B;KAAjC;;;UAGMH,SAAR,GAAoB;iBACL0B,OADK;WAGX,eAASuF,aAAT,EAAwB;WACxBC,IAAL,GAAY,CAAZ;WACKtC,IAAL,GAAY,CAAZ,CAF6B;;;WAKxBQ,IAAL,GAAY,KAAKC,KAAL,GAAalF,SAAzB;WACK0E,IAAL,GAAY,KAAZ;WACKI,QAAL,GAAgB,IAAhB;WAEK9B,MAAL,GAAc,MAAd;WACKnB,GAAL,GAAW7B,SAAX;WAEK+F,UAAL,CAAgBhD,OAAhB,CAAwBkD,aAAxB;;UAEI,CAACa,aAAL,EAAoB;aACb,IAAI1D,IAAT,IAAiB,IAAjB,EAAuB;;cAEjBA,KAAK4D,MAAL,CAAY,CAAZ,MAAmB,GAAnB,IACAlH,OAAOxD,IAAP,CAAY,IAAZ,EAAkB8G,IAAlB,CADA,IAEA,CAACwD,MAAM,CAACxD,KAAK6D,KAAL,CAAW,CAAX,CAAP,CAFL,EAE4B;iBACrB7D,IAAL,IAAapD,SAAb;;;;KAvBU;UA6BZ,gBAAW;WACV0E,IAAL,GAAY,IAAZ;UAEIwC,YAAY,KAAKnB,UAAL,CAAgB,CAAhB,CAAhB;UACIoB,aAAaD,UAAUhB,UAA3B;;UACIiB,WAAWtD,IAAX,KAAoB,OAAxB,EAAiC;cACzBsD,WAAWtF,GAAjB;;;aAGK,KAAKuF,IAAZ;KAtCgB;uBAyCC,2BAASC,SAAT,EAAoB;UACjC,KAAK3C,IAAT,EAAe;cACP2C,SAAN;;;UAGE/F,UAAU,IAAd;;eACSgG,MAAT,CAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;eACpB3D,IAAP,GAAc,OAAd;eACOhC,GAAP,GAAawF,SAAb;gBACQ5C,IAAR,GAAe8C,GAAf;;YAEIC,MAAJ,EAAY;;;kBAGFxE,MAAR,GAAiB,MAAjB;kBACQnB,GAAR,GAAc7B,SAAd;;;eAGK,CAAC,CAAEwH,MAAV;;;WAGG,IAAIX,IAAI,KAAKd,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCK,KAAK,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;YAChDlB,QAAQ,KAAKI,UAAL,CAAgBc,CAAhB,CAAZ;YACIjD,SAAS+B,MAAMO,UAAnB;;YAEIP,MAAM8B,MAAN,KAAiB,MAArB,EAA6B;;;;iBAIpBH,OAAO,KAAP,CAAP;;;YAGE3B,MAAM8B,MAAN,IAAgB,KAAKV,IAAzB,EAA+B;cACzBW,WAAW5H,OAAOxD,IAAP,CAAYqJ,KAAZ,EAAmB,UAAnB,CAAf;cACIgC,aAAa7H,OAAOxD,IAAP,CAAYqJ,KAAZ,EAAmB,YAAnB,CAAjB;;cAEI+B,YAAYC,UAAhB,EAA4B;gBACtB,KAAKZ,IAAL,GAAYpB,MAAMC,QAAtB,EAAgC;qBACvB0B,OAAO3B,MAAMC,QAAb,EAAuB,IAAvB,CAAP;aADF,MAEO,IAAI,KAAKmB,IAAL,GAAYpB,MAAME,UAAtB,EAAkC;qBAChCyB,OAAO3B,MAAME,UAAb,CAAP;;WAJJ,MAOO,IAAI6B,QAAJ,EAAc;gBACf,KAAKX,IAAL,GAAYpB,MAAMC,QAAtB,EAAgC;qBACvB0B,OAAO3B,MAAMC,QAAb,EAAuB,IAAvB,CAAP;;WAFG,MAKA,IAAI+B,UAAJ,EAAgB;gBACjB,KAAKZ,IAAL,GAAYpB,MAAME,UAAtB,EAAkC;qBACzByB,OAAO3B,MAAME,UAAb,CAAP;;WAFG,MAKA;kBACC,IAAIjB,KAAJ,CAAU,wCAAV,CAAN;;;;KA/FU;YAqGV,gBAASf,IAAT,EAAehC,GAAf,EAAoB;WACrB,IAAIgF,IAAI,KAAKd,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCK,KAAK,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;YAChDlB,QAAQ,KAAKI,UAAL,CAAgBc,CAAhB,CAAZ;;YACIlB,MAAM8B,MAAN,IAAgB,KAAKV,IAArB,IACAjH,OAAOxD,IAAP,CAAYqJ,KAAZ,EAAmB,YAAnB,CADA,IAEA,KAAKoB,IAAL,GAAYpB,MAAME,UAFtB,EAEkC;cAC5B+B,eAAejC,KAAnB;;;;;UAKAiC,iBACC/D,SAAS,OAAT,IACAA,SAAS,UAFV,KAGA+D,aAAaH,MAAb,IAAuB5F,GAHvB,IAIAA,OAAO+F,aAAa/B,UAJxB,EAIoC;;;uBAGnB,IAAf;;;UAGEjC,SAASgE,eAAeA,aAAa1B,UAA5B,GAAyC,EAAtD;aACOrC,IAAP,GAAcA,IAAd;aACOhC,GAAP,GAAaA,GAAb;;UAEI+F,YAAJ,EAAkB;aACX5E,MAAL,GAAc,MAAd;aACKyB,IAAL,GAAYmD,aAAa/B,UAAzB;eACO1D,gBAAP;;;aAGK,KAAK0F,QAAL,CAAcjE,MAAd,CAAP;KApIgB;cAuIR,kBAASA,MAAT,EAAiBkC,QAAjB,EAA2B;UAC/BlC,OAAOC,IAAP,KAAgB,OAApB,EAA6B;cACrBD,OAAO/B,GAAb;;;UAGE+B,OAAOC,IAAP,KAAgB,OAAhB,IACAD,OAAOC,IAAP,KAAgB,UADpB,EACgC;aACzBY,IAAL,GAAYb,OAAO/B,GAAnB;OAFF,MAGO,IAAI+B,OAAOC,IAAP,KAAgB,QAApB,EAA8B;aAC9BuD,IAAL,GAAY,KAAKvF,GAAL,GAAW+B,OAAO/B,GAA9B;aACKmB,MAAL,GAAc,QAAd;aACKyB,IAAL,GAAY,KAAZ;OAHK,MAIA,IAAIb,OAAOC,IAAP,KAAgB,QAAhB,IAA4BiC,QAAhC,EAA0C;aAC1CrB,IAAL,GAAYqB,QAAZ;;;aAGK3D,gBAAP;KAvJgB;YA0JV,gBAAS0D,UAAT,EAAqB;WACtB,IAAIgB,IAAI,KAAKd,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCK,KAAK,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;YAChDlB,QAAQ,KAAKI,UAAL,CAAgBc,CAAhB,CAAZ;;YACIlB,MAAME,UAAN,KAAqBA,UAAzB,EAAqC;eAC9BgC,QAAL,CAAclC,MAAMO,UAApB,EAAgCP,MAAMG,QAAtC;wBACcH,KAAd;iBACOxD,gBAAP;;;KAhKY;aAqKT,gBAASsF,MAAT,EAAiB;WACnB,IAAIZ,IAAI,KAAKd,UAAL,CAAgBS,MAAhB,GAAyB,CAAtC,EAAyCK,KAAK,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;YAChDlB,QAAQ,KAAKI,UAAL,CAAgBc,CAAhB,CAAZ;;YACIlB,MAAM8B,MAAN,KAAiBA,MAArB,EAA6B;cACvB7D,SAAS+B,MAAMO,UAAnB;;cACItC,OAAOC,IAAP,KAAgB,OAApB,EAA6B;gBACvBiE,SAASlE,OAAO/B,GAApB;0BACc8D,KAAd;;;iBAEKmC,MAAP;;OAToB;;;;YAelB,IAAIlD,KAAJ,CAAU,uBAAV,CAAN;KApLgB;mBAuLH,uBAAS8B,QAAT,EAAmBnB,UAAnB,EAA+BC,OAA/B,EAAwC;WAChDV,QAAL,GAAgB;kBACJpC,OAAOgE,QAAP,CADI;oBAEFnB,UAFE;iBAGLC;OAHX;;UAMI,KAAKxC,MAAL,KAAgB,MAApB,EAA4B;;;aAGrBnB,GAAL,GAAW7B,SAAX;;;aAGKmC,gBAAP;;GApMJ;CAngBD;;;AA8sBE,YAAW;SAAS,IAAP;CAAd,MAAkC4F,SAAS,aAAT,GA9sBnC,CAAD;;ACVA;;;AAGA,IAAInJ,UAAQ,GAAG3E,UAAwB,CAAC,UAAU,CAAC,CAAC;AACpD,IAAI+N,aAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;AAEnC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,UAAU,CAAC,EAAE;EACrD,CAAC,GAAGtM,SAAQ,CAAC,CAAC,CAAC,CAAC;EAChB,IAAIhB,IAAG,CAAC,CAAC,EAAEkE,UAAQ,CAAC,EAAE,OAAO,CAAC,CAACA,UAAQ,CAAC,CAAC;EACzC,IAAI,OAAO,CAAC,CAAC,WAAW,IAAI,UAAU,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE;IACpE,OAAO,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC;GAChC,CAAC,OAAO,CAAC,YAAY,MAAM,GAAGoJ,aAAW,GAAG,IAAI,CAAC;CACnD;;ACZD,aAAc,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;EACtC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;CACvC;;ACFD,YAAY,CAAC;;;;AAIb,IAAI,iBAAiB,GAAG,EAAE,CAAC;;;AAG3B/N,KAAkB,CAAC,iBAAiB,EAAEE,IAAiB,CAAC,UAAU,CAAC,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;;AAEnG,eAAc,GAAG,UAAU,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE;EAClD,WAAW,CAAC,SAAS,GAAGsF,aAAM,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAEwI,aAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;EACjF3J,eAAc,CAAC,WAAW,EAAE,IAAI,GAAG,WAAW,CAAC,CAAC;CACjD;;ACZD,YAAY,CAAC;;;;;;;;;;AAUb,IAAIrC,UAAQ,GAAGhC,IAAiB,CAAC,UAAU,CAAC,CAAC;AAC7C,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC,IAAI,IAAI,MAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAC9C,IAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,IAAI,IAAI,GAAG,MAAM,CAAC;AAClB,IAAI,MAAM,GAAG,QAAQ,CAAC;;AAEtB,IAAI,UAAU,GAAG,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC;;AAE9C,eAAc,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE;EACjFiO,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACrC,IAAI,SAAS,GAAG,UAAU,IAAI,EAAE;IAC9B,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC;IAChD,QAAQ,IAAI;MACV,KAAK,IAAI,EAAE,OAAO,SAAS,IAAI,GAAG,EAAE,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;MAC1E,KAAK,MAAM,EAAE,OAAO,SAAS,MAAM,GAAG,EAAE,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;KAC/E,CAAC,OAAO,SAAS,OAAO,GAAG,EAAE,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;GACrE,CAAC;EACF,IAAI,GAAG,GAAG,IAAI,GAAG,WAAW,CAAC;EAC7B,IAAI,UAAU,GAAG,OAAO,IAAI,MAAM,CAAC;EACnC,IAAI,UAAU,GAAG,KAAK,CAAC;EACvB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;EAC3B,IAAI,OAAO,GAAG,KAAK,CAACjM,UAAQ,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;EACjF,IAAI,QAAQ,GAAG,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;EAC7C,IAAI,QAAQ,GAAG,OAAO,GAAG,CAAC,UAAU,GAAG,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;EACnF,IAAI,UAAU,GAAG,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,OAAO,GAAG,OAAO,CAAC;EACtE,IAAI,OAAO,EAAE,GAAG,EAAE,iBAAiB,CAAC;;EAEpC,IAAI,UAAU,EAAE;IACd,iBAAiB,GAAGuG,UAAc,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;IAChE,IAAI,iBAAiB,KAAK,MAAM,CAAC,SAAS,IAAI,iBAAiB,CAAC,IAAI,EAAE;;MAEpElE,eAAc,CAAC,iBAAiB,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;;MAE7C,IAAI,CAACb,QAAO,IAAI,CAAC/C,IAAG,CAAC,iBAAiB,EAAEuB,UAAQ,CAAC,EAAEtB,KAAI,CAAC,iBAAiB,EAAEsB,UAAQ,EAAE,UAAU,CAAC,CAAC;KAClG;GACF;;EAED,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;IACpD,UAAU,GAAG,IAAI,CAAC;IAClB,QAAQ,GAAG,SAAS,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;GAC7D;;EAED,IAAI,CAAC,CAACwB,QAAO,IAAI,MAAM,MAAM,KAAK,IAAI,UAAU,IAAI,CAAC,KAAK,CAACxB,UAAQ,CAAC,CAAC,EAAE;IACrEtB,KAAI,CAAC,KAAK,EAAEsB,UAAQ,EAAE,QAAQ,CAAC,CAAC;GACjC;;EAEDF,UAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;EAC3BA,UAAS,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;EAC5B,IAAI,OAAO,EAAE;IACX,OAAO,GAAG;MACR,MAAM,EAAE,UAAU,GAAG,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC;MACjD,IAAI,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC;MACzC,OAAO,EAAE,QAAQ;KAClB,CAAC;IACF,IAAI,MAAM,EAAE,KAAK,GAAG,IAAI,OAAO,EAAE;MAC/B,IAAI,EAAE,GAAG,IAAI,KAAK,CAAC,EAAEd,SAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;KACzD,MAAMY,OAAO,CAACA,OAAO,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,UAAU,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;GAC9E;EACD,OAAO,OAAO,CAAC;CAChB;;ACrED,YAAY,CAAC;;;;;;;;;;AAUb,sBAAc,GAAG5B,WAAyB,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,QAAQ,EAAE,IAAI,EAAE;EACnF,IAAI,CAAC,EAAE,GAAG6D,UAAS,CAAC,QAAQ,CAAC,CAAC;EAC9B,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EACZ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;;CAEhB,EAAE,YAAY;EACb,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;EAChB,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;EACnB,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;EACtB,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,MAAM,EAAE;IAC3B,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;IACpB,OAAOqK,SAAI,CAAC,CAAC,CAAC,CAAC;GAChB;EACD,IAAI,IAAI,IAAI,MAAM,EAAE,OAAOA,SAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EAC1C,IAAI,IAAI,IAAI,QAAQ,EAAE,OAAOA,SAAI,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,OAAOA,SAAI,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CACnC,EAAE,QAAQ,CAAC,CAAC;;;AAGbpM,UAAS,CAAC,SAAS,GAAGA,UAAS,CAAC,KAAK,CAAC;;AAEtCqM,iBAAgB,CAAC,MAAM,CAAC,CAAC;AACzBA,iBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC3BA,iBAAgB,CAAC,SAAS,CAAC,CAAC;;ACjC5B;AACA,YAAY,CAAC;;;;;AAKb,oBAAc,GAAG,EAAE,CAAC,UAAU,IAAI,SAAS,UAAU,CAAC,MAAM,YAAY,KAAK,2BAA2B;EACtG,IAAI,CAAC,GAAG1M,SAAQ,CAAC,IAAI,CAAC,CAAC;EACvB,IAAI,GAAG,GAAGE,SAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;EAC7B,IAAI,EAAE,GAAGmC,gBAAe,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACtC,IAAI,IAAI,GAAGA,gBAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EACvC,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;EAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,SAAS,GAAG,GAAG,GAAGA,gBAAe,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;EAC7F,IAAI,GAAG,GAAG,CAAC,CAAC;EACZ,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,GAAG,KAAK,EAAE;IAClC,GAAG,GAAG,CAAC,CAAC,CAAC;IACT,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC;IAClB,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;GACjB;EACD,OAAO,KAAK,EAAE,GAAG,CAAC,EAAE;IAClB,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;SAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IAClB,EAAE,IAAI,GAAG,CAAC;IACV,IAAI,IAAI,GAAG,CAAC;GACb,CAAC,OAAO,CAAC,CAAC;CACZ;;;ACzBD,YAAY,CAAC;AACb,IAAI9D,YAAyB,EAAE;EAC7B,IAAI,OAAO,GAAGE,QAAqB,CAAC;EACpC,IAAI,MAAM,GAAGC,OAAoB,CAAC;EAClC,IAAI,KAAK,GAAGiD,MAAmB,CAAC;EAChC,IAAI,OAAO,GAAGC,OAAoB,CAAC;EACnC,IAAI,MAAM,GAAGC,MAAmB,CAAC;EACjC,IAAI,OAAO,GAAGC,YAA0B,CAAC;EACzC,IAAI,GAAG,GAAGG,IAAiB,CAAC;EAC5B,IAAI,UAAU,GAAG0K,WAAyB,CAAC;EAC3C,IAAI,YAAY,GAAGC,aAA2B,CAAC;EAC/C,IAAI,IAAI,GAAGC,KAAkB,CAAC;EAC9B,IAAI,WAAW,GAAGC,YAA0B,CAAC;EAC7C,IAAI,SAAS,GAAGC,UAAwB,CAAC;EACzC,IAAI,QAAQ,GAAGC,SAAuB,CAAC;EACvC,IAAI,OAAO,GAAGC,QAAsB,CAAC;EACrC,IAAI,eAAe,GAAGC,gBAA+B,CAAC;EACtD,IAAI,WAAW,GAAGC,YAA0B,CAAC;EAC7C,IAAI,GAAG,GAAGC,IAAiB,CAAC;EAC5B,IAAI,OAAO,GAAGC,QAAqB,CAAC;EACpC,IAAI,QAAQ,GAAGC,SAAuB,CAAC;EACvC,IAAI,QAAQ,GAAGC,SAAuB,CAAC;EACvC,IAAI,WAAW,GAAGC,YAA2B,CAAC;EAC9C,IAAI,MAAM,GAAGC,aAA2B,CAAC;EACzC,IAAI3G,iBAAc,GAAG4G,UAAwB,CAAC;EAC9C,IAAI,IAAI,GAAGC,WAAyB,CAAC,CAAC,CAAC;EACvC,IAAI,SAAS,GAAGC,sBAAqC,CAAC;EACtD,IAAI,GAAG,GAAGC,IAAiB,CAAC;EAC5B,IAAI,GAAG,GAAGC,IAAiB,CAAC;EAC5B,IAAI,iBAAiB,GAAGC,aAA2B,CAAC;EACpD,IAAI,mBAAmB,GAAGC,cAA4B,CAAC;EACvD,IAAI,kBAAkB,GAAGC,mBAAiC,CAAC;EAC3D,IAAI,cAAc,GAAGC,kBAA+B,CAAC;EACrD,IAAI,SAAS,GAAGC,UAAuB,CAAC;EACxC,IAAI,WAAW,GAAGC,WAAyB,CAAC;EAC5C,IAAI,UAAU,GAAGC,WAAyB,CAAC;EAC3C,IAAI,SAAS,GAAGC,UAAwB,CAAC;EACzC,IAAI,eAAe,GAAGC,gBAA+B,CAAC;EACtD,IAAI,GAAG,GAAGC,SAAuB,CAAC;EAClC,IAAI,KAAK,GAAGC,WAAyB,CAAC;EACtC,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;EACf,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;EACnB,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;EACnC,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;EACjC,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;EACnC,IAAI,YAAY,GAAG,aAAa,CAAC;EACjC,IAAI,aAAa,GAAG,QAAQ,GAAG,YAAY,CAAC;EAC5C,IAAI,iBAAiB,GAAG,mBAAmB,CAAC;EAC5C,IAAI,SAAS,GAAG,WAAW,CAAC;EAC5B,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;EAClC,IAAI,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;EACvC,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;EACjC,IAAI,YAAY,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACxC,IAAI,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvC,IAAI,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACrC,IAAI,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACtC,IAAI,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACrC,IAAI,cAAc,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EAC1C,IAAI,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;EAC9C,IAAI,YAAY,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;EAC9C,IAAI,WAAW,GAAG,cAAc,CAAC,MAAM,CAAC;EACxC,IAAI,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;EACpC,IAAI,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC;EAC1C,IAAI,gBAAgB,GAAG,UAAU,CAAC,WAAW,CAAC;EAC9C,IAAI,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC;EACpC,IAAI,gBAAgB,GAAG,UAAU,CAAC,WAAW,CAAC;EAC9C,IAAI,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;EAChC,IAAI,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;EAChC,IAAI,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC;EAClC,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;EACxC,IAAI,mBAAmB,GAAG,UAAU,CAAC,cAAc,CAAC;EACpD,IAAI,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;EAC/B,IAAI,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,CAAC;EAC7B,IAAI,iBAAiB,GAAG,GAAG,CAAC,mBAAmB,CAAC,CAAC;EACjD,IAAI,eAAe,GAAG,GAAG,CAAC,iBAAiB,CAAC,CAAC;EAC7C,IAAI,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC;EACrC,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;EAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;EACvB,IAAI,YAAY,GAAG,eAAe,CAAC;;EAEnC,IAAI,IAAI,GAAG,iBAAiB,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,MAAM,EAAE;IACnD,OAAO,QAAQ,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;GACpE,CAAC,CAAC;;EAEH,IAAI,aAAa,GAAG,KAAK,CAAC,YAAY;;IAEpC,OAAO,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;GAC7D,CAAC,CAAC;;EAEH,IAAI,UAAU,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,YAAY;IAChF,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;GAC3B,CAAC,CAAC;;EAEH,IAAI,QAAQ,GAAG,UAAU,EAAE,EAAE,KAAK,EAAE;IAClC,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;IAC3B,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,KAAK,EAAE,MAAM,UAAU,CAAC,eAAe,CAAC,CAAC;IACpE,OAAO,MAAM,CAAC;GACf,CAAC;;EAEF,IAAI,QAAQ,GAAG,UAAU,EAAE,EAAE;IAC3B,IAAI,QAAQ,CAAC,EAAE,CAAC,IAAI,WAAW,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC;IACjD,MAAM,SAAS,CAAC,EAAE,GAAG,wBAAwB,CAAC,CAAC;GAChD,CAAC;;EAEF,IAAI,QAAQ,GAAG,UAAU,CAAC,EAAE,MAAM,EAAE;IAClC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,iBAAiB,IAAI,CAAC,CAAC,EAAE;MAC5C,MAAM,SAAS,CAAC,sCAAsC,CAAC,CAAC;KACzD,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;GACxB,CAAC;;EAEF,IAAI,eAAe,GAAG,UAAU,CAAC,EAAE,IAAI,EAAE;IACvC,OAAO,QAAQ,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;GAClE,CAAC;;EAEF,IAAI,QAAQ,GAAG,UAAU,CAAC,EAAE,IAAI,EAAE;IAChC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzB,IAAI,MAAM,GAAG,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACjC,OAAO,MAAM,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACrD,OAAO,MAAM,CAAC;GACf,CAAC;;EAEF,IAAI,SAAS,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE;IAC3C,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;GACjE,CAAC;;EAEF,IAAI,KAAK,GAAG,SAAS,IAAI,CAAC,MAAM,yBAAyB;IACvD,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IACzB,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;IAC5B,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;IAChD,IAAI,OAAO,GAAG,KAAK,KAAK,SAAS,CAAC;IAClC,IAAI,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC;IAC9C,IAAI,MAAM,IAAI,SAAS,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;MAC/C,KAAK,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;QACvF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;OACzB,CAAC,CAAC,GAAG,MAAM,CAAC;KACd;IACD,IAAI,OAAO,IAAI,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;MACzF,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7C;IACD,OAAO,MAAM,CAAC;GACf,CAAC;;EAEF,IAAI,GAAG,GAAG,SAAS,EAAE,iBAAiB;IACpC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9B,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACpC,OAAO,MAAM,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1D,OAAO,MAAM,CAAC;GACf,CAAC;;;EAGF,IAAI,aAAa,GAAG,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,YAAY,EAAE,mBAAmB,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAExG,IAAI,eAAe,GAAG,SAAS,cAAc,GAAG;IAC9C,OAAO,mBAAmB,CAAC,KAAK,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;GAC/G,CAAC;;EAEF,IAAI,KAAK,GAAG;IACV,UAAU,EAAE,SAAS,UAAU,CAAC,MAAM,EAAE,KAAK,cAAc;MACzD,OAAO,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KAC7G;IACD,KAAK,EAAE,SAAS,KAAK,CAAC,UAAU,kBAAkB;MAChD,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KAChG;IACD,IAAI,EAAE,SAAS,IAAI,CAAC,KAAK,qBAAqB;MAC5C,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KACnD;IACD,MAAM,EAAE,SAAS,MAAM,CAAC,UAAU,kBAAkB;MAClD,OAAO,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU;QACjE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KACrD;IACD,IAAI,EAAE,SAAS,IAAI,CAAC,SAAS,kBAAkB;MAC7C,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KAC9F;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,SAAS,kBAAkB;MACvD,OAAO,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KACnG;IACD,OAAO,EAAE,SAAS,OAAO,CAAC,UAAU,kBAAkB;MACpD,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KAC3F;IACD,OAAO,EAAE,SAAS,OAAO,CAAC,aAAa,oBAAoB;MACzD,OAAO,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KACrG;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,aAAa,oBAAoB;MAC3D,OAAO,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KACtG;IACD,IAAI,EAAE,SAAS,IAAI,CAAC,SAAS,EAAE;MAC7B,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KACnD;IACD,WAAW,EAAE,SAAS,WAAW,CAAC,aAAa,oBAAoB;MACjE,OAAO,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KAC1D;IACD,GAAG,EAAE,SAAS,GAAG,CAAC,KAAK,kBAAkB;MACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KACrF;IACD,MAAM,EAAE,SAAS,MAAM,CAAC,UAAU,uBAAuB;MACvD,OAAO,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KACrD;IACD,WAAW,EAAE,SAAS,WAAW,CAAC,UAAU,uBAAuB;MACjE,OAAO,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KAC1D;IACD,OAAO,EAAE,SAAS,OAAO,GAAG;MAC1B,IAAI,IAAI,GAAG,IAAI,CAAC;MAChB,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;MACnC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;MACpC,IAAI,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,KAAK,CAAC;MACV,OAAO,KAAK,GAAG,MAAM,EAAE;QACrB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;OACtB,CAAC,OAAO,IAAI,CAAC;KACf;IACD,IAAI,EAAE,SAAS,IAAI,CAAC,UAAU,kBAAkB;MAC9C,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KAC/F;IACD,IAAI,EAAE,SAAS,IAAI,CAAC,SAAS,EAAE;MAC7B,OAAO,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;KAClD;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;MACtC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;MACvB,IAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;MACtB,IAAI,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;MAC5C,OAAO,KAAK,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC;QACnD,CAAC,CAAC,MAAM;QACR,CAAC,CAAC,UAAU,GAAG,MAAM,GAAG,CAAC,CAAC,iBAAiB;QAC3C,QAAQ,CAAC,CAAC,GAAG,KAAK,SAAS,GAAG,MAAM,GAAG,eAAe,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC;OAC/E,CAAC;KACH;GACF,CAAC;;EAEF,IAAI,MAAM,GAAG,SAAS,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;IACtC,OAAO,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;GAC3E,CAAC;;EAEF,IAAI,IAAI,GAAG,SAAS,GAAG,CAAC,SAAS,iBAAiB;IAChD,QAAQ,CAAC,IAAI,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzB,IAAI,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC9B,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,GAAG,GAAG,MAAM,GAAG,MAAM,EAAE,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;IAC1D,OAAO,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;GACzD,CAAC;;EAEF,IAAI,UAAU,GAAG;IACf,OAAO,EAAE,SAAS,OAAO,GAAG;MAC1B,OAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAC1C;IACD,IAAI,EAAE,SAAS,IAAI,GAAG;MACpB,OAAO,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KACvC;IACD,MAAM,EAAE,SAAS,MAAM,GAAG;MACxB,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KACzC;GACF,CAAC;;EAEF,IAAI,SAAS,GAAG,UAAU,MAAM,EAAE,GAAG,EAAE;IACrC,OAAO,QAAQ,CAAC,MAAM,CAAC;SAClB,MAAM,CAAC,WAAW,CAAC;SACnB,OAAO,GAAG,IAAI,QAAQ;SACtB,GAAG,IAAI,MAAM;SACb,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;GAClC,CAAC;EACF,IAAI,QAAQ,GAAG,SAAS,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE;IAC5D,OAAO,SAAS,CAAC,MAAM,EAAE,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAClD,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;GACvB,CAAC;EACF,IAAI,QAAQ,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;IACxD,IAAI,SAAS,CAAC,MAAM,EAAE,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9C,QAAQ,CAAC,IAAI,CAAC;SACd,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC;SAClB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;SACjB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;;SAEjB,CAAC,IAAI,CAAC,YAAY;UACjB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;UACxC,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;MAChD;MACA,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;MACzB,OAAO,MAAM,CAAC;KACf,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;GAChC,CAAC;;EAEF,IAAI,CAAC,gBAAgB,EAAE;IACrB,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC;IACnB,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;GAClB;;EAED,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,QAAQ,EAAE;IAC3D,wBAAwB,EAAE,QAAQ;IAClC,cAAc,EAAE,QAAQ;GACzB,CAAC,CAAC;;EAEH,IAAI,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;IAClD,aAAa,GAAG,mBAAmB,GAAG,SAAS,QAAQ,GAAG;MACxD,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B,CAAC;GACH;;EAED,IAAI,qBAAqB,GAAG,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;EACnD,WAAW,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;EAC/C,IAAI,CAAC,qBAAqB,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;EACzD,WAAW,CAAC,qBAAqB,EAAE;IACjC,KAAK,EAAE,MAAM;IACb,GAAG,EAAE,IAAI;IACT,WAAW,EAAE,YAAY,cAAc;IACvC,QAAQ,EAAE,aAAa;IACvB,cAAc,EAAE,eAAe;GAChC,CAAC,CAAC;EACH,SAAS,CAAC,qBAAqB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;EAChD,SAAS,CAAC,qBAAqB,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;EACpD,SAAS,CAAC,qBAAqB,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;EACpD,SAAS,CAAC,qBAAqB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;EAChD,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAC7B,GAAG,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;GAC/C,CAAC,CAAC;;;EAGH,cAAc,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;IACvD,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;IACpB,IAAI,IAAI,GAAG,GAAG,IAAI,OAAO,GAAG,SAAS,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;IACtD,IAAI,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC;IACzB,IAAI,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC;IACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,UAAU,IAAI,EAAE,CAAC;IAC5B,IAAI,GAAG,GAAG,UAAU,IAAI3H,iBAAc,CAAC,UAAU,CAAC,CAAC;IACnD,IAAI,MAAM,GAAG,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IACxC,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,IAAI,mBAAmB,GAAG,UAAU,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;IAC9D,IAAI,MAAM,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;MAClC,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;MACnB,OAAO,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;KAC9D,CAAC;IACF,IAAI,MAAM,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;MACzC,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;MACnB,IAAI,OAAO,EAAE,KAAK,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;MAC9F,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;KAC9D,CAAC;IACF,IAAI,UAAU,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;MACtC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE;QACd,GAAG,EAAE,YAAY;UACf,OAAO,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC5B;QACD,GAAG,EAAE,UAAU,KAAK,EAAE;UACpB,OAAO,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;SACnC;QACD,UAAU,EAAE,IAAI;OACjB,CAAC,CAAC;KACJ,CAAC;IACF,IAAI,MAAM,EAAE;MACV,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;QAC3D,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC;QACtC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;UACnB,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;UACvB,UAAU,GAAG,MAAM,GAAG,KAAK,CAAC;UAC5B,MAAM,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;SACvC,MAAM,IAAI,IAAI,YAAY,YAAY,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,YAAY,IAAI,KAAK,IAAI,aAAa,EAAE;UAC5G,MAAM,GAAG,IAAI,CAAC;UACd,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;UAClC,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;UAC3B,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,IAAI,IAAI,GAAG,KAAK,EAAE,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;YACjD,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC;YAC3B,IAAI,UAAU,GAAG,CAAC,EAAE,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;WACpD,MAAM;YACL,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YACvC,IAAI,UAAU,GAAG,MAAM,GAAG,IAAI,EAAE,MAAM,UAAU,CAAC,YAAY,CAAC,CAAC;WAChE;UACD,MAAM,GAAG,UAAU,GAAG,KAAK,CAAC;SAC7B,MAAM,IAAI,WAAW,IAAI,IAAI,EAAE;UAC9B,OAAO,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SACnC,MAAM;UACL,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE;UACf,CAAC,EAAE,MAAM;UACT,CAAC,EAAE,MAAM;UACT,CAAC,EAAE,UAAU;UACb,CAAC,EAAE,MAAM;UACT,CAAC,EAAE,IAAI,SAAS,CAAC,MAAM,CAAC;SACzB,CAAC,CAAC;QACH,OAAO,KAAK,GAAG,MAAM,EAAE,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;OAClD,CAAC,CAAC;MACH,mBAAmB,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;MAC5E,IAAI,CAAC,mBAAmB,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;KACtD,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY;MAC5B,UAAU,CAAC,CAAC,CAAC,CAAC;KACf,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;MACvB,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KACpB,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,EAAE;MACjC,IAAI,UAAU,EAAE,CAAC;MACjB,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;MACrB,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;MACpB,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;KACtB,EAAE,IAAI,CAAC,EAAE;MACR,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;QAC3D,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACnC,IAAI,KAAK,CAAC;;;QAGV,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACpD,IAAI,IAAI,YAAY,YAAY,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,YAAY,IAAI,KAAK,IAAI,aAAa,EAAE;UACrG,OAAO,OAAO,KAAK,SAAS;cACxB,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC;cACjD,OAAO,KAAK,SAAS;gBACnB,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACxC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;SACtB;QACD,IAAI,WAAW,IAAI,IAAI,EAAE,OAAO,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC3D,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;OACrC,CAAC,CAAC;MACH,YAAY,CAAC,GAAG,KAAK,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,GAAG,EAAE;QAClG,IAAI,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;OAC5D,CAAC,CAAC;MACH,UAAU,CAAC,SAAS,CAAC,GAAG,mBAAmB,CAAC;MAC5C,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,WAAW,GAAG,UAAU,CAAC;KAC5D;IACD,IAAI,eAAe,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IACpD,IAAI,iBAAiB,GAAG,CAAC,CAAC,eAAe;UACnC,eAAe,CAAC,IAAI,IAAI,QAAQ,IAAI,eAAe,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC;IAC7E,IAAI,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC;IAClC,IAAI,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;IAC1C,IAAI,CAAC,mBAAmB,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC7C,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACtC,IAAI,CAAC,mBAAmB,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;;IAEvD,IAAI,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,mBAAmB,CAAC,EAAE;MAC5E,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,GAAG,EAAE,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE;OAClC,CAAC,CAAC;KACJ;;IAED,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;;IAErB,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;;IAErE,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE;MACvB,iBAAiB,EAAE,KAAK;KACzB,CAAC,CAAC;;IAEH,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE;MACzF,IAAI,EAAE,KAAK;MACX,EAAE,EAAE,GAAG;KACR,CAAC,CAAC;;IAEH,IAAI,EAAE,iBAAiB,IAAI,mBAAmB,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;;IAErG,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;;IAEhC,UAAU,CAAC,IAAI,CAAC,CAAC;;IAEjB,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,UAAU,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;;IAEjE,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;;IAEtE,IAAI,CAAC,OAAO,IAAI,mBAAmB,CAAC,QAAQ,IAAI,aAAa,EAAE,mBAAmB,CAAC,QAAQ,GAAG,aAAa,CAAC;;IAE5G,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,YAAY;MAChD,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;KAC3B,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;;IAE7B,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,YAAY;MACjD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;KAC3E,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;MACvB,mBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACjD,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,eAAe,EAAE,CAAC,CAAC;;IAEhD,SAAS,CAAC,IAAI,CAAC,GAAG,iBAAiB,GAAG,eAAe,GAAG,SAAS,CAAC;IAClE,IAAI,CAAC,OAAO,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;GACpF,CAAC;CACH,MAAM,cAAc,GAAG,YAAY,eAAe,CAAC;;;AC/dpDvI,WAAyB,CAAC,OAAO,EAAE,CAAC,EAAE,UAAU,IAAI,EAAE;EACpD,OAAO,SAAS,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE;IACnD,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;GAC7C,CAAC;CACH,CAAC,CAAC;;ACJH;;AAEA,IAAImQ,SAAS,CAAb;AAEA,AAAe,SAASC,IAAT,CAAeC,CAAf,EAAkB;MACzBC,cAAc,GAApB;MACMC,gBAAgB,IAAIC,UAAJ,CAAe,CAAf,CAAtB;MACMC,eAAe,GAArB;MACMC,iBAAiB,IAAIF,UAAJ,CAAe,CAAf,CAAvB;MACMG,UAAU,IAAIH,UAAJ,CAAe,CAAf,CAAhB;MACMI,UAAU,IAAIJ,UAAJ,CAAe,CAAf,CAAhB;MACMK,gBAAgB,IAAIL,UAAJ,CAAe,CAAf,CAAtB;MACMM,gBAAgB,KAAKN,UAAL,CAAgB,CAAhB,CAAtB;MACMO,gBAAgB,IAAIP,UAAJ,CAAe,CAAf,CAAtB;MACMQ,iBAAiB,IAAIR,UAAJ,CAAe,CAAf,CAAvB;;;;;MAKMS,aAAa,YAAnB;MAEIC,MAAM,CAAV;;;;;WAKSC,aAAT,GAA0B;QAClBC,WAAW,EAAjB;;WACOf,EAAEa,GAAF,CAAP,EAAe;UACTb,EAAEG,UAAF,CAAaU,GAAb,MAAsBX,aAA1B,EAAyC;YACnCF,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BN,OAA9B,EAAuC;;;gBAE/BP,EAAEgB,OAAF,CAAUZ,YAAV,EAAwBS,GAAxB,CAAN;iBACOE,QAAP;SAHF,MAIO,IAAIf,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BL,aAA9B,EAA6C;;cAC9CR,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BP,OAA9B,EAAuC;;mBAE9B,EAAEN,EAAEG,UAAF,CAAaU,GAAb,MAAsBR,cAAtB,IAAwCL,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BP,OAAlE,IACPN,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BP,OADnB,IAC8BO,QAAQ,CAAC,CADzC,CAAP,EACoD;oBAC5Cb,EAAEgB,OAAF,CAAUZ,YAAV,EAAwBS,MAAM,CAA9B,CAAN;;;gBAEEA,QAAQ,CAAC,CAAb,EAAgB;oBACRb,EAAE9D,MAAR;;WAPJ,MASO;;mBAEE,CAAP;;mBACO8D,EAAEG,UAAF,CAAaU,GAAb,MAAsBR,cAA7B,EAA6CQ,KAA7C,EAAoD;;;;;SAbjD,MAiBA,IAAIb,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BF,cAA9B,EAA8C;;;gBAE7CX,EAAEgB,OAAF,CAAUZ,YAAV,EAAwBS,GAAxB,CAAN;;;;;;YAKEI,eAAeJ,GAAnB;;eACOD,WAAWI,OAAX,CAAmBhB,EAAEa,GAAF,CAAnB,MAA+B,CAAC,CAAvC,EAA0CA,KAA1C,EAAiD;;YAC3CK,cAAclB,EAAErD,KAAF,CAAQsE,YAAR,EAAsBJ,GAAtB,CAApB,CA/BuC;;YAkCnCM,YAAY,KAAhB;YACIC,iBAAiB,EAArB;;eACOpB,EAAEG,UAAF,CAAaU,GAAb,MAAsBR,cAA7B,EAA6CQ,KAA7C,EAAoD;cAC5CQ,IAAIrB,EAAEG,UAAF,CAAaU,GAAb,CAAV;;cACKQ,IAAI,EAAJ,IAAUA,IAAI,EAAf,IAAuBA,IAAI,EAAJ,IAAUA,IAAI,GAAzC,EAA+C;2BAC9BR,GAAf;;mBACOD,WAAWI,OAAX,CAAmBhB,EAAEa,GAAF,CAAnB,MAA+B,CAAC,CAAvC,EAA0CA,KAA1C,EAAiD;;gBAC3C/H,OAAOkH,EAAErD,KAAF,CAAQsE,YAAR,EAAsBJ,GAAtB,CAAb,CAH6C;;gBAKzCS,OAAOtB,EAAEG,UAAF,CAAaU,GAAb,CAAX;;mBACOS,SAASb,aAAT,IAA0Ba,SAASZ,aAA1C,EAAyD;;qBAEhDV,EAAEG,UAAF,CAAaU,GAAb,CAAP;;;gBAGIU,YAAYvB,EAAEa,GAAF,CAAlB;gBACMW,iBAAiB,EAAEX,GAAzB;kBACMb,EAAEgB,OAAF,CAAUO,SAAV,EAAqBC,cAArB,CAAN;gBACM/H,QAAQuG,EAAErD,KAAF,CAAQ6E,cAAR,EAAwBX,GAAxB,CAAd;;gBACI,CAACM,SAAL,EAAgB;+BACG,EAAjB;0BACY,IAAZ;;;2BAEarI,IAAf,IAAuBW,KAAvB;;SAzDmC;;;YA8DnCgI,qBAAJ;;YACIzB,EAAEG,UAAF,CAAaU,MAAM,CAAnB,MAA0BN,OAA9B,EAAuC;;yBAEtBO,eAAf;;;iBAGOpF,IAAT,CAAc;sBACA+F,YADA;qBAEDP,WAFC;mBAGHE;SAHX;OApEF,MAyEO;YACCM,eAAeb,GAArB;cACMb,EAAEgB,OAAF,CAAUf,WAAV,EAAuBY,GAAvB,IAA8B,CAApC,CAFK;;YAGDA,QAAQ,CAAC,CAAb,EAAgB;gBACRb,EAAE9D,MAAR;;;YAEIyF,OAAO3B,EAAErD,KAAF,CAAQ+E,YAAR,EAAsBb,MAAM,CAA5B,CAAb;;YACIc,KAAKC,IAAL,GAAY1F,MAAZ,GAAqB,CAAzB,EAA4B;mBACjBR,IAAT,CAAciG,IAAd;;;;;;;WAKCZ,QAAP;;;WAGO,CAAT;SACOc,SAASf,eAAT,CAAP;;;AAGF,SAASe,QAAT,CAAmBd,QAAnB,EAA6B;MACrBe,OAAO,EAAb;;MAEIf,aAAarL,SAAjB,EAA4B;WACnB,EAAP;GAJyB;;;MAQvBqL,SAAS7E,MAAT,KAAoB,CAApB,KAA0B,OAAO6E,SAAS,CAAT,CAAP,KAAuB,QAAvB,IAAmCA,SAAS,CAAT,aAAuBgB,MAApF,CAAJ,EAAiG;;WAExF,IAAIA,MAAJ,CAAWhB,SAAS,CAAT,CAAX,CAAP;GAVyB;;;WAclBtI,OAAT,CAAiB,UAAUuJ,KAAV,EAAiB;QAC5B,CAACF,KAAKE,MAAMC,OAAX,CAAL,EAA0B;WACnBD,MAAMC,OAAX,IAAsB,EAAtB;;;QAGEvI,QAAOsI,KAAP,MAAiB,QAArB,EAA+B;UACvBE,OAAOL,SAASG,MAAMjB,QAAf,CAAb;;UACIiB,MAAMG,KAAV,EAAiB;aACVA,KAAL,GAAaH,MAAMG,KAAnB;;;UAGED,KAAK,OAAL,MAAkBxM,SAAtB,EAAiC;aAC1B,OAAL,IAAgB;mBAAUoK;SAA1B;OADF,MAEO;aACA,OAAL,EAAc,OAAd,IAAyBA,MAAzB;;;;WAGGkC,MAAMC,OAAX,EAAoBvG,IAApB,CAAyBwG,IAAzB;;GAjBJ;;OAqBK,IAAI3F,CAAT,IAAcuF,IAAd,EAAoB;QACdA,KAAKvF,CAAL,EAAQL,MAAR,KAAmB,CAAvB,EAA0B;WACnBK,CAAL,IAAUuF,KAAKvF,CAAL,EAAQ,CAAR,CAAV;;;;SAIGuF,IAAP;;;ACnKF;;;;;;;;;;;;;AAcA,IAAMM,QAAQC,KAAKD,KAAnB;;;;;;;AAQA,IAAaE,GAAb;;AAAA;eACeC,GAAb,EAAkB;;SACXC,CAAL,GAASD,IAAI,CAAJ,CAAT;SACKE,CAAL,GAASF,IAAI,CAAJ,CAAT;SACKG,CAAL,GAASH,IAAI,CAAJ,CAAT;;;;;+BAGU;2BACI,KAAKC,CAAnB,cAAwB,KAAKC,CAA7B,cAAkC,KAAKC,CAAvC;;;;;AAIJ,IAAaC,IAAb;;AAAA;;;gBACeJ,GAAb,EAAkB;;;;wGACVA,GAAN;UACKK,CAAL,GAASL,IAAI,CAAJ,CAAT;;;;;;+BAGU;4BACK,KAAKC,CAApB,cAAyB,KAAKC,CAA9B,cAAmC,KAAKC,CAAxC,cAA6C,KAAKE,CAAlD;;;;EAPsBN,GAA1B;AAWA,IAAaO,GAAb;;AAAA;eACeN,GAAb,EAAkB;;SACXO,CAAL,GAASP,IAAI,CAAJ,CAAT;SACKQ,CAAL,GAASR,IAAI,CAAJ,CAAT;SACKS,CAAL,GAAST,IAAI,CAAJ,CAAT;;;;;+BAGU;2BACI,KAAKO,CAAnB,cAAwB,KAAKC,CAA7B,eAAmC,KAAKC,CAAxC;;;;;AAIJ,IAAaC,IAAb;;AAAA;;;gBACeV,GAAb,EAAkB;;;;yGACVA,GAAN;WACKK,CAAL,GAASL,IAAI,CAAJ,CAAT;;;;;;+BAGU;4BACK,KAAKO,CAApB,cAAyB,KAAKC,CAA9B,eAAoC,KAAKC,CAAzC,eAA+C,KAAKJ,CAApD;;;;EAPsBC,GAA1B;;;;;;;AAgBA,IAAaK,KAAb;;AAAA;iBACeV,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAA+B;QAATE,CAAS,uEAAL,GAAK;;;;QAEzB,OAAOJ,CAAP,KAAa,QAAjB,EAA2B;UACrBW,MAAMX,CAAV,CADyB;;UAGrBW,IAAIzG,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;cAAQ,MAAMyG,GAAZ;OAHJ;;;UAKrBA,IAAIjH,MAAJ,GAAa,CAAjB,EAAoB;cACZ,MAAMiH,IAAI,CAAJ,CAAN,GAAeA,IAAI,CAAJ,CAAf,GAAwBA,IAAI,CAAJ,CAAxB,GAAiCA,IAAI,CAAJ,CAAjC,GAA0CA,IAAI,CAAJ,CAA1C,GAAmDA,IAAI,CAAJ,CAAzD;;;sBAEWC,SAASD,GAAT,CARY;;;;OAAA;OAAA;OAAA;KAA3B,MASO,IAAIX,aAAaa,KAAjB,EAAwB;UACzBb,EAAE,CAAF,KAAQI,CAAZ;UACIJ,EAAE,CAAF,CAAJ;UACIA,EAAE,CAAF,CAAJ;UACIA,EAAE,CAAF,CAAJ;;;SAGGA,CAAL,GAASA,CAAT;SACKC,CAAL,GAASA,CAAT;SACKC,CAAL,GAASA,CAAT;SACKE,CAAL,GAASA,CAAT;SAEKU,GAAL,GAAW,IAAIhB,GAAJ,CAAQ,CAAC,KAAKE,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAR,CAAX;SACKa,IAAL,GAAY,IAAIZ,IAAJ,CAAS,CAAC,KAAKH,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKE,CAA9B,CAAT,CAAZ;SACKY,GAAL,GAAWC,SAAS,KAAKjB,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKC,CAA9B,CAAX;SAEKgB,GAAL,GAAW,IAAIb,GAAJ,CAAQc,SAAS,KAAKnB,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKC,CAA9B,CAAR,CAAX;SACKI,CAAL,GAAS,KAAKY,GAAL,CAASZ,CAAlB;SACKC,CAAL,GAAS,KAAKW,GAAL,CAASX,CAAlB;SACKC,CAAL,GAAS,KAAKU,GAAL,CAASV,CAAlB;SACKY,IAAL,GAAY,IAAIX,IAAJ,CAAS,CAAC,KAAKH,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKJ,CAA9B,CAAT,CAAZ;;;;;2BAGMiB,MAnCV,EAmCkB;WACTf,CAAL,GAASe,MAAT;WACKH,GAAL,CAASZ,CAAT,GAAae,MAAb;WACKD,IAAL,CAAUd,CAAV,GAAce,MAAd;WACKC,aAAL;;;;2BAGMC,MA1CV,EA0CkB;WACThB,CAAL,GAASgB,MAAT;WACKL,GAAL,CAASX,CAAT,GAAagB,MAAb;WACKH,IAAL,CAAUb,CAAV,GAAcgB,MAAd;WACKD,aAAL;;;;2BAGME,MAjDV,EAiDkB;WACThB,CAAL,GAASgB,MAAT;WACKN,GAAL,CAASV,CAAT,GAAagB,MAAb;WACKJ,IAAL,CAAUZ,CAAV,GAAcgB,MAAd;WACKF,aAAL;;;;6BAGQG,QAxDZ,EAwDsB;WACbrB,CAAL,GAASqB,QAAT;WACKL,IAAL,CAAUhB,CAAV,GAAcqB,QAAd;WACKV,IAAL,CAAUX,CAAV,GAAcqB,QAAd;;;;oCAGe;;WAEVX,GAAL,GAAW,IAAX;WACKA,GAAL,GAAW,IAAIhB,GAAJ,CAAQ4B,SAAS,KAAKpB,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKC,CAA9B,CAAR,CAAX;WAEKR,CAAL,GAAS,KAAKc,GAAL,CAASd,CAAlB;WACKC,CAAL,GAAS,KAAKa,GAAL,CAASb,CAAlB;WACKC,CAAL,GAAS,KAAKY,GAAL,CAASZ,CAAlB;WACKa,IAAL,CAAUf,CAAV,GAAc,KAAKc,GAAL,CAASd,CAAvB;WACKe,IAAL,CAAUd,CAAV,GAAc,KAAKa,GAAL,CAASb,CAAvB;WACKc,IAAL,CAAUb,CAAV,GAAc,KAAKY,GAAL,CAASZ,CAAvB,CAVe;;WAaVc,GAAL,GAAW,IAAX;WACKA,GAAL,GAAWC,SAAS,CAAC,KAAKjB,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAT,CAAX;;;;;;;;;;;AAUJ;AAKA,AAAO,IAAMU,WAAW,SAAXA,QAAW,CAAUI,GAAV,EAAe;MAC/BhK,SAAS,4CAA4C2K,IAA5C,CAAiDX,GAAjD,CAAf;SACOhK,SAAS,CACd4K,SAAS5K,OAAO,CAAP,CAAT,EAAoB,EAApB,CADc,EAEd4K,SAAS5K,OAAO,CAAP,CAAT,EAAoB,EAApB,CAFc,EAGd4K,SAAS5K,OAAO,CAAP,CAAT,EAAoB,EAApB,CAHc,CAAT,GAIH,IAJJ;CAFK;AASP,AAAO,IAAM6K,iBAAiB,SAAjBA,cAAiB,CAAUhD,CAAV,EAAa;MACnCmC,MAAMnC,EAAE3M,QAAF,CAAW,EAAX,CAAZ;SACO8O,IAAItH,MAAJ,KAAe,CAAf,GAAmB,MAAMsH,GAAzB,GAA+BA,GAAtC;CAFK;;AAMP,AAAO,IAAMC,WAAW,SAAXA,QAAW,CAAUjB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;MACrCF,aAAaa,KAAjB,EAAwB;QAClBb,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;;;SAEK,MAAM6B,eAAe7B,CAAf,CAAN,GAA0B6B,eAAe5B,CAAf,CAA1B,GAA8C4B,eAAe3B,CAAf,CAArD;CANK;;;;;;;;;;;AAkBP,AAAO,IAAMiB,WAAW,SAAXA,QAAW,CAAUnB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;MACrCF,aAAaa,KAAjB,EAAwB;QAClBb,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;;;MAGEM,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAasB,CAAb,EAAgBC,GAAhB,EAAqBhR,GAArB;OAEK,GAAL;OACK,GAAL;OACK,GAAL;QAEM8O,KAAKkC,GAAL,CAAS/B,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAN;QACML,KAAK9O,GAAL,CAASiP,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAN;MACI,CAAC6B,MAAMhR,GAAP,IAAc,CAAlB;;MAEIgR,QAAQhR,GAAZ,EAAiB;QACXwP,IAAI,CAAR,CADe;GAAjB,MAEO;QACDwB,MAAMhR,GAAV;QACIyP,IAAI,GAAJ,GAAUsB,KAAK,IAAIC,GAAJ,GAAUhR,GAAf,CAAV,GAAgC+Q,KAAKC,MAAMhR,GAAX,CAApC;;YAEQgR,GAAR;WACO/B,CAAL;YACM,CAACC,IAAIC,CAAL,IAAU4B,CAAV,IAAe7B,IAAIC,CAAJ,GAAQ,CAAR,GAAY,CAA3B,CAAJ;;;WAEGD,CAAL;YACM,CAACC,IAAIF,CAAL,IAAU8B,CAAV,GAAc,CAAlB;;;WAEG5B,CAAL;YACM,CAACF,IAAIC,CAAL,IAAU6B,CAAV,GAAc,CAAlB;;;;SAIC,CAAL;GAnCuC;;;MAuCrClC,MAAMU,IAAI,GAAV,CAAJ;MACIV,MAAMW,IAAI,GAAV,CAAJ;MACIX,MAAMY,IAAI,GAAV,CAAJ;SAEO,CAACF,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;CA3CK;AA8CP,AAAO,IAAMwB,UAAU,SAAVA,OAAU,CAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;MACpCA,IAAI,CAAR,EAAW;SAAO,CAAL;;;MACTA,IAAI,CAAR,EAAW;SAAO,CAAL;;;MACTA,IAAI,IAAI,CAAZ,EAAe;WAASF,IAAI,CAACC,IAAID,CAAL,IAAU,CAAV,GAAcE,CAAzB;;;MACbA,IAAI,IAAI,CAAZ,EAAe;WAASD,CAAP;;;MACbC,IAAI,IAAI,CAAZ,EAAe;WAASF,IAAI,CAACC,IAAID,CAAL,KAAW,IAAI,CAAJ,GAAQE,CAAnB,IAAwB,CAAnC;;;SACVF,CAAP;CANK;;;;;;;;;;;AAmBP,AAAO,IAAMP,WAAW,SAAXA,QAAW,CAAUpB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;MACrCF,aAAaO,KAAjB,EAAwB;QAClBP,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;QACIA,EAAE,CAAF,CAAJ;;;MAEEA,IAAI,GAAR;MACIC,IAAI,GAAR;MACIC,IAAI,GAAR;MAEIR,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAagC,CAAb,EAAgBD,CAAhB;;MAEI1B,MAAM,CAAV,EAAa;QACPN,IAAIC,IAAIM,CAAZ,CADW;GAAb,MAEO;QACDA,IAAI,GAAJ,GAAUA,KAAK,IAAID,CAAT,CAAV,GAAwBC,IAAID,CAAJ,GAAQC,IAAID,CAAxC;QACI,IAAIC,CAAJ,GAAQ0B,CAAZ;QACIF,QAAQC,CAAR,EAAWC,CAAX,EAAc5B,IAAI,IAAI,CAAtB,CAAJ;QACI0B,QAAQC,CAAR,EAAWC,CAAX,EAAc5B,CAAd,CAAJ;QACI0B,QAAQC,CAAR,EAAWC,CAAX,EAAc5B,IAAI,IAAI,CAAtB,CAAJ;;;SAEK,CAACV,MAAMI,IAAI,GAAV,CAAD,EAAiBJ,MAAMK,IAAI,GAAV,CAAjB,EAAiCL,MAAMM,IAAI,GAAV,CAAjC,CAAP;CArBK;;;;;;;;;;;AAiCP;;;;;;;;;;;AAgDA;AAiDA;;;;AAGA;AAIA;;;;;;;;AAOA,IAAakC,WAAb;;AAAA;uBACeC,QAAb,EAAuBC,UAAvB,EAAmC;;SAC5BC,OAAL,GAAe,EAAf;;QAEID,eAAepP,SAAf,IAA4BmP,oBAAoBxB,KAApD,EAA2D;;WAEpD2B,gBAAL,CAAsBH,QAAtB;KAFF,MAGO;;WAEAI,gBAAL,CAAsBJ,QAAtB,EAAgCC,UAAhC;;;;;;qCAIcD,QAbpB,EAa8B;WACrB,IAAItI,CAAT,IAAcsI,QAAd,EAAwB;YAClBA,SAASpP,cAAT,CAAwB8G,CAAxB,CAAJ,EAAgC;;eAEzBwI,OAAL,CAAarJ,IAAb,CAAkB,IAAIwH,KAAJ,CAAU2B,SAAStI,CAAT,CAAV,CAAlB;;;;aAGG,KAAKwI,OAAZ;;;;qCAGgBF,QAvBpB,EAuB8BC,UAvB9B,EAuB0C;WACjCC,OAAL,CAAarJ,IAAb,CAAkB,IAAIwH,KAAJ,CAAU2B,QAAV,CAAlB;;WAEK,IAAItI,CAAT,IAAcuI,UAAd,EAA0B;YACpBA,WAAWrP,cAAX,CAA0B8G,CAA1B,CAAJ,EAAkC;cAC1B2I,UAAU,CAAC,KAAKH,OAAL,CAAa,CAAb,EAAgBjC,CAAhB,GAAoBgC,WAAWvI,CAAX,CAArB,IAAsC,GAAtD;eACKwI,OAAL,CAAarJ,IAAb,CAAkB,IAAIwH,KAAJ,CAAUgB,SAASgB,OAAT,EAAkB,KAAKH,OAAL,CAAa,CAAb,EAAgBhC,CAAlC,EAAqC,KAAKgC,OAAL,CAAa,CAAb,EAAgB/B,CAArD,CAAV,CAAlB;;;;aAGG,KAAK+B,OAAZ;;;;;;0BAIYF,QApChB,EAoC0B;aACf,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,GAAD,CAAnB,CAAP;;;;;;0BAIYA,QAzChB,EAyC0B;aACf,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,GAAD,EAAM,GAAN,CAAnB,CAAP;;;;;;2BAIaA,QA9CjB,EA8C2B;aAChB,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CAAnB,CAAP;;;;;;2BAIaA,QAnDjB,EAmD2B;aAChB,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,CAAC,EAAF,EAAM,EAAN,CAAnB,CAAP;;;;;;0BAIYA,QAxDhB,EAwD0B;aACf,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,GAAD,EAAM,GAAN,CAAnB,CAAP;;;;;;2BAIaA,QA7DjB,EA6D2B;aAChB,IAAI,IAAJ,CAASA,QAAT,EAAmB,CAAC,CAAC,EAAF,EAAM,EAAN,EAAU,GAAV,CAAnB,CAAP;;;;;;ACpdJ;AACA;;AAKA,SAASM,iBAAT,CAA4BC,SAA5B,EAAuC;MAC/BC,OAAO,IAAIC,UAAJ,CAAeF,SAAf,CAAb;MACIzD,OAAO,EAAX;;OACK,IAAIpF,IAAI,CAAb,EAAgBA,IAAI8I,KAAKE,UAAzB,EAAqChJ,GAArC,EAA0C;YAChCwF,OAAOyD,YAAP,CAAoBH,KAAK9I,CAAL,CAApB,CAAR;;;SAEKkJ,KAAK9D,IAAL,CAAP;;;AAGF,SAAS+D,oBAAT,CAA+BC,QAA/B,EAAyC;MACjCC,MAAMD,SAASE,WAAT,CAAqB,GAArB,CAAZ;MACID,QAAQ,CAAR,IAAaA,QAAQ,CAAC,CAA1B,EAA6B,OAAO,EAAP;SACtBD,SAASG,MAAT,CAAgBH,SAASE,WAAT,CAAqB,GAArB,IAA4B,CAA5C,CAAP;;;;;;;;;;;;;;;;AAeF,AAAe,SAASE,WAAT,GAA4D;;;;4BA8BzE,kBAA4BC,IAA5B;;;;;;;qBACoBC,MAAMC,SAAN,CAAgBF,IAAhB,CADpB;;;iBAAA;wBAAA,GAEqB,IAAIG,IAAJ,EAFrB;;oBAIMC,IAAIC,IAAJ,CAAS,yBAAT,MAAwC,IAJ9C;;;;;;qBAK+BD,IAAIC,IAAJ,CAAS,yBAAT,EAAoCpM,KAApC,CAA0C,QAA1C,CAL/B;;;0BAAA;0BAMgB;wBACF,YADE;wBAEFqM;eAFV;;;;qBAMsBC,gBAAgBH,GAAhB,CAZ1B;;;uBAAA;;qBAa0BI,aAAaJ,GAAb,CAb1B;;;uBAAA;;qBAcuBK,UAAUL,GAAV,CAdvB;;;0BAAA;;qBAgBsBM,YAAYN,GAAZ,EAAiB,qBAAjB,CAhBtB;;;yBAAA;0BAkBc;wBACF,WADE;wBAEFO;eAFV;yBAlBF,GAuBsBC,UAAU,QAAV,EAAoB1K,MAvB1C;eAAA,GAwBe,CAxBf;;;oBAwBkBK,IAAIsK,WAxBtB;;;;;sBAAA,GAyBqBD,UAAU,QAAV,EAAoBrK,CAApB,CAzBrB;;qBA0B4BuK,mBAAmBV,GAAnB,EAAwBT,QAAxB,EAAkCpJ,CAAlC,EAAqCoK,SAArC,CA1B5B;;;uBAAA;0BA2BgB;wBACF,OADE;wBAEFI;eAFV;0BAIY;wBACF,iBADE;wBAEF,CAACxK,IAAI,CAAL,IAAU,GAAV,GAAgBsK;eAF1B;;;iBA/BJ;;;;;0BAqCc;wBACF,WADE;wBAEFG;eAFV;uBArCF,GA0CoB,IAAIb,IAAJ,EA1CpB;0BA2Cc;wBACF,MADE;wBAEF;wBACAc,YAAYC,UADZ;;;eAFV;;;;;;;;KAzEuE;;oBA8B1DC,WA9B0D;;;;;;;;4BAkFzE,kBAA4Bf,GAA5B,EAAiCT,QAAjC;;;;;6BACS5F,IADT;;qBACoBqG,IAAIC,IAAJ,CAASV,QAAT,EAAmB1L,KAAnB,CAAyB,MAAzB,CADpB;;;;;;;;;;;;KAlFyE;;oBAkF1DyM,WAlF0D;;;;;;;;4BAsFzE,kBAAgCN,GAAhC;;;;;;;qBACiCM,YAAYN,GAAZ,EAAiB,qBAAjB,CADjC;;;8BAAA;;oBAAA,GAGiBgB,iBAAiB,OAAjB,EAA0B,UAA1B,CAHjB;4BAAA,GAIyB,EAJzB;kCAAA,GAK+B,EAL/B;eAAA,GAMe,CANf;;;oBAMkB7K,IAAI8K,OAAOnL,MAN7B;;;;;6BAOYmL,OAAO9K,CAAP,EAAU,OAAV,EAAmB,aAAnB,CAPZ;gDAQW,wEARX,yBAWW,8EAXX;;;;6BASuBb,IAAf,CAAoB2L,OAAO9K,CAAP,EAAU,OAAV,EAAmB,UAAnB,EAA+BuJ,MAA/B,CAAsC,CAAtC,CAApB;;;;mCAGqBpK,IAArB,CAA0B2L,OAAO9K,CAAP,EAAU,OAAV,EAAmB,UAAnB,EAA+BuJ,MAA/B,CAAsC,CAAtC,CAA1B;;;;iBAZR;;;;;gDAiBS;0BACKwB,cADL;gCAEWC;eAnBpB;;;;;;;;KAtFyE;;oBAsF1DhB,eAtF0D;;;;;;;;4BA6GzE,kBAA6BH,GAA7B;;;;;;;qBAEwBM,YAAYN,GAAZ,EAAiB,sBAAjB,CAFxB;;;qBAAA;wBAAA,GAGqBoB,QAAQ,gBAAR,EAA0B,SAA1B,EAAqC,OAArC,CAHrB;gDAIS;yBACIpD,SAASqD,WAAW,IAAX,CAAT,IAA6B,EAA7B,GAAkC,MADtC;0BAEKrD,SAASqD,WAAW,IAAX,CAAT,IAA6B,EAA7B,GAAkC;eANhD;;;;;;;;KA7GyE;;oBA6G1DjB,YA7G0D;;;;;;;;4BAuHzE,kBAA0BJ,GAA1B;;;;;;;qBAC8BM,YAAYN,GAAZ,EAAiB,iCAAjB,CAD9B;;;2BAAA;+BAAA,GAE4BsB,cAAc,eAAd,EAA+B,cAA/B,CAF5B;;oBAIMC,kBAAkBrP,WAAlB,KAAkC+K,KAJxC;;;;;eAAA,GAKiB,CALjB;;;oBAKoB9G,IAAIoL,kBAAkBzL,MAL1C;;;;;oBAMUyL,kBAAkBpL,CAAlB,EAAqB,OAArB,EAA8B,MAA9B,MAA0C,2EANpD;;;;;yBAOmBoL,kBAAkBpL,CAAlB,EAAqB,OAArB,EAA8B,QAA9B,CAAX;;;;iBAPR;;;;;;;;;kBAWaoL,kBAAkB,OAAlB,EAA2B,MAA3B,MAAuC,2EAA3C,EAAwH;2BAClHA,kBAAkB,OAAlB,EAA2B,QAA3B,CAAX;;;;oBAGEC,aAAalS,SAfnB;;;;;oBAgBU4E,MAAM,yBAAN,CAhBV;;;gDAmBSoM,YAAYN,GAAZ,EAAiB,SAASwB,QAA1B,CAnBT;;;;;;;;KAvHyE;;oBAuH1DnB,SAvH0D;;;;;;;;4BA6IzE,kBAAmCL,GAAnC,EAAwCyB,WAAxC,EAAqDC,KAArD,EAA4DnB,SAA5D;;;;;;;0BACc;wBACF,MADE;wBAEF,sBAAsBmB,QAAQ,CAA9B;eAFV,EADF;;;;;qBAAA,GAUkBD,YAAYE,OAAZ,CAAoB,cAApB,EAAoC,oBAApC,IAA4D,OAV9E;;qBAW2BrB,YAAYN,GAAZ,EAAiB4B,OAAjB,CAX3B;;;wBAAA;+BAAA,GAY0BC,WAAW,eAAX,EAA4B,cAA5B,CAZ1B;4BAAA,GAauB,EAbvB;yBAAA,GAcsB,EAdtB;;oBAeMC,kBAAkB5P,WAAlB,KAAkC+K,KAfxC;;;;;eAAA,GAgBiB,CAhBjB;;;oBAgBoB9G,IAAI2L,kBAAkBhM,MAhB1C;;;;;6BAiBcgM,kBAAkB3L,CAAlB,EAAqB,OAArB,EAA8B,MAA9B,CAjBd;gDAkBa,iFAlBb,yBAqBa,gFArBb,yBAsBa,2EAtBb,yBAuBa,2EAvBb,yBAwBa,+EAxBb;;;;+BAmB2B2L,kBAAkB3L,CAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD,CAAjB;;;;0BAOYG,kBAAkB3L,CAAlB,EAAqB,OAArB,EAA8B,IAA9B,CAAZ,IAAmD;wBACzC2L,kBAAkB3L,CAAlB,EAAqB,OAArB,EAA8B,MAA9B,EAAsCwL,OAAtC,CAA8C,sEAA9C,EAAsH,EAAtH,CADyC;0BAEvCG,kBAAkB3L,CAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD;eAFZ;;;iBA1BV;;;;;;;;;+BAkCqBG,kBAAkB,OAAlB,EAA2B,QAA3B,EAAqCH,OAArC,CAA6C,KAA7C,EAAoD,MAApD,CAAjB;;;;qBAI+BrB,YAAYN,GAAZ,EAAiB+B,cAAjB,CAtCnC;;;gCAAA;+BAAA,GAuC4BC,WAAWC,kBAAX,CAvC5B;6BAAA,GAwC0BA,mBAAmB,aAAnB,EAAkC,aAAlC,EAAiD,sBAAjD,CAxC1B;;kBA2CMC,oBAAoB5S,SAAxB,EAAmC;uCACV4S,gBAAgB,OAAhB,CAAvB;eA5CJ;;;;;;oCAAA,GAkDiCH,eAAeJ,OAAf,CAAuB,0BAAvB,EAAmD,gCAAnD,IAAuF,OAlDxH;;qBAmDsCrB,YAAYN,GAAZ,EAAiBmC,sBAAjB,CAnDtC;;;mCAAA;kCAoDsBC,sBAAsB,eAAtB,EAAuC,cAAvC,CAApB;4BApDF,GAqDuB,EArDvB;0BAAA,GAsDuB,EAtDvB;;oBAuDMN,kBAAkB5P,WAAlB,KAAkC+K,KAvDxC;;;;;gBAAA,GAwDiB,CAxDjB;;;oBAwDoB9G,KAAI2L,kBAAkBhM,MAxD1C;;;;;6BAyDcgM,kBAAkB3L,EAAlB,EAAqB,OAArB,EAA8B,MAA9B,CAzDd;gDA0Da,iFA1Db;;;;+BA2D2B2L,kBAAkB3L,EAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD,CAAjB;;;;2BAGaG,kBAAkB3L,EAAlB,EAAqB,OAArB,EAA8B,IAA9B,CAAb,IAAoD;wBAC1C2L,kBAAkB3L,EAAlB,EAAqB,OAArB,EAA8B,MAA9B,EAAsCwL,OAAtC,CAA8C,sEAA9C,EAAsH,EAAtH,CAD0C;0BAExCG,kBAAkB3L,EAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD;eAFZ;;;kBA9DV;;;;;;;;;+BAqEqBG,kBAAkB,OAAlB,EAA2B,QAA3B,EAAqCH,OAArC,CAA6C,KAA7C,EAAoD,MAApD,CAAjB;;;;qBAG+BrB,YAAYN,GAAZ,EAAiBqC,cAAjB,CAxEnC;;;gCAAA;mCAAA,GAyEgCC,kBAAkBC,kBAAlB,EAAsC,CAAC,aAAD,EAAgB,YAAhB,CAAtC,CAzEhC;+BAAA,GA0E4BP,WAAWO,kBAAX,CA1E5B;;;oCAAA,GA8EiCF,eAAeV,OAAf,CAAuB,0BAAvB,EAAmD,gCAAnD,IAAuF,OA9ExH;;qBA+EsCrB,YAAYN,GAAZ,EAAiBwC,sBAAjB,CA/EtC;;;mCAAA;kCAgFsBC,sBAAsB,eAAtB,EAAuC,cAAvC,CAApB;2BAhFF,GAiFsB,EAjFtB;0BAAA,GAkFuB,EAlFvB;;oBAmFMX,kBAAkB5P,WAAlB,KAAkC+K,KAnFxC;;;;;iBAAA,GAoFiB,CApFjB;;;oBAoFoB9G,MAAI2L,kBAAkBhM,MApF1C;;;;;6BAqFcgM,kBAAkB3L,GAAlB,EAAqB,OAArB,EAA8B,MAA9B,CArFd;gDAsFa,2EAtFb;;;;8BAuF0B2L,kBAAkB3L,GAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD,CAAhB;;;;2BAGaG,kBAAkB3L,GAAlB,EAAqB,OAArB,EAA8B,IAA9B,CAAb,IAAoD;wBAC1C2L,kBAAkB3L,GAAlB,EAAqB,OAArB,EAA8B,MAA9B,EAAsCwL,OAAtC,CAA8C,sEAA9C,EAAsH,EAAtH,CAD0C;0BAExCG,kBAAkB3L,GAAlB,EAAqB,OAArB,EAA8B,QAA9B,EAAwCwL,OAAxC,CAAgD,KAAhD,EAAuD,MAAvD;eAFZ;;;mBA1FV;;;;;;;;;8BAiGoBG,kBAAkB,OAAlB,EAA2B,QAA3B,EAAqCH,OAArC,CAA6C,KAA7C,EAAoD,MAApD,CAAhB;;;oBAIEe,kBAAkBpT,SArGxB;;;;;;qBAsGyBgR,YAAYN,GAAZ,EAAiB0C,aAAjB,CAtGzB;;;0BAAA;;;;qBAyG6BpC,YAAYN,GAAZ,EAAiByB,WAAjB,CAzG7B;;;0BAAA;mBAAA,GA0GgBkB,aAAa,OAAb,EAAsB,QAAtB,EAAgC,UAAhC,CA1GhB;qBAAA,GA2GkB;uBACP3C,GADO;qCAEO4C,iBAFP;qCAGOC,iBAHP;+BAICC,WAJD;yCAKWC,qBALX;gCAMEC,YANF;gCAOEC;eAlHpB;qBAAA,GAqHkBC,uBAAuBP,YAAvB,EAAqCV,kBAArC,EAAyDM,kBAAzD,EAA6EY,OAA7E,CArHlB;oBAAA,GAuHe,4BAA4B5C,UAAU6C,KAAtC,GAA8C,aAA9C,GAA8D7C,UAAU8C,MAAxE,GAAiF,KAAjF,GAAyFC,OAAzF,GAAmG,KAvHlH;qDAyHsBC,KAzHtB;;;;;;;;qBAAA;;oBA0HQA,MAAMC,OAAN,EAAetR,WAAf,KAA+B+K,KA1HvC;;;;;iBAAA,GA2HmB,CA3HnB;;;oBA2HsB9G,MAAIoN,MAAMC,OAAN,EAAe1N,MA3HzC;;;;;;qBA4HwB2N,oBAAoBD,OAApB,EAA6BD,MAAMC,OAAN,EAAerN,GAAf,CAA7B,EAAgDgN,OAAhD,CA5HxB;;;oBAAA;;;mBAAA;;;;;;;;;;qBA+HsBM,oBAAoBD,OAApB,EAA6BD,MAAMC,OAAN,CAA7B,EAA6CL,OAA7C,CA/HtB;;;oBAAA;;;;;;;gDAmIS/P,SAAS,YAnIlB;;;;;;;;KA7IyE;;oBA6I1DsN,kBA7I0D;;;;;;;;4BAwUzE,kBAAoC8C,OAApC,EAA6CE,SAA7C,EAAwDP,OAAxD;;;;;;oBAAA,GACe,EADf;6BAGUK,OAHV;gDAIS,MAJT,wBAOS,SAPT,wBAUS,OAVT,wBAaS,gBAbT,yBAgBS,SAhBT;;;;;uBAKeG,cAAcD,SAAd,EAAyBP,OAAzB,CAAT;;;;;uBAGSS,iBAAiBF,SAAjB,EAA4BP,OAA5B,CAAT;;;;;uBAGSU,eAAeH,SAAf,EAA0BP,OAA1B,CAAT;;;;;qBAGeW,wBAAwBJ,SAAxB,EAAmCP,OAAnC,CAdrB;;;oBAAA;;;;;qBAiBqBY,mBAAmBL,SAAnB,EAA8BP,OAA9B,CAjBrB;;;oBAAA;;;;gDAsBS/P,MAtBT;;;;;;;;KAxUyE;;oBAwU1DqQ,mBAxU0D;;;;;;;;4BAiWzE,kBAAmC/H,IAAnC,EAAyCyH,OAAzC;;;;;;oBAAA,GACiB,KAAK,MADtB;sBAAA,GAGmBzH,KAAK,WAAL,EAAkB,QAAlB,CAHnB;eAAA,GAIYsC,SAASgG,SAAS,OAAT,EAAkB,OAAlB,EAA2B,GAA3B,CAAT,IAA4CC,MAJxD;eAAA,GAKYjG,SAASgG,SAAS,OAAT,EAAkB,OAAlB,EAA2B,GAA3B,CAAT,IAA4CC,MALxD;iBAAA,GAMcjG,SAASgG,SAAS,SAAT,EAAoB,OAApB,EAA6B,GAA7B,CAAT,IAA8CC,MAN5D;iBAAA,GAOcjG,SAASgG,SAAS,SAAT,EAAoB,OAApB,EAA6B,GAA7B,CAAT,IAA8CC,MAP5D;gBAAA,GAQajG,SAASgG,SAAS,OAAT,EAAkB,OAAlB,EAA2B,IAA3B,CAAT,IAA6CC,MAR1D;gBAAA,GASajG,SAASgG,SAAS,OAAT,EAAkB,OAAlB,EAA2B,IAA3B,CAAT,IAA6CC,MAT1D;kBAAA,GAUejG,SAASgG,SAAS,SAAT,EAAoB,OAApB,EAA6B,IAA7B,CAAT,IAA+CC,MAV9D;kBAAA,GAWejG,SAASgG,SAAS,SAAT,EAAoB,OAApB,EAA6B,IAA7B,CAAT,IAA+CC,MAX9D;mBAAA,GAagBvI,KAAK,OAAL,EAAc,OAAd,CAbhB;oBAAA,GAee,iDAAiDwI,KAAjD,GAAyD,SAAzD,IAAsEC,IAAIC,GAA1E,IAAiF,YAAjF,IAAiGC,IAAIC,GAArG,IAA4G,aAA5G,IAA6HC,KAAKC,IAAlI,IAA0I,cAA1I,IAA4JC,KAAKC,IAAjK,IAAyK,QAfxL;;qDAkBsBhJ,IAlBtB;;;;;;;;qBAAA;;oBAmBQA,KAAK8H,OAAL,EAActR,WAAd,KAA8B+K,KAnBtC;;;;;eAAA,GAoBmB,CApBnB;;;oBAoBsB9G,IAAIuF,KAAK8H,OAAL,EAAc1N,MApBxC;;;;;;qBAqBwB2N,oBAAoBD,OAApB,EAA6B9H,KAAK8H,OAAL,EAAcrN,CAAd,CAA7B,EAA+CgN,OAA/C,CArBxB;;;oBAAA;;;iBAAA;;;;;;;;;;qBAwBsBM,oBAAoBD,OAApB,EAA6B9H,KAAK8H,OAAL,CAA7B,EAA4CL,OAA5C,CAxBtB;;;oBAAA;;;;;;;wBA4BY,QAAV;gDAEO/P,MA9BT;;;;;;;;KAjWyE;;oBAiW1D2Q,kBAjW0D;;;;;;;;4BAqtCzE,mBAAwCrI,IAAxC,EAA8CyH,OAA9C;;;;;;oBAAA,GACe,EADf;4BAAA,GAEyBb,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,eAAd,EAA+B,OAA/B,EAAwC,KAAxC,CAAxB,CAFzB;8BAIUiJ,cAJV;kDAKS,wDALT,yBAQS,wDART,yBAWS,0DAXT;;;;uBAMeC,SAASlJ,IAAT,EAAeyH,OAAf,CAAT;;;;;qBAGe0B,SAASnJ,IAAT,EAAeyH,OAAf,CATrB;;;oBAAA;;;;uBAYe2B,WAAWpJ,IAAX,EAAiByH,OAAjB,CAAT;;;;iDAKG/P,MAjBT;;;;;;;;KArtCyE;;oBAqtC1D0Q,uBArtC0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAg5DzE,mBAAyBpI,IAAzB,EAA+ByH,OAA/B;;;;;;mBAAA,GACgBzH,KAAK,OAAL,EAAc,OAAd,CADhB;sBAAA,GAEmB4G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,CAAxB,CAFnB;oBAAA,GAGiB,oBAAoBqJ,OAApB,GAA8B,qCAA9B,GACbC,YAAYhB,QAAZ,EAAsB1U,SAAtB,EAAiCA,SAAjC,CADa,GACiC2V,QAAQjB,QAAR,EAAkB1U,SAAlB,EAA6BA,SAA7B,CADjC,GAEb,YAFa,GAEE4U,KAFF,GAEU,YAL3B;iBAAA,GAOcxI,KAAK,WAAL,EAAkB,eAAlB,EAAmC,SAAnC,EAA8C,OAA9C,EAAuD,MAAvD,CAPd;qBAAA,GAQkByH,QAAQ,aAAR,EAAuB+B,GAAvB,EAA4B,QAA5B,CARlB;;qBASwB5E,YAAY6C,QAAQ,KAAR,CAAZ,EAA4BgC,OAA5B,CATxB;;;qBAAA;sBAAA,GAUmB7C,kBAAkBlB,OAAlB,EAA2B,CAAC,cAAD,EAAiB,SAAjB,EAA4B,YAA5B,CAA3B,CAVnB;uBAAA,GAYkB,IAZlB;sDAakBgE,QAblB;;;;;;;;iBAAA;8BAcYxP,GAdZ;kDAeW,aAfX,0BAyBW,YAzBX,0BAmCW,YAnCX,0BA6CW,cA7CX,0BAuDW,aAvDX,0BAiEW,gBAjEX,0BA2EW,SA3EX,0BA6EW,SA7EX;;;;0BAgBoB;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,WAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;0BAUY;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,UAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;0BAUY;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,UAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;0BAUY;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,YAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;0BAUY;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,WAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;0BAUY;wBACF,aADE;wBAEF;6BACK,UAAUmP,OADf;+BAEO,cAFP;+BAGOM,iBAAiBD,SAASxP,GAAT,EAAc,OAAd,CAAjB;;eALjB;;;;;;;;;;;;;;kBAiBF0P,cAAc,IAAlB,EAAwB;uBACfhQ,IAAP,CAAYgQ,SAAZ;;;;iDAIKlS,MAxFT;;;;;;;;KAh5DyE;;oBAg5D1DyR,QAh5D0D;;;;;MAAtCU,YAAsC,uEAAvB,YAAM,EAAiB;MAAbC,WAAa;MACnEC,SAAS,EAAf;MACIV,UAAU,CAAd;MAEIW,eAAe,IAAnB;MAEIC,uBAAuB,EAA3B;MAEMC,aAAa,EAAnB;MAEIC,WAAJ;;;;4BAEa,iBAAMC,CAAN;;;;;4BACHA,EAAE3S,IADC;8CAEJ,aAFI;;;;;;qBAIC4N,YAAY+E,EAAElG,IAAd,CAJD;;;;;;;;;sBAMGmG,KAAR,CAAc,sCAAd;0BACY;sBACJ,OADI;sBAEJ,YAAEzX,QAAF;eAFR;;;;;;;;;;;KAPR;;;;;;;WAuQS0T,UAAT,CAAqBZ,OAArB,EAA8B;QACtB1L,OAAOxG,OAAOwG,IAAP,CAAY0L,OAAZ,CAAb;QACM4E,aAAa5E,QAAQ1L,KAAK,CAAL,CAAR,EAAiB,QAAjB,EAA2B,UAA3B,CAAnB;QAEMuQ,UAAU,EAAhB;QACMC,WAAW,EAAjB;QACMC,YAAY,EAAlB;;SAEK,IAAIvQ,GAAT,IAAgBoQ,UAAhB,EAA4B;UACtBpQ,QAAQ,aAAR,IAAyBA,QAAQ,WAArC,EAAkD;;;;UAI5CwQ,aAAaJ,WAAWpQ,GAAX,CAAnB;;UAEIwQ,WAAWlU,WAAX,KAA2B+K,KAA/B,EAAsC;aAC/B,IAAI9G,IAAI,CAAb,EAAgBA,IAAIiQ,WAAWtQ,MAA/B,EAAuCK,GAAvC,EAA4C;cACpCkQ,aAAaD,WAAWjQ,CAAX,EAAc,UAAd,CAAnB;cACMmQ,KAAKhE,kBAAkB+D,UAAlB,EAA8B,CAAC,SAAD,EAAY,OAAZ,EAAqB,IAArB,CAA9B,CAAX;cACME,MAAMjE,kBAAkB+D,UAAlB,EAA8B,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,KAA5B,CAA9B,CAAZ;cACMlT,OAAOmP,kBAAkB+D,UAAlB,EAA8B,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,MAA5B,CAA9B,CAAb;;cAEIC,OAAOhX,SAAX,EAAsB;oBACZgX,EAAR,IAAcF,WAAWjQ,CAAX,CAAd;;;cAEEoQ,QAAQjX,SAAZ,EAAuB;qBACZiX,GAAT,IAAgBH,WAAWjQ,CAAX,CAAhB;;;cAEEhD,SAAS7D,SAAb,EAAwB;sBACZ6D,IAAV,IAAkBiT,WAAWjQ,CAAX,CAAlB;;;OAdN,MAiBO;YACCkQ,cAAaD,WAAW,UAAX,CAAnB;;YACME,MAAKhE,kBAAkB+D,WAAlB,EAA8B,CAAC,SAAD,EAAY,OAAZ,EAAqB,IAArB,CAA9B,CAAX;;YACME,OAAMjE,kBAAkB+D,WAAlB,EAA8B,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,KAA5B,CAA9B,CAAZ;;YACMlT,QAAOmP,kBAAkB+D,WAAlB,EAA8B,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,MAA5B,CAA9B,CAAb;;YAEIC,QAAOhX,SAAX,EAAsB;kBACZgX,GAAR,IAAcF,UAAd;;;YAEEG,SAAQjX,SAAZ,EAAuB;mBACZiX,IAAT,IAAgBH,UAAhB;;;YAEEjT,UAAS7D,SAAb,EAAwB;oBACZ6D,KAAV,IAAkBiT,UAAlB;;;;;WAKC;iBAAYH,OAAZ;kBAAiCC,QAAjC;mBAAwDC;KAA/D;;;WA6DOxC,aAAT,CAAwBjI,IAAxB,EAA8ByH,OAA9B,EAAuC;;;;;;;;;;;;QAa/BmD,KAAK5K,KAAK,UAAL,EAAiB,SAAjB,EAA4B,OAA5B,EAAqC,IAArC,CAAX;QACMhJ,OAAOgJ,KAAK,UAAL,EAAiB,SAAjB,EAA4B,OAA5B,EAAqC,MAArC,CAAb;QACM6K,MAAO7K,KAAK,UAAL,EAAiB,QAAjB,EAA2B,MAA3B,MAAuCpM,SAAxC,GAAqDA,SAArD,GAAiEoM,KAAK,UAAL,EAAiB,QAAjB,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C,KAA5C,CAA7E;QACIvI,OAAQuI,KAAK,UAAL,EAAiB,QAAjB,EAA2B,MAA3B,MAAuCpM,SAAxC,GAAqDA,SAArD,GAAiEoM,KAAK,UAAL,EAAiB,QAAjB,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C,MAA5C,CAA5E;QACMwI,QAAQxI,KAAK,OAAL,EAAc,OAAd,CAAd;QAEI8K,iBAAJ;QACIC,iBAAJ;;QAEItT,SAAS7D,SAAb,EAAwB;UAClBiX,QAAQjX,SAAZ,EAAuB;4BACD6T,QAAQ,mBAAR,EAA6B,WAA7B,EAA0ChQ,IAA1C,CAApB;4BACoBgQ,QAAQ,mBAAR,EAA6B,WAA7B,EAA0ChQ,IAA1C,CAApB;OAFF,MAGO;4BACegQ,QAAQ,mBAAR,EAA6B,WAA7B,EAA0ChQ,IAA1C,CAApB;4BACoBgQ,QAAQ,mBAAR,EAA6B,WAA7B,EAA0ChQ,IAA1C,CAApB;;KANJ,MAQO;UACDoT,QAAQjX,SAAZ,EAAuB;4BACD6T,QAAQ,mBAAR,EAA6B,UAA7B,EAAyCoD,GAAzC,CAApB;4BACoBpD,QAAQ,mBAAR,EAA6B,UAA7B,EAAyCoD,GAAzC,CAApB;OAFF,MAGO;;;;QAKLpT,SAAS7D,SAAb,EAAwB;aACfgT,kBAAkBkE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,QAAb,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC,MAAxC,CAArC,CAAP;;UACIrT,SAAS7D,SAAb,EAAwB;eACfgT,kBAAkBmE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,QAAb,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC,MAAxC,CAArC,CAAP;;;;WAIGC,SAAShL,IAAT,EAAe8K,iBAAf,EAAkCC,iBAAlC,EAAqDH,EAArD,EAAyD5T,IAAzD,EAA+D6T,GAA/D,EAAoEpT,IAApE,EAA0E+Q,KAA1E,EAAiFf,OAAjF,CAAP;;;WAGOS,gBAAT,CAA2BlI,IAA3B,EAAiCyH,OAAjC,EAA0C;QAClCmD,KAAK5K,KAAK,aAAL,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,IAAxC,CAAX;QACMhJ,OAAOgJ,KAAK,aAAL,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,MAAxC,CAAb,CAFwC;;;;QAMlCwI,QAAQxI,KAAK,OAAL,EAAc,OAAd,CAAd;WAEOgL,SAAShL,IAAT,EAAepM,SAAf,EAA0BA,SAA1B,EAAqCgX,EAArC,EAAyC5T,IAAzC,EAA+CpD,SAA/C,EAA0DA,SAA1D,EAAqE4U,KAArE,EAA4Ef,OAA5E,CAAP;;;WAGOuD,QAAT,CAAmBhL,IAAnB,EAAyB8K,iBAAzB,EAA4CC,iBAA5C,EAA+DH,EAA/D,EAAmE5T,IAAnE,EAAyE6T,GAAzE,EAA8EpT,IAA9E,EAAoF+Q,KAApF,EAA2Ff,OAA3F,EAAoG;QAC5FwD,WAAW,CAAC,QAAD,EAAW,QAAX,CAAjB;QACMC,gBAAgBtE,kBAAkB5G,IAAlB,EAAwBiL,QAAxB,CAAtB;QACME,sBAAsBvE,kBAAkBkE,iBAAlB,EAAqCG,QAArC,CAA5B;QACMG,sBAAsBxE,kBAAkBmE,iBAAlB,EAAqCE,QAArC,CAA5B;QAEIvT,SAAS,EAAb;QACM2T,QAAQzE,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,OAAV,CAAxB,CAAd,CAPkG;;QAS5FsL,WAAW1E,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,EAAkC,MAAlC,CAAxB,CAAjB,CATkG;;QAY5FuL,eAAe3E,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,CAAxB,CAArB;QAEIwL,UAAU,KAAd;;QACI5E,kBAAkBsE,aAAlB,EAAiC,CAAC,OAAD,EAAU,OAAV,CAAjC,MAAyD,GAAzD,IAAgEtE,kBAAkBsE,aAAlB,EAAiC,CAAC,OAAD,EAAU,OAAV,CAAjC,MAAyD,GAA7H,EAAkI;gBACtH,IAAV;KAhBgG;;;;QAoB5FO,SAASC,eAAe9E,kBAAkBsE,aAAlB,EAAiC,CAAC,OAAD,EAAU,KAAV,CAAjC,CAAf,CAAf,CApBkG;;;QAuB9FS,CAAJ;QACI3K,CAAJ;QACI4K,MAAJ;QACIC,gBAAJ;QACIC,gBAAJ;QACIC,SAAJ;QACIC,cAAc,KAAlB;QACIC,aAAa,KAAjB;;QACIX,aAAa1X,SAAb,IAA0B2X,iBAAiB3X,SAA/C,EAA0D;;;;UAKlDsY,MAAMtF,kBAAkBsE,aAAlB,EAAiC,CAAC,OAAD,EAAU,OAAV,CAAjC,CAAZ;UACI5I,SAAS4J,IAAI,IAAJ,CAAT,IAAsB,EAAtB,GAA2B,MAA/B;UACI5J,SAAS4J,IAAI,IAAJ,CAAT,IAAsB,EAAtB,GAA2B,MAA/B;gBAEU,kCAAkCtB,EAAlC,GAAuC,YAAvC,GAAsDC,GAAtD,GAA4D,aAA5D,GAA4EpT,IAA5E,GAAmF,YAAnF,GAAkGT,IAAlG,GACR,aADQ,GAERsS,YAAY4B,aAAZ,EAA2BtX,SAA3B,EAAsCA,SAAtC,CAFQ,GAGR2V,QAAQ2B,aAAR,EAAuBtX,SAAvB,EAAkCA,SAAlC,CAHQ,GAIR,YAJQ,GAIO4U,KAJP,GAIe,GAJf,GAKR,oBALQ,GAKeiD,MALf,GAKwB,OALxB,GAMR,KANF;gBAOU,QAAV,CAhBwD;;kBAkB5CU,aAAanM,IAAb,EAAmB,IAAnB,EAAyByH,OAAzB,CAAZ;UACM2E,cAAcC,YAAYzF,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,CAAxB,CAAZ,CAApB,CAnBwD;;UAqBpDoM,gBAAgB,eAApB,EAAqC;sBACrB,IAAd;YACME,aAAaP,UAAUQ,KAA7B;YACMC,OAAOT,UAAUU,GAAvB;YACMC,WAAWC,eAAehB,CAAf,EAAkB3K,CAAlB,EAAqBwL,IAArB,EAA2BF,UAA3B,EAAuCjB,KAAvC,CAAjB,CAJmC;;kBAMzBqB,QAAV;OANF,MAOO,IAAIN,gBAAgB,UAApB,EAAgC;qBACxB,IAAb;YACMQ,WAAWC,mBAAmBd,SAAnB,EAA8BV,KAA9B,CAAjB,CAFqC;;;kBAK3BuB,QAAV;OAjCsD;;;eAoC/CE,UAAU9M,IAAV,EAAgB,IAAhB,CAAT;yBAEmB4G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,EAAgC,OAAhC,CAAxB,CAAnB;yBACmB4G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,EAAgC,OAAhC,CAAxB,CAAnB,CAvCwD;;UA0CnD6L,qBAAqBjY,SAArB,KAAmCiY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAD,IACDC,qBAAqBlY,SAArB,KAAmCkY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CADH,EACyH;YACjHiB,iBAAiB,iCAAiC1B,KAAjC,GAAyC,+FAAzC,GAA2IO,OAAOW,KAAlJ,GAA0J,YAA1J,GAAyKX,OAAOW,KAAhL,GACrB,4GADF;kBAEUQ,cAAV;;;gBAEQ,SAAV;;;QAEEzB,aAAa1X,SAAb,IAA0B2X,iBAAiB3X,SAA/C,EAA0D;cAChD0X,QAAR;aACO,sBAAL;aACK,sBAAL;aACK,sBAAL;aACK,gBAAL;aACK,gBAAL;aACK,gBAAL;aACK,0BAAL;aACK,uBAAL;aACK,mBAAL;aACK,sBAAL;aACK,iBAAL;aACK,yBAAL;aACK,kBAAL;aACK,kBAAL;aACK,yBAAL;aACK,mBAAL;aACK,oBAAL;aACK,mBAAL;aACK,KAAL;aACK,OAAL;aACK,UAAL;aACK,gBAAL;aACK,gBAAL;aACK,gBAAL;aACK,WAAL;aACK,aAAL;aACK,UAAL;aACK,UAAL;aACK,UAAL;aACK,KAAL;aACK,WAAL;aACK,WAAL;aACK,QAAL;aACK,SAAL;aACK,OAAL;aACK,OAAL;aACK,cAAL;aACK,QAAL;aACK,YAAL;aACK,MAAL;aACK,YAAL;aACK,OAAL;aACK,YAAL;aACK,kBAAL;aACK,eAAL;aACK,gBAAL;aACK,2BAAL;aACK,kBAAL;aACK,oBAAL;aACK,mBAAL;aACK,gBAAL;aACK,kBAAL;aACK,mBAAL;aACK,kBAAL;aACK,sBAAL;aACK,0BAAL;aACK,uBAAL;aACK,uBAAL;aACK,uBAAL;aACK,sBAAL;aACK,0BAAL;aACK,gBAAL;aACK,wBAAL;aACK,yBAAL;aACK,2BAAL;aACK,wBAAL;aACK,aAAL;aACK,4BAAL;aACK,sBAAL;aACK,kBAAL;aACK,sBAAL;aACK,sBAAL;aACK,eAAL;aACK,0BAAL;aACK,qBAAL;aACK,cAAL;aACK,OAAL;aACK,QAAL;aACK,OAAL;aACK,OAAL;aACK,WAAL;aACK,OAAL;aACK,WAAL;aACK,kBAAL;aACK,gBAAL;aACK,gBAAL;aACK,kBAAL;aACK,WAAL;aACK,aAAL;aACK,uBAAL;aACK,iBAAL;aACK,eAAL;aACK,SAAL;aACK,YAAL;aACK,WAAL;aACK,WAAL;aACK,cAAL;aACK,cAAL;aACK,UAAL;aACK,MAAL;aACK,uBAAL;aACK,WAAL;aACK,KAAL;aACK,UAAL;aACK,QAAL;aACK,YAAL;aACK,kBAAL;aACK,MAAL;aACK,QAAL;aACK,SAAL;aACK,mBAAL;aACK,YAAL;aACK,cAAL;aACK,YAAL;aACK,gBAAL;aACK,gBAAL;aACK,YAAL;aACK,WAAL;aACK,eAAL;aACK,eAAL;aACK,eAAL;aACK,YAAL;aACK,QAAL;aACK,QAAL;aACK,QAAL;aACK,QAAL;aACK,QAAL;aACK,OAAL;aACK,OAAL;aACK,OAAL;aACK,OAAL;aACK,OAAL;aACK,KAAL;aACK,UAAL;aACK,gBAAL;aACK,oBAAL;aACK,gBAAL;aACK,MAAL;aACK,qBAAL;aACK,kBAAL;aACK,uBAAL;;sBACY,mCAAmCK,CAAnC,GAAuC,cAAvC,GAAwD3K,CAAxD,GAA4D,YAA5D,IAA4E,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAA/K,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,SAAL;;sBACY,mBAAoBrB,IAAI,CAAxB,GAA6B,UAA7B,GAA2C3K,IAAI,CAA/C,GAAoD,UAApD,GAAkE2K,IAAI,CAAtE,GAA2E,UAA3E,GAAyF3K,IAAI,CAA7F,GAAkG,YAAlG,IAAkH,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAArN,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,WAAL;;sBACY,mCAAmCrB,CAAnC,GAAuC,cAAvC,GAAwD3K,CAAxD,GAA4D,8BAA5D,IAA8F,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAjM,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,gBAAL;;;gBACMxK,CAAJ;;gBACIgJ,OAAJ,EAAa;kBACP,SAASG,CAAT,GAAa,KAAb,GAAqB3K,CAArB,GAAyB,GAAzB,GAA+B2K,CAA/B,GAAmC,KAAnC,GAA2C3K,CAA3C,GAA+C,IAAnD;aADF,MAEO;kBACD,OAAO2K,CAAP,GAAW,OAAX,GAAqBA,CAArB,GAAyB,GAAzB,GAA+B3K,CAA/B,GAAmC,OAAnC,GAA6CA,CAAjD;;;sBAEQ,eAAewB,CAAf,GAAmB,cAAnB,GAAoCoJ,OAAOW,KAA3C,GACR,oBADQ,GACeX,OAAOlE,KADtB,GAC8B,wBAD9B,GACyDkE,OAAOoB,eADhE,GACkF,mBAD5F;;gBAEInB,qBAAqBjY,SAArB,KAAmCiY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;wBAC7G,wCAAwCR,KAAxC,GAAgD,MAA1D;;;gBAEES,qBAAqBlY,SAArB,KAAmCkY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;wBAC7G,sCAAsCT,KAAtC,GAA8C,MAAxD;;;sBAEQ,IAAV;;;;aAGG,YAAL;;sBACY,8BAA8BrK,CAA9B,GAAkC,GAAlC,GAAwC2K,CAAxC,GAA4C,GAA5C,GAAkD3K,CAAlD,GAAsD,YAAtD,IAAsE,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAzK,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,UAAL;;gBACQC,YAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB;gBACIkN,eAAe,GAAnB;;gBACID,cAAcrZ,SAAlB,EAA6B;6BACZ0O,SAAS2K,UAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,EAAhC,GAAqC,OAApD,CAD2B;;;sBAInB,wBAAyB2H,IAAIuB,YAA7B,GAA6C,OAA7C,GAAuDlM,CAAvD,GAA2D,GAA3D,GAAiE2K,CAAjE,GAAqE,GAArE,GAA2E3K,CAA3E,GAA+E,YAA/E,IAA+F,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAlM,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,SAAL;;sBACY,wBAAyBrB,IAAI,CAA7B,GAAkC,OAAlC,GAA6C3K,IAAI,CAAjD,GAAsD,GAAtD,GAA6D2K,IAAI,CAAjE,GAAsE,GAAtE,GAA4E3K,CAA5E,GAAgF,GAAhF,GAAsF2K,CAAtF,GAA0F,GAA1F,GAAiG3K,IAAI,CAArG,GAA0G,YAA1G,IAA0H,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAA7N,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,WAAL;;gBACQC,aAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB;;gBACImN,WAAW,IAAf;gBACMC,cAAc,MAApB;;gBACIH,eAAcrZ,SAAlB,EAA6B;kBACrByZ,QAAQ/K,SAAS2K,WAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,EAAhC,GAAqC,OAAnD;yBACYqJ,QAAQ,GAAT,GAAgBD,WAA3B,CAF2B;;;sBAKnB,wBAAyBzB,IAAIwB,QAA7B,GAAyC,OAAzC,GAAmDnM,CAAnD,GAAuD,GAAvD,GAA6D2K,CAA7D,GAAiE,GAAjE,GAAuE3K,CAAvE,GAA2E,GAA3E,GAAiF,CAAC,IAAImM,QAAL,IAAiBxB,CAAlG,GAAsG,cAAtG,IAAwH,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAA3N,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,eAAL;;gBACQC,cAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB;;gBACImN,YAAW,IAAf;;gBACIC,YAAJ;;gBACIzB,IAAI3K,CAAR,EAAW;6BACK2K,IAAI3K,CAAlB;aADF,MAEO;6BACSA,IAAI2K,CAAlB;;;gBAEEsB,gBAAcrZ,SAAlB,EAA6B;kBACrByZ,SAAQ/K,SAAS2K,YAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,MAA9C;;0BACWqJ,SAAQD,YAAnB,CAF2B;;;sBAKnB,wBAAwBD,YAAWxB,CAAnC,GAAuC,OAAvC,GAAiD3K,CAAjD,GAAqD,GAArD,GAA2D,CAAC,IAAImM,SAAL,IAAiBxB,CAA5E,GAAgF,GAAhF,GAAsF3K,CAAtF,GAA0F,GAA1F,GAAgG2K,CAAhG,GAAoG,cAApG,IAAsH,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAzN,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,UAAL;;sBACY,wBAAyB,MAAMrB,CAA/B,GAAoC,OAApC,GAA+C,QAAQ3K,CAAvD,GAA4D,GAA5D,GAAmE,OAAO2K,CAA1E,GAA+E,GAA/E,GAAqF3K,CAArF,GAAyF,GAAzF,GAA+F,OAAO2K,CAAtG,GAA0G,GAA1G,GAAgH3K,CAAhH,GAAoH,GAApH,GAA0H2K,CAA1H,GAA8H,GAA9H,GAAoI,QAAQ3K,CAA5I,GAAgJ,YAAhJ,IAAgK,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAnQ,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,SAAL;;gBACQM,iBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIiN,WAAJ;;iBACK,IAAIxS,IAAI,CAAb,EAAgBA,IAAI6S,eAAelT,MAAnC,EAA2CK,GAA3C,EAAgD;kBAC1CmM,kBAAkB0G,eAAe7S,CAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,MAA4D,KAAhE,EAAuE;8BACzDmM,kBAAkB0G,eAAe7S,CAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAZ;;;;gBAGA0S,aAAW,IAAf;gBACMC,gBAAc,OAApB;;gBAEIH,gBAAcrZ,SAAlB,EAA6B;kBACrByZ,UAAQ/K,SAAS2K,YAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,EAAhC,GAAqC,OAAnD;;2BACYqJ,UAAQ,GAAT,GAAgBD,aAA3B,CAF2B;;;sBAKnB,wBAAyBzB,IAAIwB,UAA7B,GAAyC,OAAzC,GAAoDnM,IAAI,CAAxD,GAA6D,GAA7D,GAAoE2K,IAAIwB,UAAxE,GAAoF,GAApF,GAA0FnM,CAA1F,GAA8F,GAA9F,GAAoG,CAAC,IAAImM,UAAL,IAAiBxB,CAArH,GAAyH,GAAzH,GAA+H3K,CAA/H,GAAmI,GAAnI,GAAyI2K,CAAzI,GAA6I,GAA7I,GAAoJ3K,IAAI,CAAxJ,GAA6J,GAA7J,GAAmK,CAAC,IAAImM,UAAL,IAAiBxB,CAApL,GAAwL,cAAxL,IAA0M,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAA7S,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,OAD5H;;;;aAIG,UAAL;;sBACY,wBAAyB,MAAMrB,CAA/B,GAAoC,KAApC,GAA4CA,IAAI,CAAhD,GAAoD,GAApD,GAA0D3K,IAAI,CAA9D,GAAkE,KAAlE,GAA2E,IAAI,CAAL,GAAUA,CAApF,GAAwF,GAAxF,GAA8F2K,IAAI,CAAlG,GAAsG,GAAtG,GAA4G3K,CAA5G,GAAgH,GAAhH,GAAuH,IAAI,CAAL,GAAU2K,CAAhI,GAAoI,GAApI,GAA0I3K,CAA1I,GAA8I,GAA9I,GACR2K,CADQ,GACJ,GADI,GACG,IAAI,CAAL,GAAU3K,CADZ,GACgB,GADhB,GACuB,IAAI,CAAL,GAAU2K,CADhC,GACoC,GADpC,GAC0C3K,IAAI,CAD9C,GACkD,YADlD,IACkE,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GADrK,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,SAAL;;gBACQC,cAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB;;gBACIuN,OAAO,IAAX;;gBACIN,gBAAcrZ,SAAlB,EAA6B;qBACpB0O,SAAS2K,YAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,MAAvC;;;gBAEIwJ,OAAQ,IAAID,IAAlB,CANc;;sBAQJ,wBAAwBA,OAAO5B,CAA/B,GAAmC,OAAnC,GAA6C4B,OAAOvM,CAApD,GAAwD,KAAxD,GAAgEwM,OAAOxM,CAAvE,GAA2E,GAA3E,GAAiFuM,OAAO5B,CAAxF,GAA4F,GAA5F,GAAkG3K,CAAlG,GAAsG,GAAtG,GAA4GwM,OAAO7B,CAAnH,GAAuH,GAAvH,GAA6H3K,CAA7H,GAAiI,GAAjI,GACR2K,CADQ,GACJ,GADI,GACE6B,OAAOxM,CADT,GACa,GADb,GACmB2K,CADnB,GACuB,GADvB,GAC6B4B,OAAOvM,CADpC,GACwC,GADxC,GAC8CwM,OAAO7B,CADrD,GACyD,cADzD,IAC2E,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAD9K,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAMG,SAAL;;sBACY,wBAAyB,IAAI,CAAL,GAAUrB,CAAlC,GAAsC,KAAtC,GAA8CA,IAAI,CAAlD,GAAsD,GAAtD,GAA4D3K,IAAI,CAAhE,GAAoE,KAApE,GAA4EA,IAAI,CAAhF,GAAoF,GAApF,GAA0F2K,IAAI,CAA9F,GAAkG,GAAlG,GAAyG,IAAI,CAAL,GAAU3K,CAAlH,GAAsH,GAAtH,GAA6H,IAAI,CAAL,GAAU2K,CAAtI,GAA0I,GAA1I,GAAgJ3K,CAAhJ,GAAoJ,GAApJ,GACP,IAAI,CAAL,GAAU2K,CADF,GACM,GADN,GACY3K,CADZ,GACgB,GADhB,GACuB,IAAI,CAAL,GAAU2K,CADhC,GACoC,GADpC,GAC2C,IAAI,CAAL,GAAU3K,CADpD,GACwD,GADxD,GAC8D2K,CAD9D,GACkE,GADlE,GACwE3K,IAAI,CAD5E,GACgF,GADhF,GACuF,IAAI,CAAL,GAAU2K,CADhG,GACoG,GADpG,GAC0G3K,IAAI,CAD9G,GACkH,GADlH,GACyH,IAAI,CAAL,GAAU2K,CADlI,GACsI,cADtI,IACwJ,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAD3P,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,WAAL;;sBACY,wBAAyB,IAAI,CAAL,GAAUrB,CAAlC,GAAsC,KAAtC,GAA8CA,IAAI,CAAlD,GAAsD,GAAtD,GAA4D3K,IAAI,CAAhE,GAAoE,KAApE,GAA6E,IAAI,CAAL,GAAUA,CAAtF,GAA0F,KAA1F,GAAmG,IAAI,CAAL,GAAUA,CAA5G,GAAgH,GAAhH,GAAsH2K,IAAI,CAA1H,GAA8H,GAA9H,GAAqI,IAAI,CAAL,GAAU3K,CAA9I,GAAkJ,GAAlJ,GAAyJ,IAAI,CAAL,GAAU2K,CAAlK,GAAsK,GAAtK,GAA4K3K,CAA5K,GAAgL,GAAhL,GACP,IAAI,CAAL,GAAU2K,CADF,GACM,GADN,GACY3K,CADZ,GACgB,GADhB,GACuB,IAAI,CAAL,GAAU2K,CADhC,GACoC,GADpC,GAC2C,IAAI,CAAL,GAAU3K,CADpD,GACwD,GADxD,GAC8D2K,CAD9D,GACkE,GADlE,GACyE,IAAI,CAAL,GAAU3K,CADlF,GACsF,GADtF,GAC4F2K,CAD5F,GACgG,GADhG,GACuG,IAAI,CAAL,GAAU3K,CADhH,GACoH,GADpH,GAC2H,IAAI,CAAL,GAAU2K,CADpI,GACwI,GADxI,GAC8I3K,IAAI,CADlJ,GACsJ,GADtJ,GAC6J,IAAI,CAAL,GAAU2K,CADtK,GAC0K,cAD1K,IAC4L,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAD/R,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,gBAAL;;gBACQC,cAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB,CADqB;;;gBAGjBkN,gBAAe,GAAnB;;gBACID,gBAAcrZ,SAAlB,EAA6B;8BACZ0O,SAAS2K,YAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,MAA/C,CAD2B;;kBAGvBwH,OAAJ,EAAa;0BACD,yBAAyBG,CAAzB,GAA6B,KAA7B,GAAsC,CAAC,IAAIuB,aAAL,IAAqBvB,CAA3D,GAAgE,KAAhE,GAAyE,CAAC,IAAIuB,aAAL,IAAqBvB,CAA9F,GAAmG,GAAnG,GAAyG3K,CAAzG,GAA6G,KAA7G,GAAqHA,CAArH,GAAyH,yBAAzH,GACR,cADQ,GACS4K,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,KAD5H;eADF,MAGO;0BACK,6BAA8BE,aAAD,GAAiBvB,CAA9C,GAAkD,KAAlD,GAA2DuB,aAAD,GAAiBvB,CAA3E,GAA+E,GAA/E,GAAqF3K,CAArF,GAAyF,GAAzF,GAA+F2K,CAA/F,GAAmG,GAAnG,GAAyG3K,CAAzG,GAA6G,yBAA7G,GACR,cADQ,GACS4K,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,KAD5H;;;kBAGEnB,qBAAqBjY,SAArB,KAAmCiY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;0BAC7G,wCAAwCR,KAAxC,GAAgD,MAA1D;;;kBAEES,qBAAqBlY,SAArB,KAAmCkY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;0BAC7G,sCAAsCT,KAAtC,GAA8C,MAAxD;;;wBAEQ,IAAV;;;;;;aAIC,MAAL;;gBACQ4B,cAAYrG,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,OAA5C,EAAqD,MAArD,CAAxB,CAAlB;;gBACIuN,OAAO,IAAX;;gBACIN,gBAAcrZ,SAAlB,EAA6B;qBACpB0O,SAAS2K,YAAUjJ,MAAV,CAAiB,CAAjB,CAAT,IAAgC,MAAvC;;;gBAEIwJ,QAAQ,IAAID,IAAlB;;sBACU,wBAAwBA,OAAO5B,CAA/B,GAAmC,KAAnC,GAA2C4B,OAAO5B,CAAlD,GAAsD,GAAtD,GAA4D4B,OAAOvM,CAAnE,GAAuE,KAAvE,GAA+EuM,OAAOvM,CAAtF,GAA0F,KAA1F,GAAkGwM,QAAOxM,CAAzG,GAA6G,GAA7G,GACRuM,OAAO5B,CADC,GACG,GADH,GACS6B,QAAOxM,CADhB,GACoB,GADpB,GAC0BuM,OAAO5B,CADjC,GACqC,GADrC,GAC2C3K,CAD3C,GAC+C,GAD/C,GACqDwM,QAAO7B,CAD5D,GACgE,GADhE,GACsE3K,CADtE,GAC0E,GAD1E,GACgFwM,QAAO7B,CADvF,GAC2F,GAD3F,GACiG6B,QAAOxM,CADxG,GAC4G,GAD5G,GACkH2K,CADlH,GACsH,GADtH,GAC4H6B,QAAOxM,CADnI,GACuI,GADvI,GAER,CAAC2K,CAFO,GAEH,GAFG,GAEG4B,OAAOvM,CAFV,GAEc,GAFd,GAEoBwM,QAAO7B,CAF3B,GAE+B,GAF/B,GAEqC4B,OAAOvM,CAF5C,GAEgD,GAFhD,GAEsDwM,QAAO7B,CAF7D,GAEiE,cAFjE,IAEmF,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAFtL,IAGR,cAHQ,GAGSO,OAAOW,KAHhB,GAGwB,oBAHxB,GAG+CX,OAAOlE,KAHtD,GAG8D,wBAH9D,GAGyFkE,OAAOoB,eAHhG,GAGkH,OAH5H,CAPW;;;;;aAcR,MAAL;aACK,oBAAL;aACK,gBAAL;aACK,gBAAL;aACK,kBAAL;aACK,kBAAL;aACK,kBAAL;aACK,kBAAL;;gBACMxB,OAAJ,EAAa;wBACD,gBAAgBG,CAAhB,GAAoB,4BAApB,GAAmD3K,CAAnD,GAAuD,cAAvD,GAAwE4K,OAAOW,KAA/E,GACR,oBADQ,GACeX,OAAOlE,KADtB,GAC8B,wBAD9B,GACyDkE,OAAOoB,eADhE,GACkF,KAD5F;aADF,MAGO;wBACK,kCAAkCrB,CAAlC,GAAsC,UAAtC,GAAmD3K,CAAnD,GAAuD,cAAvD,GAAwE4K,OAAOW,KAA/E,GACR,oBADQ,GACeX,OAAOlE,KADtB,GAC8B,wBAD9B,GACyDkE,OAAOoB,eADhE,GACkF,KAD5F;;;gBAGEnB,qBAAqBjY,SAArB,KAAmCiY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;wBAC7G,wCAAwCR,KAAxC,GAAgD,MAA1D;;;gBAEES,qBAAqBlY,SAArB,KAAmCkY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;wBAC7G,sCAAsCT,KAAtC,GAA8C,MAAxD;;;sBAEQ,IAAV;;;;aAGG,YAAL;;gBACQiC,kBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,KAAJ;gBACIC,WAAW,GAAf;gBACIC,KAAJ;gBACIC,WAAW,GAAf;gBACMC,gBAAgBlC,IAAI3K,CAA1B;;gBACIsM,oBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,gBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,WAAWlH,kBAAkB0G,gBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,aAAa,MAAjB,EAAyB;0BACflH,kBAAkB0G,gBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;6BACW,MAAO6H,SAASmL,MAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;iBAFF,MAGO,IAAI8J,aAAa,MAAjB,EAAyB;0BACtBlH,kBAAkB0G,gBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;sBACMsT,YAAYzL,SAASqL,MAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;6BACW,IAAM+J,SAAD,GAAcF,aAA9B;;;aAhBW;;;sBAsBP,wBAAwBlC,CAAxB,GAA4B,GAA5B,GAAkC3K,IAAI,CAAtC,GAA0C,GAA1C,GAAgD4M,WAAWjC,CAA3D,GAA+D,KAA/D,GAAuEiC,WAAWjC,CAAlF,GAAsF,GAAtF,GAA4F+B,WAAW1M,CAAvG,GAA2G,KAA3G,GAAmH0M,WAAW1M,CAA9H,GACR,KADQ,GACA,CAAC,IAAI0M,QAAL,IAAiB1M,CADjB,GACqB,GADrB,GAC2B4M,WAAWjC,CADtC,GAC0C,GAD1C,GACgD,CAAC,IAAI+B,QAAL,IAAiB1M,CADjE,GACqE,IADrE,GAC4E4M,WAAWjC,CADvF,GAC2F,GAD3F,GACiG3K,CADjG,GACqG,YADrG,IACqH,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GADxN,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,WAAL;;gBACQM,mBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,KAAJ;;gBACIC,YAAW,GAAf;;gBACIC,MAAJ;;gBACIC,YAAW,GAAf;;gBACMC,iBAAgBlC,IAAI3K,CAA1B;;gBACIsM,qBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,iBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,YAAWlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,cAAa,MAAjB,EAAyB;0BACflH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;8BACW,MAAO6H,SAASmL,MAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;iBAFF,MAGO,IAAI8J,cAAa,MAAjB,EAAyB;2BACtBlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;;sBACMsT,aAAYzL,SAASqL,OAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;;8BACY+J,UAAD,GAAcF,cAAzB;;;aAhBU;;;sBAsBN,0BAA0B7M,IAAI,CAA9B,GAAkC,GAAlC,GAAwC4M,YAAWjC,CAAnD,GAAuD,GAAvD,GAA6D3K,CAA7D,GAAiE,GAAjE,GAAuE4M,YAAWjC,CAAlF,GAAsF,GAAtF,GAA4F,CAAC,IAAI+B,SAAL,IAAiB1M,CAA7G,GAAiH,GAAjH,GAAuH2K,CAAvH,GAA2H,GAA3H,GAAiI,CAAC,IAAI+B,SAAL,IAAiB1M,CAAlJ,GACR,GADQ,GACF2K,CADE,GACE,GADF,GACQ+B,YAAW1M,CADnB,GACuB,GADvB,GAC6B4M,YAAWjC,CADxC,GAC4C,GAD5C,GACkD+B,YAAW1M,CAD7D,GACiE,IADjE,GACwE4M,YAAWjC,CADnF,GACuF,cADvF,IACyG,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAD5M,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,WAAL;;gBACQM,mBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,MAAJ;;gBACIC,aAAW,GAAf;;gBACIC,MAAJ;;gBACIC,aAAW,GAAf;;gBACMC,kBAAgB7M,IAAI2K,CAA1B;;gBACI2B,qBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,iBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,aAAWlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,eAAa,MAAjB,EAAyB;2BACflH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;+BACW6H,SAASmL,OAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAAvC;iBAFF,MAGO,IAAI8J,eAAa,MAAjB,EAAyB;2BACtBlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;;sBACMsT,aAAYzL,SAASqL,OAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;;+BACY+J,UAAD,GAAcF,eAAzB;;;aAhBU;;;sBAsBN,wBAAwB,CAAC,MAAMH,UAAP,IAAmB/B,CAA3C,GAA+C,KAA/C,GAAuD,CAAC,MAAM+B,UAAP,IAAmB/B,CAA1E,GAA8E,GAA9E,GAAoF,CAAC,IAAIiC,UAAL,IAAiB5M,CAArG,GAAyG,KAAzG,GAAiH,CAAC,IAAI4M,UAAL,IAAiB5M,CAAlI,GAAsI,GAAtI,GAA6I2K,IAAI,CAAjJ,GAAsJ,GAAtJ,GAA4J3K,CAA5J,GACR,GADQ,GACF2K,CADE,GACE,GADF,GACQ,CAAC,IAAIiC,UAAL,IAAiB5M,CADzB,GAC6B,GAD7B,GACmC,CAAC,MAAM0M,UAAP,IAAmB/B,CADtD,GAC0D,GAD1D,GACgE,CAAC,IAAIiC,UAAL,IAAiB5M,CADjF,GACqF,IADrF,GAC4F,CAAC,MAAM0M,UAAP,IAAmB/B,CAD/G,GACmH,cADnH,IACqI,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GADxO,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,SAAL;;gBACQM,mBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,MAAJ;;gBACIC,aAAW,GAAf;;gBACIC,MAAJ;;gBACIC,aAAW,GAAf;;gBACMC,kBAAgB7M,IAAI2K,CAA1B;;gBACI2B,qBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,iBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,aAAWlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,eAAa,MAAjB,EAAyB;2BACflH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;+BACW6H,SAASmL,OAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAAvC;iBAFF,MAGO,IAAI8J,eAAa,MAAjB,EAAyB;2BACtBlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;;sBACMsT,aAAYzL,SAASqL,OAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;;+BACY+J,UAAD,GAAcF,eAAzB;;;;;sBAII,wBAAyBlC,IAAI,CAA7B,GAAkC,OAAlC,GAA4CiC,aAAW5M,CAAvD,GAA2D,GAA3D,GAAiE,CAAC,MAAM0M,UAAP,IAAmB/B,CAApF,GAAwF,GAAxF,GAA8FiC,aAAW5M,CAAzG,GAA6G,GAA7G,GAAmH,CAAC,MAAM0M,UAAP,IAAmB/B,CAAtI,GAA0I,GAA1I,GAAgJ3K,CAAhJ,GACR,GADQ,GACF,CAAC,MAAM0M,UAAP,IAAmB/B,CADjB,GACqB,GADrB,GAC2B3K,CAD3B,GAC+B,GAD/B,GACqC,CAAC,MAAM0M,UAAP,IAAmB/B,CADxD,GAC4D,GAD5D,GACkEiC,aAAW5M,CAD7E,GACiF,IADjF,GACwF2K,CADxF,GAC4F,GAD5F,GACkGiC,aAAW5M,CAD7G,GACiH,YADjH,IACiI,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GADpO,IAER,cAFQ,GAESO,OAAOW,KAFhB,GAEwB,oBAFxB,GAE+CX,OAAOlE,KAFtD,GAE8D,wBAF9D,GAEyFkE,OAAOoB,eAFhG,GAEkH,OAF5H;;;;aAKG,gBAAL;;gBACQM,mBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,MAAJ;;gBACIC,aAAW,GAAf;;gBACIC,MAAJ;;gBACIC,aAAW,GAAf;;gBACMC,kBAAgBlC,IAAI3K,CAA1B;;gBACIsM,qBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,iBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,aAAWlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,eAAa,MAAjB,EAAyB;2BACflH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;+BACW,MAAO6H,SAASmL,OAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;iBAFF,MAGO,IAAI8J,eAAa,MAAjB,EAAyB;2BACtBlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;;sBACMsT,aAAYzL,SAASqL,OAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;;+BACY+J,UAAD,GAAcF,eAAzB;;;aAhBe;;;sBAsBX,0BAA0B7M,IAAI,CAA9B,GAAkC,GAAlC,GAAwC4M,aAAWjC,CAAnD,GAAuD,GAAvD,GAA6D3K,CAA7D,GAAiE,GAAjE,GAAuE4M,aAAWjC,CAAlF,GAAsF,GAAtF,GAA4F,CAAC,IAAI+B,UAAL,IAAiB1M,CAA7G,GAAiH,GAAjH,GAAuH,CAAC,IAAI4M,UAAL,IAAiBjC,CAAxI,GAA4I,GAA5I,GAAkJ,CAAC,IAAI+B,UAAL,IAAiB1M,CAAnK,GACR,GADQ,GACF,CAAC,IAAI4M,UAAL,IAAiBjC,CADf,GACmB,GADnB,GACyB3K,CADzB,GAC6B,GAD7B,GACmC2K,CADnC,GACuC,GADvC,GAC6C3K,IAAI,CADjD,GACqD,IADrD,GAC4D,CAAC,IAAI4M,UAAL,IAAiBjC,CAD7E,GACiF,KADjF,GACyF,CAAC,IAAIiC,UAAL,IAAiBjC,CAD1G,GAC8G,GAD9G,GACoH+B,aAAW1M,CAD/H,GACmI,GADnI,GAER4M,aAAWjC,CAFH,GAEO,GAFP,GAEa+B,aAAW1M,CAFxB,GAE4B,GAF5B,GAEkC4M,aAAWjC,CAF7C,GAEiD,cAFjD,IAEmE,CAACM,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAFtK,IAGR,cAHQ,GAGSO,OAAOW,KAHhB,GAGwB,oBAHxB,GAG+CX,OAAOlE,KAHtD,GAG8D,wBAH9D,GAGyFkE,OAAOoB,eAHhG,GAGkH,OAH5H;;;;aAMG,aAAL;;gBACQM,mBAAiB1G,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,EAAW,YAAX,EAAyB,SAAzB,EAAoC,MAApC,CAAxB,CAAvB;;gBACIyN,MAAJ;;gBACIC,aAAW,GAAf;;gBACIC,OAAJ;;gBACIC,aAAW,GAAf;;gBACMC,kBAAgB7M,IAAI2K,CAA1B;;gBACI2B,qBAAmB1Z,SAAvB,EAAkC;mBAC3B,IAAI6G,MAAI,CAAb,EAAgBA,MAAI6S,iBAAelT,MAAnC,EAA2CK,KAA3C,EAAgD;oBACxCqT,aAAWlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAjB;;oBACIqT,eAAa,MAAjB,EAAyB;2BACflH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;+BACW,MAAO6H,SAASmL,OAAMzJ,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;iBAFF,MAGO,IAAI8J,eAAa,MAAjB,EAAyB;4BACtBlH,kBAAkB0G,iBAAe7S,GAAf,CAAlB,EAAqC,CAAC,OAAD,EAAU,MAAV,CAArC,CAAR;;sBACMsT,cAAYzL,SAASqL,QAAM3J,MAAN,CAAa,CAAb,CAAT,IAA4B,MAA9C;;+BACY+J,WAAD,GAAcF,eAAzB;;;aAhBY;;;sBAsBR,wBAAwBlC,IAAI,CAA5B,GAAgC,OAAhC,GAA0CiC,aAAW5M,CAArD,GAAyD,GAAzD,GAA+D0M,aAAW/B,CAA1E,GAA8E,GAA9E,GAAoFiC,aAAW5M,CAA/F,GAAmG,GAAnG,GAAyG0M,aAAW/B,CAApH,GAAwH,GAAxH,GAA8H,CAAC,IAAIiC,UAAL,IAAiB5M,CAA/I,GACR,KADQ,GACA,CAAC,IAAI4M,UAAL,IAAiB5M,CADjB,GACqB,GADrB,GAC2B2K,IAAI,CAD/B,GACmC,GADnC,GACyC3K,CADzC,GAC6C,IAD7C,GACoD2K,CADpD,GACwD,GADxD,GAC8D,CAAC,IAAIiC,UAAL,IAAiB5M,CAD/E,GACmF,GADnF,GACyF,CAAC,IAAI0M,UAAL,IAAiB/B,CAD1G,GAC8G,GAD9G,GACoH,CAAC,IAAIiC,UAAL,IAAiB5M,CADrI,GACyI,GADzI,GAER,CAAC,IAAI0M,UAAL,IAAiB/B,CAFT,GAEa,GAFb,GAEmBiC,aAAW5M,CAF9B,GAEkC,GAFlC,GAEwC2K,CAFxC,GAE4C,GAF5C,GAEkDiC,aAAW5M,CAF7D,GAEiE,YAFjE,IAEiF,CAACiL,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAFpL,IAGR,cAHQ,GAGSO,OAAOW,KAHhB,GAGwB,oBAHxB,GAG+CX,OAAOlE,KAHtD,GAG8D,wBAH9D,GAGyFkE,OAAOoB,eAHhG,GAGkH,OAH5H;;;;aAMG,WAAL;aACK,aAAL;aACK,mBAAL;aACK,WAAL;aACK,eAAL;aACK,aAAL;aACK,kBAAL;aACK,aAAL;aACK,mBAAL;aACK,mBAAL;aACK,iBAAL;aACK,iBAAL;aACK,kBAAL;aACK,eAAL;aACK,YAAL;aACK,wBAAL;;;aAEKpZ,SAAL;;kBAEUoa,IAAR,CAAa,sBAAb;;;gBAGM,QAAV;gBAEU,gCAAgCC,iBAAiBjO,IAAjB,EAAuB8K,iBAAvB,EAA0CC,iBAA1C,EAA6DtT,IAA7D,CAAhC,GACR,WADQ,GACMmT,EADN,GACW,YADX,GAC0BC,GAD1B,GACgC,aADhC,GACgDpT,IADhD,GACuD,YADvD,GACsET,IADtE,GAER,aAFQ,GAGRsS,YAAY4B,aAAZ,EAA2BC,mBAA3B,EAAgDC,mBAAhD,CAHQ,GAIR7B,QAAQ2B,aAAR,EAAuBC,mBAAvB,EAA4CC,mBAA5C,CAJQ,GAKR,YALQ,GAKO5C,KALP,GAKe,GALf,GAMR,oBANQ,GAMeiD,MANf,GAMwB,OANxB,GAOR,KAPF,CAphBwD;;UA8hBpDzL,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;kBACxBsa,YAAYlO,KAAK,UAAL,CAAZ,EAA8B8K,iBAA9B,EAAiDC,iBAAjD,EAAoEtT,IAApE,EAA0EgQ,OAA1E,CAAV;;;gBAEQ,QAAV;KAjiBF,MAkiBO,IAAI8D,iBAAiB3X,SAArB,EAAgC;;;UAG/Bua,cAAcvH,kBAAkB2E,YAAlB,EAAgC,CAAC,WAAD,CAAhC,CAApB,CAHqC;;;;;;UAS/B6C,YAAYxH,kBAAkBuH,WAAlB,EAA+B,CAAC,QAAD,EAAW,SAAX,CAA/B,CAAlB;UACME,aAAazH,kBAAkBuH,WAAlB,EAA+B,CAAC,QAAD,EAAW,UAAX,EAAuB,MAAvB,EAA+B,OAA/B,CAA/B,CAAnB;UACMG,MAAMhM,SAAS+L,WAAW,GAAX,CAAT,IAA4B,EAA5B,GAAiC,MAA7C;UACME,MAAMjM,SAAS+L,WAAW,GAAX,CAAT,IAA4B,EAA5B,GAAiC,MAA7C;;UACI7L,KAAI,MAAM8L,GAAN,GAAY,GAAZ,GAAkBC,GAA1B;;UACMC,YAAY5H,kBAAkBuH,WAAlB,EAA+B,CAAC,QAAD,CAA/B,CAAlB;UACMM,YAAYD,UAAU,QAAV,CAAlB;UACME,kBAAkBF,UAAU,cAAV,CAAxB;UACMG,YAAY,EAAlB;;UACIF,cAAc7a,SAAlB,EAA6B;eACpBoG,IAAP,CAAYyU,SAAZ,EAAuB9X,OAAvB,CAA+B,UAAUuD,GAAV,EAAe;cACtC0U,aAAaH,UAAUvU,GAAV,EAAe,MAAf,CAAnB;;cACI0U,eAAehb,SAAnB,EAA8B;mBACrBoG,IAAP,CAAY4U,UAAZ,EAAwBjY,OAAxB,CAAgC,UAAUkY,IAAV,EAAgB;kBACxCC,QAAQ,EAAd;kBACMC,WAAWH,WAAWC,IAAX,CAAjB;kBACMG,MAAMD,SAAS,GAAT,CAAZ;kBACME,MAAMF,SAAS,GAAT,CAAZ;kBACMG,SAASH,SAAS,OAAT,CAAf;oBACMtX,IAAN,GAAa,MAAb;oBACM+Q,KAAN,GAAc0G,MAAd;oBACMvG,CAAN,GAAUqG,GAAV;oBACMvG,CAAN,GAAUwG,GAAV;wBACUrV,IAAV,CAAekV,KAAf,EAV8C;aAAhD;;SAHJ;;;UAmBEJ,oBAAoB9a,SAAxB,EAAmC;eAC1BoG,IAAP,CAAY0U,eAAZ,EAA6B/X,OAA7B,CAAqC,UAAUuD,GAAV,EAAe;;cAE5CiV,oBAAoBT,gBAAgBxU,GAAhB,EAAqB,MAArB,CAA1B;;cACIiV,sBAAsBvb,SAA1B,EAAqC;mBAC5BoG,IAAP,CAAYmV,iBAAZ,EAA+BxY,OAA/B,CAAuC,UAAUkY,IAAV,EAAgB;;kBAE/CO,WAAWD,kBAAkBN,IAAlB,CAAjB;qBACO7U,IAAP,CAAYoV,QAAZ,EAAsBzY,OAAtB,CAA8B,UAAU0Y,IAAV,EAAgB;;oBAEtCP,QAAQ,EAAd;oBACMQ,UAAUF,SAASC,IAAT,CAAhB;oBACML,MAAMM,QAAQ,GAAR,CAAZ;oBACML,MAAMK,QAAQ,GAAR,CAAZ;oBACMJ,SAASI,QAAQ,OAAR,CAAf;sBACM7X,IAAN,GAAa,YAAb;sBACM+Q,KAAN,GAAc0G,MAAd;sBACMvG,CAAN,GAAUqG,GAAV;sBACMvG,CAAN,GAAUwG,GAAV;0BACUrV,IAAV,CAAekV,KAAf;eAXF;aAHF;;SAJJ;;;UAwBIS,cAAcZ,UAAU9T,KAAV,CAAgB,CAAhB,CAApB;kBACY2U,IAAZ,CAAiB,UAAU1O,CAAV,EAAaF,CAAb,EAAgB;eACxBE,EAAE0H,KAAF,GAAU5H,EAAE4H,KAAnB;OADF,EAhEqC;;UAoEjCiH,IAAI,CAAR;;aACOA,IAAIF,YAAYnV,MAAvB,EAA+B;YACzBmV,YAAYE,CAAZ,EAAehY,IAAf,KAAwB,MAA5B,EAAoC;cAC5BiY,KAAKpN,SAASiN,YAAYE,CAAZ,EAAe9G,CAAxB,IAA6B,EAA7B,GAAkC,MAA7C;cACMgH,KAAKrN,SAASiN,YAAYE,CAAZ,EAAehH,CAAxB,IAA6B,EAA7B,GAAkC,MAA7C;gBACK,MAAMiH,EAAN,GAAW,GAAX,GAAiBC,EAAtB;;SAHF,MAKO;;cACCC,MAAMtN,SAASiN,YAAYE,CAAZ,EAAe9G,CAAxB,IAA6B,EAA7B,GAAkC,MAA9C;cACMkH,MAAMvN,SAASiN,YAAYE,CAAZ,EAAehH,CAAxB,IAA6B,EAA7B,GAAkC,MAA9C;cACMqH,MAAMxN,SAASiN,YAAYE,IAAI,CAAhB,EAAmB9G,CAA5B,IAAiC,EAAjC,GAAsC,MAAlD;cACMoH,MAAMzN,SAASiN,YAAYE,IAAI,CAAhB,EAAmBhH,CAA5B,IAAiC,EAAjC,GAAsC,MAAlD;cACMuH,MAAM1N,SAASiN,YAAYE,IAAI,CAAhB,EAAmB9G,CAA5B,IAAiC,EAAjC,GAAsC,MAAlD;cACMsH,MAAM3N,SAASiN,YAAYE,IAAI,CAAhB,EAAmBhH,CAA5B,IAAiC,EAAjC,GAAsC,MAAlD;gBAEK,MAAMmH,GAAN,GAAY,GAAZ,GAAkBC,GAAlB,GAAwB,GAAxB,GAA8BC,GAA9B,GAAoC,GAApC,GAA0CC,GAA1C,GAAgD,GAAhD,GAAsDC,GAAtD,GAA4D,GAA5D,GAAkEC,GAAvE;eACK,CAAL;;;;gBAGM,eAAezN,EAAf,GAAmB,YAAnB,IAAmC,CAACyJ,UAAD,GAAeD,cAAc,iBAAiBX,KAAjB,GAAyB,GAAvC,GAA6CU,SAA5D,GAAyE,kBAAkBV,KAAlB,GAA0B,GAAtI,IACR,cADQ,GACSO,OAAOW,KADhB,GACwB,oBADxB,GAC+CX,OAAOlE,KADtD,GAC8D,wBAD9D,GACyFkE,OAAOoB,eADhG,GACkH,KAD5H;;UAEIoB,cAAcxa,SAAlB,EAA6B;;kBAEjB,IAAV;OAFF,MAGO;;;YAGDiY,qBAAqBjY,SAArB,KAAmCiY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;oBAC7G,wCAAwCR,KAAxC,GAAgD,MAA1D;;;YAEES,qBAAqBlY,SAArB,KAAmCkY,iBAAiB,MAAjB,MAA6B,UAA7B,IAA2CA,iBAAiB,MAAjB,MAA6B,OAA3G,CAAJ,EAAyH;oBAC7G,sCAAsCT,KAAtC,GAA8C,MAAxD;;;kBAEQ,IAAV;;;gBAGQ,QAAV;gBAEU,gCAAgC4C,iBAAiBjO,IAAjB,EAAuB8K,iBAAvB,EAA0CC,iBAA1C,EAA6DtT,IAA7D,CAAhC,GACR,WADQ,GACMmT,EADN,GACW,YADX,GAC0BC,GAD1B,GACgC,aADhC,GACgDpT,IADhD,GACuD,YADvD,GACsET,IADtE,GAER,aAFQ,GAGRsS,YAAY4B,aAAZ,EAA2BC,mBAA3B,EAAgDC,mBAAhD,CAHQ,GAIR7B,QAAQ2B,aAAR,EAAuBC,mBAAvB,EAA4CC,mBAA5C,CAJQ,GAKR,YALQ,GAKO5C,KALP,GAKe,GALf,GAMR,oBANQ,GAMeiD,MANf,GAMwB,OANxB,GAOR,KAPF,CA1GqC;;UAoHjCzL,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;kBACxBsa,YAAYlO,KAAK,UAAL,CAAZ,EAA8B8K,iBAA9B,EAAiDC,iBAAjD,EAAoEtT,IAApE,EAA0EgQ,OAA1E,CAAV;;;gBAEQ,QAAV,CAvHqC;KAAhC,MA0HA;gBACK,gCAAgCwG,iBAAiBjO,IAAjB,EAAuB8K,iBAAvB,EAA0CC,iBAA1C,EAA6DtT,IAA7D,CAAhC,GACR,WADQ,GACMmT,EADN,GACW,YADX,GAC0BC,GAD1B,GACgC,aADhC,GACgDpT,IADhD,GACuD,YADvD,GACsET,IADtE,GAER,aAFQ,GAGRsS,YAAY4B,aAAZ,EAA2BC,mBAA3B,EAAgDC,mBAAhD,CAHQ,GAIR7B,QAAQ2B,aAAR,EAAuBC,mBAAvB,EAA4CC,mBAA5C,CAJQ,GAKR0B,UAAU9M,IAAV,EAAgB,KAAhB,CALQ,GAMRmM,aAAanM,IAAb,EAAmB,KAAnB,EAA0ByH,OAA1B,CANQ,GAOR,YAPQ,GAOOe,KAPP,GAOe,GAPf,GAQR,oBARQ,GAQeiD,MARf,GAQwB,OARxB,GASR,KATF,CADK;;UAaDzL,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;kBACxBsa,YAAYlO,KAAK,UAAL,CAAZ,EAA8B8K,iBAA9B,EAAiDC,iBAAjD,EAAoEtT,IAApE,EAA0EgQ,OAA1E,CAAV;;;gBAEQ,QAAV;;;WAGK/P,MAAP;;;WAGOyQ,cAAT,CAAyBnI,IAAzB,EAA+ByH,OAA/B,EAAwC;QAChCe,QAAQxI,KAAK,OAAL,EAAc,OAAd,CAAd;QAEMwJ,MAAMxJ,KAAK,YAAL,EAAmB,QAAnB,EAA6B,OAA7B,EAAsC,SAAtC,CAAZ;QACMkQ,UAAUzI,QAAQ,aAAR,EAAuB+B,GAAvB,EAA4B,QAA5B,CAAhB;QACM2G,aAAavM,qBAAqBsM,OAArB,EAA8BE,WAA9B,EAAnB;QACM9L,MAAMmD,QAAQ,KAAR,CAAZ;QACM4I,iBAAiB/L,IAAIC,IAAJ,CAAS2L,OAAT,EAAkBI,aAAlB,EAAvB;QACIC,WAAW,EAAf;QACMjI,WAAWtI,KAAK,QAAL,EAAe,QAAf,CAAjB,CATsC;;QAWhCyL,SAASC,eAAe1L,KAAK,QAAL,EAAe,QAAf,EAAyB,OAAzB,EAAkC,KAAlC,CAAf,CAAf,CAXsC;;eAa3BwQ,iBAAiBL,UAAjB,CAAX;WACO,0CAA0C7G,YAAYhB,QAAZ,EAAsB1U,SAAtB,EAAiCA,SAAjC,CAA1C,GAAwF2V,QAAQjB,QAAR,EAAkB1U,SAAlB,EAA6BA,SAA7B,CAAxF,GACL,YADK,GACU4U,KADV,GACkB,GADlB,GAEL,oBAFK,GAEkBiD,MAFlB,GAE2B,OAF3B,GAGL,qBAHK,GAGmB8E,QAHnB,GAG8B,UAH9B,GAG2ClN,kBAAkBgN,cAAlB,CAH3C,GAG+E,gDAHtF;;;WAgDOnC,WAAT,CAAsBuC,YAAtB,EAAoC3F,iBAApC,EAAuDC,iBAAvD,EAA0EtT,IAA1E,EAAgFgQ,OAAhF,EAAyF;QACnF5H,OAAO,EAAX;QACMwH,wBAAwBI,QAAQ,uBAAR,CAA9B;;QAEIgJ,iBAAiB7c,SAArB,EAAgC;aACvBiM,IAAP;KALqF;;;;;QAWnF6Q,KAAJ;QACIC,KAAJ;;QACIF,aAAa,KAAb,EAAoBja,WAApB,KAAoC+K,KAAxC,EAA+C;;WAExC,IAAI9G,IAAI,CAAb,EAAgBA,IAAIgW,aAAa,KAAb,EAAoBrW,MAAxC,EAAgDK,GAAhD,EAAqD;gBAC3CgW,aAAa,KAAb,EAAoBhW,CAApB,CAAR;gBACQiW,MAAM,KAAN,CAAR,CAFmD;;;gBAO3C,mBAAmBE,mBAAmBF,KAAnB,EAA0B5F,iBAA1B,EAA6CC,iBAA7C,EAAgEtT,IAAhE,EAAsE4P,qBAAtE,CAAnB,GAAkH,KAA1H;gBACQwJ,UAAUH,KAAV,EAAiB5F,iBAAjB,EAAoCC,iBAApC,EAAuDtT,IAAvD,EAA6DgQ,OAA7D,CAAR;;YAEIkJ,UAAU/c,SAAd,EAAyB;;kBAEfkd,eAAeJ,KAAf,EAAsB5F,iBAAtB,EAAyCC,iBAAzC,EAA4DtT,IAA5D,EAAkEgQ,OAAlE,CAAR;SAFF,MAGO,IAAIkJ,MAAMna,WAAN,KAAsB+K,KAA1B,EAAiC;;eAEjC,IAAIwP,IAAI,CAAb,EAAgBA,IAAIJ,MAAMvW,MAA1B,EAAkC2W,GAAlC,EAAuC;oBAC7BD,eAAeH,MAAMI,CAAN,CAAf,EAAyBjG,iBAAzB,EAA4CC,iBAA5C,EAA+DtT,IAA/D,EAAqEgQ,OAArE,CAAR,CADqC;;gBAGjCiJ,MAAM,MAAN,MAAkB9c,SAAtB,EAAiC;sBACvB,MAAR;aAJmC;;;SAFlC,MAUA;;kBAEGkd,eAAeH,KAAf,EAAsB7F,iBAAtB,EAAyCC,iBAAzC,EAA4DtT,IAA5D,EAAkEgQ,OAAlE,CAAR;;;gBAEM,QAAR;;KA7BJ,MA+BO;;cAEGgJ,aAAa,KAAb,CAAR;cACQC,MAAM,KAAN,CAAR,CAHK;;;cAQG,+BAA+BE,mBAAmBF,KAAnB,EAA0B5F,iBAA1B,EAA6CC,iBAA7C,EAAgEtT,IAAhE,EAAsE4P,qBAAtE,CAA/B,GAA8H,KAAtI;cACQwJ,UAAUH,KAAV,EAAiB5F,iBAAjB,EAAoCC,iBAApC,EAAuDtT,IAAvD,EAA6DgQ,OAA7D,CAAR;;UACIkJ,UAAU/c,SAAd,EAAyB;;gBAEfkd,eAAeJ,KAAf,EAAsB5F,iBAAtB,EAAyCC,iBAAzC,EAA4DtT,IAA5D,EAAkEgQ,OAAlE,CAAR;OAFF,MAGO,IAAIkJ,MAAMna,WAAN,KAAsB+K,KAA1B,EAAiC;;aAEjC,IAAIwP,KAAI,CAAb,EAAgBA,KAAIJ,MAAMvW,MAA1B,EAAkC2W,IAAlC,EAAuC;kBAC7BD,eAAeH,MAAMI,EAAN,CAAf,EAAyBjG,iBAAzB,EAA4CC,iBAA5C,EAA+DtT,IAA/D,EAAqEgQ,OAArE,CAAR,CADqC;;cAGjCiJ,MAAM,MAAN,MAAkB9c,SAAtB,EAAiC;oBACvB,MAAR;WAJmC;;;OAFlC,MAUA;;gBAEGkd,eAAeH,KAAf,EAAsB7F,iBAAtB,EAAyCC,iBAAzC,EAA4DtT,IAA5D,EAAkEgQ,OAAlE,CAAR;;;cAEM,QAAR;;;WAGK5H,IAAP;;;WAGOgR,SAAT,CAAoB7Q,IAApB,EAA0B8K,iBAA1B,EAA6CC,iBAA7C,EAAgEtT,IAAhE,EAAsEgQ,OAAtE,EAA+E;;QAEvEuJ,mBAAmBvJ,QAAQ,uBAAR,CAAzB;QAEMkJ,QAAQ3Q,KAAK,KAAL,CAAd;QACIiR,aAAJ,EAAmBC,YAAnB,EAAiCC,SAAjC,EAA4CC,QAA5C;;QACIT,UAAU/c,SAAd,EAAyB;sBACPyd,aAAaV,KAAb,EAAoBlZ,IAApB,EAA0BuZ,gBAA1B,CAAhB;qBACeM,YAAYX,KAAZ,EAAmB7F,iBAAnB,EAAsCC,iBAAtC,EAAyDtT,IAAzD,EAA+DuZ,gBAA/D,CAAf;KAFF,MAGO;sBACWK,aAAarR,IAAb,EAAmBvI,IAAnB,EAAyBuZ,gBAAzB,CAAhB;qBACeM,YAAYtR,IAAZ,EAAkB8K,iBAAlB,EAAqCC,iBAArC,EAAwDtT,IAAxD,EAA8DuZ,gBAA9D,CAAf;KAX2E;;;QAezEO,SAAS,EAAb,CAf6E;;QAkBvEC,UAAUxR,KAAK,OAAL,CAAhB,CAlB6E;;QAqBvEyR,YAAY7K,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,KAAV,CAA3B,CAAlB;QACIE,QAAQ,KAAZ;;QACID,cAAc7d,SAAd,IAA2B6d,cAAc,GAA7C,EAAkD;cACxC,IAAR;KAxB2E;;;QA4BzEE,MAAMrP,SAASsE,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,KAAV,CAA3B,CAAT,CAAV;;QACIhX,MAAMmX,GAAN,CAAJ,EAAgB;YACR,CAAN;;;QAGIC,SAAShL,kBAAkB4K,OAAlB,EAA2B,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,CAA3B,CAAf,CAjC6E;;QAmCzEK,SAAS,WAAb;QACMC,QAAQlL,kBAAkB4K,OAAlB,EAA2B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,MAAzB,CAA3B,CAAd;QACMO,QAAQnL,kBAAkB4K,OAAlB,EAA2B,CAAC,UAAD,CAA3B,CAAd;;QACII,WAAWhe,SAAf,EAA0B;eACf,aAAT,CADwB;;;QAItBke,UAAUle,SAAd,EAAyB;eACd,cAAT;;;QAEEme,UAAUne,SAAd,EAAyB;eACd,aAAT;;;QAGEoe,WAAJ;;QACIH,WAAW,WAAf,EAA4B;oBACZjL,kBAAkB4K,OAAlB,EAA2B,CAAC,UAAD,EAAa,OAAb,CAA3B,CAAd;KAnD2E;;;;;;QAyDzES,eAAe,MAAnB;;QAEIT,OAAJ,EAAa;UACLU,YAAYV,QAAQ,SAAR,CAAlB;;UACIU,cAActe,SAAlB,EAA6B;uBACZue,aAAaD,SAAb,CAAf;OADF,MAEO;;;;QAKLD,iBAAiB,MAArB,EAA6B;kBACfhB,aAAZ;KADF,MAEO;kBACO,MAAMgB,YAAlB;KAvE2E;;;QA0EzEG,UAAJ;iBACaxL,kBAAkB4K,OAAlB,EAA2B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA3B,CAAb,CA3E6E;;QA4EzEY,eAAexe,SAAnB,EAA8B;iBACjB0O,SAAS8P,UAAT,IAAuB,GAAvB,GAA6B,IAAxC;KADF,MAEO;mBACQxL,kBAAkB4K,OAAlB,EAA2B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA3B,CAAb;;UACIY,eAAexe,SAAnB,EAA8B;YACtBye,QAAQ/P,SAAS8P,UAAT,IAAuB,MAArC,CAD4B;;YAGtBE,mBAAmBpB,aAAalN,MAAb,CAAoB,CAApB,EAAuBkN,aAAa9W,MAAb,GAAsB,CAA7C,CAAzB;mBACWiY,QAAS/P,SAASgQ,gBAAT,CAAT,GAAuC,IAAlD;OAJF,MAKO;mBACMpB,YAAX;;KAtFyE;;;QA0FzEqB,UAAJ;QACIC,WAAJ;;QACIX,WAAW,aAAf,EAA8B;;UAExBG,gBAAgBpe,SAApB,EAA+B;qBAChB0O,SAASsE,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B,CAAT,IAA0D,EAA1D,GAA+D,MAA5E;sBACclP,SAAS0P,YAAY,aAAZ,CAAT,CAAd;;YACIxX,MAAM+X,UAAN,CAAJ,EAAuB;uBACR,SAAS,EAAT,GAAc,MAA3B;;;YAEE/X,MAAMgY,WAAN,CAAJ,EAAwB;wBACR,CAAd;;;YAEIC,WAAWT,YAAY,UAAZ,CAAjB;iBAES,gCAAgCS,QAAhC,GACP,iBADO,GACaF,aAAaZ,GAD1B,GACgC,IADhC,GAEP,kBAFO,GAEca,WAFd,GAE4B,IAF5B,GAGP,SAHO,GAGKrB,SAHL,GAIP,aAJO,GAISC,QAJT,GAIoB,GAJ7B;;YAKIM,KAAJ,EAAW;oBACC,+BAAV;;;kBAEQ,QAAQE,MAAR,GAAiB,SAA3B;OAnBF,MAoBO;qBACQ,SAAS,EAAT,GAAc,MAAd,GAAuBD,GAApC;iBAES,gCAAgCY,UAAhC,GAA6C,QAA7C,GAAwDX,MAAxD,GAAiE,SAA1E;;KAzBJ,MA2BO,IAAIC,WAAW,cAAf,EAA+B;;UAChCG,gBAAgBpe,SAApB,EAA+B;qBAChB0O,SAASsE,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B,CAAT,IAA0D,EAA1D,GAA+D,MAA5E;sBACclP,SAAS0P,YAAY,aAAZ,CAAT,CAAd;;YAEIxX,MAAM+X,UAAN,CAAJ,EAAuB;uBACR,SAAS,EAAT,GAAc,MAA3B;;;YAEE/X,MAAMgY,WAAN,CAAJ,EAAwB;wBACR,CAAd;SAR2B;;;iBAYpB,gCAAgCD,aAAaZ,GAA7C,GAAmD,IAAnD,GACP,kBADO,GACca,WADd,GAC4B,IAD5B,GAEP,SAFO,GAEKrB,SAFL,GAGP,aAHO,GAGSC,QAHT,GAGoB,GAH7B;;YAIIM,KAAJ,EAAW;oBACC,+BAAV;SADF,MAEO;oBACK,8BAAV;;;kBAEQ,2BAA2BI,KAA3B,GAAmC,uBAAnC,GAA6DH,GAA7D,GAAmE,2CAA7E;OArBF,MAsBO;qBACQ,SAAS,EAAT,GAAc,MAAd,GAAuBA,GAApC;iBACS,gCAAgCY,UAAhC,GAA6C,KAAtD;;YACIb,KAAJ,EAAW;oBACC,+BAAV;SADF,MAEO;oBACK,8BAAV;;;kBAEQ,2BAA2BI,KAA3B,GAAmC,uBAAnC,GAA6DH,GAA7D,GAAmE,2CAA7E;;KA/BG,MAiCA,IAAIE,WAAW,aAAf,EAA8B;;mBACtBvP,SAASsE,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B,CAAT,IAA0D,EAA1D,GAA+D,MAA5E;oBACclP,SAASsE,kBAAkB4K,OAAlB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B,CAAT,IAA0D,EAA1D,GAA+D,MAA7E;;UAEIhX,MAAMgY,WAAN,CAAJ,EAAwB;sBACR,CAAd;OALiC;;;;UAS/BhY,MAAM+X,UAAN,CAAJ,EAAuB;qBACR,SAAS,EAAT,GAAc,MAA3B;OADF,MAEO;qBACQ,CAAb;OAZiC;;;UAe7BG,UAAU9L,kBAAkBmL,KAAlB,EAAyB,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,CAAzB,CAAhB,CAfmC;;UAiB/BY,KAAJ;;UACID,YAAY9e,SAAhB,EAA2B;;;;;YAKnBgf,UAAUnL,QAAQ,aAAR,EAAuBiL,OAAvB,EAAgC,QAAhC,CAAhB;YACMrC,iBAAiB5I,QAAQ,KAAR,EAAelD,IAAf,CAAoBqO,OAApB,EAA6BtC,aAA7B,EAAvB;YACMuC,SAASD,QAAQE,KAAR,CAAc,GAAd,EAAmBzY,GAAnB,EAAf;YACM0Y,cAAcvC,iBAAiBqC,MAAjB,CAApB;gBACQ,qBAAqBE,WAArB,GAAmC,UAAnC,GAAgD1P,kBAAkBgN,cAAlB,CAAhD,GAAoF,0CAA5F,CATyB;;;UAYvBqC,YAAY9e,SAAhB,EAA2B;gBACjB,SAAR;;;eAEO,gCAAgC2e,aAAaZ,GAA7C,GAAmD,IAAnD,GACP,kBADO,GACca,WADd,GAC4B,IAD5B,GAEP,SAFO,GAEKpB,QAFL,GAEgB,0BAFzB;;UAGIM,KAAJ,EAAW;kBACC,6BAAV;;;gBAEQ,QAAQiB,KAAR,GAAgB,WAA1B,CAvCmC;KAA9B,MAyCA;eACI,gCAAgC,SAAS,EAAT,GAAc,MAAd,GAAuBhB,GAAvD,GAA6D,IAA7D,GACP,kBADO,GACc,CADd,GACkB,eAD3B;;;WAIKJ,MAAP;;;WAGOT,cAAT,CAAyB9Q,IAAzB,EAA+B8K,iBAA/B,EAAkDC,iBAAlD,EAAqEtT,IAArE,EAA2EgQ,OAA3E,EAAoF;QAC5EJ,wBAAwBI,QAAQ,uBAAR,CAA9B;QAEI5H,OAAOG,KAAK,KAAL,CAAX;;QACI,OAAOH,IAAP,KAAgB,QAAhB,IAA4B,EAAEA,gBAAgBI,MAAlB,CAAhC,EAA2D;aAClD2G,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,KAAV,CAAxB,CAAP;;UACI,OAAOH,IAAP,KAAgB,QAAhB,IAA4B,EAAEA,gBAAgBI,MAAlB,CAAhC,EAA2D;eAClD,QAAP;;;;QAIA+S,YACF,WAAW3B,aAAarR,IAAb,EAAmBvI,IAAnB,EAAyB4P,qBAAzB,CAAX,GACA,aADA,GACgBiK,YAAYtR,IAAZ,EAAkB8K,iBAAlB,EAAqCC,iBAArC,EAAwDtT,IAAxD,EAA8D4P,qBAA9D,CADhB,GAEA,eAFA,GAEkB4L,YAAYjT,IAAZ,EAAkBvI,IAAlB,EAAwB4P,qBAAxB,CAFlB,GAGA,eAHA,GAGkB6L,YAAYlT,IAAZ,EAAkBvI,IAAlB,EAAwB4P,qBAAxB,CAHlB,GAIA,cAJA,GAIiB8L,cAAcnT,IAAd,EAAoBvI,IAApB,EAA0B4P,qBAA1B,CAJjB,GAKA,mBALA,GAKsB+L,kBAAkBpT,IAAlB,EAAwBvI,IAAxB,EAA8B4P,qBAA9B,CALtB,GAMA,cANA,GAMiBgM,uBAAuBrT,IAAvB,EAA6BvI,IAA7B,EAAmC4P,qBAAnC,CANjB,GAOA,kBAPA,GAOqBiM,qBAAqBtT,IAArB,EAA2BvI,IAA3B,EAAiC4P,qBAAjC,CAPrB,GAQA,GATF,CAXkF;;QAsB5EkM,YAAY3M,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,aAAV,CAAxB,CAAlB;;QACIuT,cAAc3f,SAAlB,EAA6B;mBACd,uBAAuBue,aAAaoB,SAAb,CAAvB,GAAiD,GAA9D;mBACa,aAAaC,gBAAgBD,SAAhB,CAAb,GAA0C,GAAvD;KAzBgF;;;QA4B9EE,UAAU,EAAd;;QAEIT,aAAa9I,UAAjB,EAA6B;gBACjBA,WAAW8I,SAAX,EAAsB,MAAtB,CAAV;KADF,MAEO;gBACK,WAAWxf,OAAOwG,IAAP,CAAYkQ,UAAZ,EAAwB9P,MAAxB,GAAiC,CAA5C,CAAV;iBACW4Y,SAAX,IAAwB;gBACdS,OADc;gBAEdT;OAFV;;;QAMIU,SAAS9M,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,cAAV,EAA0B,OAA1B,EAAmC,MAAnC,CAAxB,CAAf,CAxCkF;;QA0C9E0T,WAAW9f,SAAf,EAA0B;UAClB+f,UAAUlM,QAAQ,aAAR,EAAuBiM,MAAvB,EAA+B,QAA/B,CAAhB;aACO,8BAA8BD,OAA9B,GAAwC,eAAxC,GAA0DE,OAA1D,GAAoE,uBAApE,GAA8F9T,KAAKoG,OAAL,CAAa,KAAb,EAAoB,QAApB,CAA9F,GAA8H,aAArI;KAFF,MAGO;aACE,8BAA8BwN,OAA9B,GAAwC,KAAxC,GAAgD5T,KAAKoG,OAAL,CAAa,KAAb,EAAoB,QAApB,CAAhD,GAAgF,SAAvF;;;;WAIKf,YAAT,GAAyB;QACnB0O,UAAU,EAAd;;SACK,IAAI1Z,GAAT,IAAgBgQ,UAAhB,EAA4B;iBACf,cAAcA,WAAWhQ,GAAX,EAAgB,MAAhB,CAAd,GAAwC,GAAxC,GAA8CgQ,WAAWhQ,GAAX,EAAgB,MAAhB,CAA9C,GAAwE,KAAnF;;;WAEK0Z,OAAP;;;WAGO1K,QAAT,CAAmBlJ,IAAnB,EAAyByH,OAAzB,EAAkC;QAC1Be,QAAQxI,KAAK,OAAL,EAAc,OAAd,CAAd;QACM6T,YAAYjN,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,eAAd,EAA+B,OAA/B,CAAxB,CAAlB;QACMsI,WAAW1B,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,CAAxB,CAAjB,CAHgC;;QAK1B8T,WAAWlN,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,eAAd,EAA+B,OAA/B,EAAwC,SAAxC,CAAxB,CAAjB;QACM+T,cAAcnN,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,eAAd,EAA+B,OAA/B,EAAwC,WAAxC,EAAqD,WAArD,CAAxB,CAApB;QACIgU,SAAS,EAAb;;QACIF,aAAalgB,SAAjB,EAA4B;UACpB8d,QAAQoC,SAAS,OAAT,EAAkB,KAAlB,CAAd;eACUpC,UAAU,CAAV,GAAc,SAAd,GAA0B,SAApC;;;QAEIuC,eAAeH,SAAS,OAAT,EAAkB,UAAlB,CAArB,CAZgC;;;;;QAgB1BI,cAAcJ,SAAS,OAAT,EAAkB,SAAlB,CAApB,CAhBgC;;;;;QAoB5BK,YAAY,YAAYH,MAAZ,GAAqB,qCAArB,GAA6D1K,YAAYhB,QAAZ,EAAsB1U,SAAtB,EAAiCA,SAAjC,CAA7D,GAA2G2V,QAAQjB,QAAR,EAAkB1U,SAAlB,EAA6BA,SAA7B,CAA3G,GAAqJ,YAArJ,GAAoK4U,KAApK,GAA4K,MAA5L;QAEM4L,UAAUP,UAAU,MAAV,CAAhB;;QACIO,QAAQ5d,WAAR,KAAwB+K,KAA5B,EAAmC;WAC5B,IAAI9G,IAAI,CAAb,EAAgBA,IAAI2Z,QAAQha,MAA5B,EAAoCK,GAApC,EAAyC;;YAEjC4Z,iBAAiBD,QAAQ3Z,CAAR,EAAW,OAAX,EAAoB,GAApB,CAAvB;YACI6Z,YAAY,CAAhB;YACIC,WAAW,EAAf;;YACIF,mBAAmBzgB,SAAvB,EAAkC;sBACpB0O,SAAS+R,cAAT,IAA2B,EAA3B,GAAgC,MAA5C;sBACY,YAAYC,SAAZ,GAAwB,KAApC,CAFgC;SALK;;;;YAanCE,qBAAJ;YACMC,cAAcX,SAAS,gBAAT,CAApB;;YACIW,gBAAgB7gB,SAApB,EAA+B;;;cAGvB8gB,eAAevK,YAAY,eAAZ,EAA6B,YAA7B,CAArB;;eAEK,IAAIsF,IAAI,CAAb,EAAgBA,IAAIiF,aAAata,MAAjC,EAAyCqV,GAAzC,EAA8C;gBACxCiF,aAAajF,CAAb,EAAgB,OAAhB,EAAyB,SAAzB,MAAwCgF,WAA5C,EAAyD;6BACxCC,aAAajF,CAAb,CAAf;;;SAtBiC;;;YA2BnChV,MAAM,CAAN,IAAWwZ,iBAAiBrgB,SAAhC,EAA2C;cACrCmY,YAAY,KAAhB;cACI4I,eAAe,CAAnB;;cACIH,aAAa,YAAb,MAA+B5gB,SAAnC,EAA8C;gBACtCghB,kBAAkBhO,kBAAkB4N,YAAlB,EAAgC,CAAC,YAAD,EAAe,WAAf,EAA4B,QAA5B,EAAsC,aAAtC,CAAhC,CAAxB;;gBACII,oBAAoBhhB,SAAxB,EAAmC;0BACrBue,aAAayC,eAAb,CAAZ;6BACepB,gBAAgBoB,eAAhB,CAAf;aAJ0C;;;;;gBAUtCC,aAAajO,kBAAkB4N,YAAlB,EAAgC,CAAC,YAAD,EAAe,WAAf,EAA4B,SAA5B,CAAhC,CAAnB;;gBACIK,eAAejhB,SAAnB,EAA8B;kBACtBkhB,aAAaC,gBAAgBF,UAAhB,CAAnB;0BACYC,UAAZ;aAb0C;;;;gBAkBtCE,aAAapO,kBAAkB4N,YAAlB,EAAgC,CAAC,YAAD,EAAe,aAAf,CAAhC,CAAnB;;;;;sBAgBU,wBAAwBzI,SAAxB,GAAoC,GAApC,GACV,WADU,GACI4I,YADJ,GACmB,GAD/B;SArCF,MAuCO,IAAIla,IAAI,CAAJ,IAASyZ,gBAAgBtgB,SAA7B,EAAwC;cACzCmY,aAAY,KAAhB;cACI4I,gBAAe,CAAnB;;cACKla,IAAI,CAAL,KAAY,CAAhB,EAAmB;gBACb+Z,aAAa,UAAb,MAA6B5gB,SAAjC,EAA4C;;kBAEpCghB,mBAAkBhO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,EAAoC,aAApC,CAAhC,CAAxB;;kBACII,qBAAoBhhB,SAAxB,EAAmC;6BACrBue,aAAayC,gBAAb,CAAZ;gCACepB,gBAAgBoB,gBAAhB,CAAf;eALwC;;;;kBASpCC,cAAajO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,CAAhC,CAAnB;;kBACIK,gBAAejhB,SAAnB,EAA8B;oBACtBkhB,cAAaC,gBAAgBF,WAAhB,CAAnB;;4BACYC,WAAZ;eAZwC;;;;kBAiBpCE,cAAapO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,aAAb,CAAhC,CAAnB;;cAjB0C;;;;;;;;;;;;;;;;;;;;;;;WAD9C,MA2CO;gBACDA,aAAa,UAAb,MAA6B5gB,SAAjC,EAA4C;kBACpCghB,oBAAkBhO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,EAAoC,aAApC,CAAhC,CAAxB;;kBACII,sBAAoBhhB,SAAxB,EAAmC;6BACrBue,aAAayC,iBAAb,CAAZ;gCACepB,gBAAgBoB,iBAAhB,CAAf;eAJwC;;;;kBAQpCC,eAAajO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,CAAhC,CAAnB;;kBACIK,iBAAejhB,SAAnB,EAA8B;oBACtBkhB,eAAaC,gBAAgBF,YAAhB,CAAnB;;4BACYC,YAAZ;eAXwC;;;;kBAgBpCE,eAAapO,kBAAkB4N,YAAlB,EAAgC,CAAC,UAAD,EAAa,aAAb,CAAhC,CAAnB;;;;;;sBAKQ,wBAAwBzI,UAAxB,GAAoC,GAApC,GACV,WADU,GACI4I,aADJ,GACmB,GAD/B;;;qBAGW,iBAAiBJ,QAAjB,GAA4B,KAAzC,CAzIuC;;YA4IjCU,UAAUb,QAAQ3Z,CAAR,EAAW,MAAX,CAAhB;;YAEIwa,QAAQze,WAAR,KAAwB+K,KAA5B,EAAmC;eAC5B,IAAIwP,IAAI,CAAb,EAAgBA,IAAIkE,QAAQ7a,MAA5B,EAAoC2W,GAApC,EAAyC;gBACjClR,OAAOqO,YAAY+G,QAAQlE,CAAR,EAAW,UAAX,CAAZ,EAAoCnd,SAApC,EAA+CA,SAA/C,EAA0DA,SAA1D,EAAqE6T,OAArE,CAAb;gBACMyN,UAAUtO,kBAAkBqO,QAAQlE,CAAR,CAAlB,EAA8B,CAAC,OAAD,EAAU,SAAV,CAA9B,CAAhB;gBACMoE,UAAUvO,kBAAkBqO,QAAQlE,CAAR,CAAlB,EAA8B,CAAC,OAAD,EAAU,UAAV,CAA9B,CAAhB;gBACMqE,SAASxO,kBAAkBqO,QAAQlE,CAAR,CAAlB,EAA8B,CAAC,OAAD,EAAU,QAAV,CAA9B,CAAf;gBACMsE,SAASzO,kBAAkBqO,QAAQlE,CAAR,CAAlB,EAA8B,CAAC,OAAD,EAAU,QAAV,CAA9B,CAAf,CALuC;;;;gBASjCuE,gBAAgBvB,YAAYhD,CAAZ,EAAe,OAAf,EAAwB,GAAxB,CAAtB;gBACIwE,UAAU,EAAd;;gBACID,kBAAkB1hB,SAAtB,EAAiC;kBACzB4hB,WAAWlT,SAASgT,aAAT,IAA0B,EAA1B,GAA+B,MAAhD;yBACW,WAAWE,QAAX,GAAsB,KAAjC;;;gBAEIC,UAAUR,QAAQlE,CAAR,EAAW,QAAX,EAAqB,aAArB,CAAhB;gBACIhF,cAAY,EAAhB;gBACI4I,iBAAe,CAAnB;;gBACIc,YAAY7hB,SAAhB,EAA2B;;4BAEbue,aAAasD,OAAb,CAAZ;+BACejC,gBAAgBiC,OAAhB,CAAf;aAHF,MAIO;;;cAAA;;;;gBAiBH1J,gBAAc,EAAlB,EAAsB;yBACT,wBAAwBA,WAAxB,GAAoC,GAA/C;yBACW,aAAa4I,cAAb,GAA4B,GAAvC;aAzCqC;;;;gBA8CnCO,YAAYthB,SAAhB,EAA2B;2BACZ,mBAAmB0O,SAAS4S,OAAT,CAAnB,GAAuC,aAAvC,GAAuDK,OAAvD,GAAiE,KAAjE,GAAyE1V,IAAzE,GAAgF,OAA7F;aADF,MAEO,IAAIsV,YAAYvhB,SAAhB,EAA2B;2BACnB,mBAAmB0O,SAAS6S,OAAT,CAAnB,GAAuC,aAAvC,GAAuDI,OAAvD,GAAiE,KAAjE,GAAyE1V,IAAzE,GAAgF,OAA7F;aADK,MAEA,IAAIuV,WAAWxhB,SAAX,IAAwByhB,WAAWzhB,SAAvC,EAAkD;2BAC1C,iBAAiB2hB,OAAjB,GAA2B,KAA3B,GAAmC1V,IAAnC,GAA0C,OAAvD;;;SApDN,MAuDO;cACCA,QAAOqO,YAAY+G,QAAQ,UAAR,CAAZ,CAAb,CADK;;;cAGCK,iBAAgBvB,YAAY,CAAZ,EAAe,OAAf,EAAwB,GAAxB,CAAtB;cACIwB,WAAU,EAAd;;cACID,mBAAkB1hB,SAAtB,EAAiC;gBACzB4hB,YAAWlT,SAASgT,cAAT,IAA0B,EAA1B,GAA+B,MAAhD;;wBACW,WAAWE,SAAX,GAAsB,KAAjC;;;cAEIC,WAAUR,QAAQ,QAAR,EAAkB,aAAlB,CAAhB;cACIlJ,cAAY,EAAhB;cACI4I,iBAAe,CAAnB;;cACIc,aAAY7hB,SAAhB,EAA2B;;0BAEbue,aAAasD,QAAb,CAAZ;6BACejC,gBAAgBiC,QAAhB,CAAf;WAHF,MAIO;;;cAGH1J,gBAAc,EAAlB,EAAsB;wBACT,wBAAwBA,WAAxB,GAAoC,GAA/C;wBACW,aAAa4I,cAAb,GAA4B,GAAvC;WArBG;;;uBAwBQ,iBAAiBY,QAAjB,GAA2B,KAA3B,GAAmC1V,KAAnC,GAA0C,OAAvD;;;qBAEW,OAAb;;KAhOJ,MAkOO;;UAECwU,kBAAiBD,QAAQ,OAAR,EAAiB,GAAjB,CAAvB;UACIE,aAAY,CAAhB;;UACID,oBAAmBzgB,SAAvB,EAAkC;qBACpB0O,SAAS+R,eAAT,IAA2B,EAA3B,GAAgC,MAA5C;qBACa,wBAAwBC,UAAxB,GAAoC,QAAjD;OAFF,MAGO;qBACQ,MAAb;OARG;;;UAWCW,WAAUb,QAAQ,MAAR,CAAhB;;UACIa,SAAQze,WAAR,KAAwB+K,KAA5B,EAAmC;aAC5B,IAAIwP,MAAI,CAAb,EAAgBA,MAAIkE,SAAQ7a,MAA5B,EAAoC2W,KAApC,EAAyC;cACjClR,SAAOqO,YAAY+G,SAAQlE,GAAR,EAAW,UAAX,CAAZ,CAAb,CADuC;;;cAGjCuE,kBAAgBvB,YAAYhD,GAAZ,EAAe,OAAf,EAAwB,GAAxB,CAAtB;cACIwE,YAAU,EAAd;;cACID,oBAAkB1hB,SAAtB,EAAiC;gBACzB4hB,aAAWlT,SAASgT,eAAT,IAA0B,EAA1B,GAA+B,MAAhD;;yBACW,WAAWE,UAAX,GAAsB,KAAjC;;;cAEIC,YAAUR,SAAQlE,GAAR,EAAW,QAAX,EAAqB,aAArB,CAAhB;cACIhF,cAAY,EAAhB;cACI4I,iBAAe,CAAnB;;cACIc,cAAY7hB,SAAhB,EAA2B;0BACbue,aAAasD,SAAb,CAAZ;6BACejC,gBAAgBiC,SAAhB,CAAf;WAFF,MAGO;;;;;cAKH1J,gBAAc,EAAlB,EAAsB;yBACT,wBAAwBA,WAAxB,GAAoC,GAA/C;yBACW,aAAa4I,cAAb,GAA4B,GAAvC;WAtBqC;;;uBAyB1B,iBAAiBY,SAAjB,GAA2B,KAA3B,GAAmC1V,MAAnC,GAA0C,OAAvD;;OA1BJ,MA4BO;YACCA,SAAOqO,YAAY+G,SAAQ,UAAR,CAAZ,CAAb,CADK;;;YAGCK,kBAAgBvB,YAAY,CAAZ,EAAe,OAAf,EAAwB,GAAxB,CAAtB;YACIwB,YAAU,EAAd;;YACID,oBAAkB1hB,SAAtB,EAAiC;cACzB4hB,aAAWlT,SAASgT,eAAT,IAA0B,EAA1B,GAA+B,MAAhD;;uBACW,WAAWE,UAAX,GAAsB,KAAjC;;;YAEIC,YAAUR,SAAQ,QAAR,EAAkB,aAAlB,CAAhB;YACIlJ,cAAY,EAAhB;YACI4I,iBAAe,CAAnB;;YACIc,cAAY7hB,SAAhB,EAA2B;;wBAEbue,aAAasD,SAAb,CAAZ;2BACejC,gBAAgBiC,SAAhB,CAAf;SAHF,MAIO;;;YAGH1J,gBAAc,EAAlB,EAAsB;uBACT,wBAAwBA,WAAxB,GAAoC,GAA/C;uBACW,aAAa4I,cAAb,GAA4B,GAAvC;SArBG;;;qBAwBQ,iBAAiBY,SAAjB,GAA2B,KAA3B,GAAmC1V,MAAnC,GAA0C,OAAvD;;;mBAEW,OAAb;;;WAGKsU,SAAP;;;WA8FO/K,UAAT,CAAqBpJ,IAArB,EAA2ByH,OAA3B,EAAoC;;QAE5Ba,WAAW1B,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,CAAxB,CAAjB;WACO,6DACLsJ,YAAYhB,QAAZ,EAAsB1U,SAAtB,EAAiCA,SAAjC,CADK,GACyC2V,QAAQjB,QAAR,EAAkB1U,SAAlB,EAA6BA,SAA7B,CADzC,GAEL,wBAFF;;;WAKO0V,WAAT,CAAsBoM,WAAtB,EAAmC5K,iBAAnC,EAAsDC,iBAAtD,EAAyE;QACnE4K,GAAJ;QACIhN,IAAI,CAAC,CAAT;QACIF,IAAI,CAAC,CAAT;;QAEIiN,gBAAgB9hB,SAApB,EAA+B;YACvB8hB,YAAY,OAAZ,EAAqB,OAArB,CAAN;KADF,MAEO,IAAI5K,sBAAsBlX,SAA1B,EAAqC;YACpCkX,kBAAkB,OAAlB,EAA2B,OAA3B,CAAN;KADK,MAEA,IAAIC,sBAAsBnX,SAA1B,EAAqC;YACpCmX,kBAAkB,OAAlB,EAA2B,OAA3B,CAAN;;;QAGE4K,QAAQ/hB,SAAZ,EAAuB;aACd,EAAP;KADF,MAEO;UACD0O,SAASqT,IAAI,GAAJ,CAAT,IAAqB,EAArB,GAA0B,MAA9B;UACIrT,SAASqT,IAAI,GAAJ,CAAT,IAAqB,EAArB,GAA0B,MAA9B;aACQnb,MAAMmO,CAAN,KAAYnO,MAAMiO,CAAN,CAAb,GAAyB,EAAzB,GAA8B,SAASA,CAAT,GAAa,WAAb,GAA2BE,CAA3B,GAA+B,KAApE;;;;WAIKY,OAAT,CAAkBmM,WAAlB,EAA+B5K,iBAA/B,EAAkDC,iBAAlD,EAAqE;QAC/DmB,GAAJ;QACIP,IAAI,CAAC,CAAT;QACI3K,IAAI,CAAC,CAAT;;QAEI0U,gBAAgB9hB,SAApB,EAA+B;YACvB8hB,YAAY,OAAZ,EAAqB,OAArB,CAAN;KADF,MAEO,IAAI5K,sBAAsBlX,SAA1B,EAAqC;YACpCkX,kBAAkB,OAAlB,EAA2B,OAA3B,CAAN;KADK,MAEA,IAAIC,sBAAsBnX,SAA1B,EAAqC;YACpCmX,kBAAkB,OAAlB,EAA2B,OAA3B,CAAN;;;QAGEmB,QAAQtY,SAAZ,EAAuB;aACd,EAAP;KADF,MAEO;UACD0O,SAAS4J,IAAI,IAAJ,CAAT,IAAsB,EAAtB,GAA2B,MAA/B;UACI5J,SAAS4J,IAAI,IAAJ,CAAT,IAAsB,EAAtB,GAA2B,MAA/B;aACQ1R,MAAMmR,CAAN,KAAYnR,MAAMwG,CAAN,CAAb,GAAyB,EAAzB,GAA8B,WAAW2K,CAAX,GAAe,aAAf,GAA+B3K,CAA/B,GAAmC,KAAxE;;;;WAIK4P,kBAAT,CAA6B5Q,IAA7B,EAAmC8K,iBAAnC,EAAsDC,iBAAtD,EAAyEtT,IAAzE,EAA+E4P,qBAA/E,EAAsG;QAChGuO,OAAOhP,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CAAxB,CAAX;;QACI4V,SAAShiB,SAAb,EAAwB;aACfgT,kBAAkBkE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,KAAb,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,MAAtC,CAArC,CAAP;;UACI8K,SAAShiB,SAAb,EAAwB;eACfgT,kBAAkBmE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,KAAb,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,MAAtC,CAArC,CAAP;;YACI6K,SAAShiB,SAAb,EAAwB;kBACd6D,IAAR;iBACO,OAAL;iBACK,UAAL;iBACK,UAAL;;uBACSmP,kBAAkBS,qBAAlB,EAAyC,CAAC,cAAD,EAAiB,WAAjB,EAA8B,OAA9B,EAAuC,MAAvC,CAAzC,CAAP;;;;;;uBAIOT,kBAAkBS,qBAAlB,EAAyC,CAAC,cAAD,EAAiB,WAAjB,EAA8B,OAA9B,EAAuC,MAAvC,CAAzC,CAAP;;;;;KAf0F;;;QAsBhGuO,SAAShiB,SAAb,EAAwB;UAClB6D,SAAS,OAAT,IAAoBA,SAAS,UAA7B,IAA2CA,SAAS,UAAxD,EAAoE;eAC3D,OAAP;OADF,MAEO,IAAIA,SAAS,QAAb,EAAuB;eACrB,SAAP;;;;WAGGme,SAAS,KAAT,GAAiB,OAAjB,GAA2BA,SAAS,GAAT,GAAe,SAAf,GAA2B,QAA7D;;;WAGO3H,gBAAT,CAA2BjO,IAA3B,EAAiC8K,iBAAjC,EAAoDC,iBAApD,EAAuEtT,IAAvE,EAA6E4P,qBAA7E,EAAoG;;QAE9FwO,SAASjP,kBAAkB5G,IAAlB,EAAwB,CAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,QAAlC,CAAxB,CAAb;;QACI6V,WAAWjiB,SAAf,EAA0B;eACfgT,kBAAkBkE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,QAAlC,CAArC,CAAT;;UACI+K,WAAWjiB,SAAf,EAA0B;iBACfgT,kBAAkBmE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,QAAlC,CAArC,CAAT;;;;WAIG8K,WAAW,KAAX,GAAmB,OAAnB,GAA6BA,WAAW,GAAX,GAAiB,QAAjB,GAA4B,MAAhE;;;WAGO5C,WAAT,CAAsBjT,IAAtB,EAA4BvI,IAA5B,EAAkC4P,qBAAlC,EAAyD;QACnDoL,WAAW7L,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,EAA8B,UAA9B,CAAxB,CAAf;;QAEIyS,aAAa7e,SAAjB,EAA4B;UACpBkiB,iBAAiBlP,kBAAkBoD,YAAlB,EAAgC,CAAC,SAAD,EAAY,iBAAZ,EAA+B,cAA/B,CAAhC,CAAvB;;UACIvS,SAAS,OAAT,IAAoBA,SAAS,UAA7B,IAA2CA,SAAS,UAAxD,EAAoE;mBACvDmP,kBAAkBkP,cAAlB,EAAkC,CAAC,aAAD,EAAgB,SAAhB,EAA2B,OAA3B,EAAoC,UAApC,CAAlC,CAAX;OADF,MAEO,IAAIre,SAAS,MAAb,EAAqB;mBACfmP,kBAAkBkP,cAAlB,EAAkC,CAAC,aAAD,EAAgB,SAAhB,EAA2B,OAA3B,EAAoC,UAApC,CAAlC,CAAX;OADK,MAEA;mBACMlP,kBAAkBkP,cAAlB,EAAkC,CAAC,aAAD,EAAgB,SAAhB,EAA2B,OAA3B,EAAoC,UAApC,CAAlC,CAAX;;;;WAIIrD,aAAa7e,SAAd,GAA2B,SAA3B,GAAuC6e,QAA9C;;;WAGOpB,YAAT,CAAuBrR,IAAvB,EAA6BvI,IAA7B,EAAmC4P,qBAAnC,EAA0D;QAClD0O,gBAAgBC,iBAAiBhW,IAAjB,EAAuB,mBAAvB,CAAtB;QAEMuM,QAAQ4F,aAAa4D,aAAb,CAAd,CAHwD;;;WAMhDxJ,UAAU3Y,SAAV,IAAuB2Y,UAAU,KAAlC,GAA2C,MAA3C,GAAoD,MAAMA,KAAjE;;;WAGO+E,WAAT,CAAsBtR,IAAtB,EAA4B8K,iBAA5B,EAA+CC,iBAA/C,EAAkEtT,IAAlE,EAAwE4P,qBAAxE,EAA+F;QACzF4O,QAAJ;QACIC,EAAJ;;QACIlW,KAAK,OAAL,MAAkBpM,SAAtB,EAAiC;iBACpB0O,SAAStC,KAAK,OAAL,EAAc,OAAd,EAAuB,IAAvB,CAAT,IAAyC,GAApD;;;QAGGxF,MAAMyb,QAAN,KAAmBA,aAAariB,SAArC,EAAiD;WAC1CgT,kBAAkBkE,iBAAlB,EAAqC,CAAC,UAAD,EAAa,YAAb,EAA2B,WAA3B,EAAwC,UAAxC,EAAoD,OAApD,EAA6D,IAA7D,CAArC,CAAL;iBACWxI,SAAS4T,EAAT,IAAe,GAA1B;;;QAGE1b,MAAMyb,QAAN,KAAmBA,aAAariB,SAApC,EAA+C;UACzC6D,SAAS,OAAT,IAAoBA,SAAS,UAA7B,IAA2CA,SAAS,UAAxD,EAAoE;aAC7DmP,kBAAkBS,qBAAlB,EAAyC,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,EAA0C,OAA1C,EAAmD,IAAnD,CAAzC,CAAL;OADF,MAEO,IAAI5P,SAAS,MAAb,EAAqB;aACrBmP,kBAAkBS,qBAAlB,EAAyC,CAAC,aAAD,EAAgB,WAAhB,EAA6B,UAA7B,EAAyC,OAAzC,EAAkD,IAAlD,CAAzC,CAAL;OADK,MAEA,IAAI5P,SAAS,IAAT,IAAiBA,SAAS,QAA9B,EAAwC;aACxC,MAAL;OADK,MAEA,IAAIA,SAAS7D,SAAb,EAAwB;aACxBgT,kBAAkBS,qBAAlB,EAAyC,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,EAA0C,OAA1C,EAAmD,IAAnD,CAAzC,CAAL;;;iBAES/E,SAAS4T,EAAT,IAAe,GAA1B;;;QAGIC,WAAWvP,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,OAAV,EAAmB,UAAnB,CAAxB,CAAjB;;QACImW,aAAaviB,SAAb,IAA0B,CAAC4G,MAAMyb,QAAN,CAA/B,EAAgD;kBAClC,EAAZ;;;WAGKzb,MAAMyb,QAAN,IAAkB,SAAlB,GAA+BA,WAAW,IAAjD;;;WAGO/C,WAAT,CAAsBlT,IAAtB,EAA4BvI,IAA5B,EAAkC4P,qBAAlC,EAAyD;WAC/CrH,KAAK,OAAL,MAAkBpM,SAAlB,IAA+BoM,KAAK,OAAL,EAAc,OAAd,EAAuB,GAAvB,MAAgC,GAAhE,GAAuE,MAAvE,GAAgF,SAAvF;;;WAGOmT,aAAT,CAAwBnT,IAAxB,EAA8BvI,IAA9B,EAAoC4P,qBAApC,EAA2D;WACjDrH,KAAK,OAAL,MAAkBpM,SAAlB,IAA+BoM,KAAK,OAAL,EAAc,OAAd,EAAuB,GAAvB,MAAgC,GAAhE,GAAuE,QAAvE,GAAkF,QAAzF;;;WAGOoT,iBAAT,CAA4BpT,IAA5B,EAAkCvI,IAAlC,EAAwC4P,qBAAxC,EAA+D;;QAEzDrH,KAAK,OAAL,MAAkBpM,SAAtB,EAAiC;UACzBwiB,YAAYpW,KAAK,OAAL,EAAc,OAAd,EAAuB,GAAvB,MAAgCpM,SAAhC,GAA4CoM,KAAK,OAAL,EAAc,OAAd,EAAuB,GAAvB,CAA5C,GAA0E,MAA5F;UACMqW,gBAAgBrW,KAAK,OAAL,EAAc,OAAd,EAAuB,QAAvB,MAAqCpM,SAArC,GAAiDoM,KAAK,OAAL,EAAc,OAAd,EAAuB,QAAvB,CAAjD,GAAoF,UAA1G,CAF+B;;UAK3BoW,cAAc,MAAd,IAAwBC,kBAAkB,UAA9C,EAA0D;eACjD,WAAP;OADF,MAEO,IAAID,cAAc,MAAd,IAAwBC,kBAAkB,UAA9C,EAA0D;eACxD,cAAP;OADK,MAEA,IAAID,cAAc,MAAd,IAAwBC,kBAAkB,UAA9C,EAA0D;eACxD,wBAAP;OADK,MAEA;eACE,SAAP;;KAZJ,MAcO;aACE,SAAP;KAjB2D;;;GA/oEU;;;WAuqEhEhD,sBAAT,CAAiCrT,IAAjC,EAAuCvI,IAAvC,EAA6C4P,qBAA7C,EAAoE;QAC5DiP,UAAU1P,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CAAxB,CAAhB;QACIuW,QAAQ,SAAZ;;QACID,YAAY1iB,SAAhB,EAA2B;cACjB0iB,OAAR;aACO,GAAL;;oBACU,MAAR;;;;aAGG,GAAL;;oBACU,OAAR;;;;aAGG,KAAL;;oBACU,QAAR;;;;aAGG,MAAL;;oBACU,SAAR;;;;aAGG,MAAL;;oBACU,SAAR;;;;;kBAIQ,SAAR;;;;WAGCC,KAAP;GApsEuE;;;WAwsEhEjD,oBAAT,CAA+BtT,IAA/B,EAAqCvI,IAArC,EAA2C4P,qBAA3C,EAAkE;QAC1D8O,WAAWvP,kBAAkB5G,IAAlB,EAAwB,CAAC,OAAD,EAAU,OAAV,EAAmB,UAAnB,CAAxB,CAAjB;WACOmW,aAAaviB,SAAb,GAAyB,UAAzB,GAAuC0O,SAAS6T,QAAT,IAAqB,IAAtB,GAA8B,GAA3E;GA1sEuE;;;;;;;;;;;;;;;;;;;;;;;;;WAouEhEpB,eAAT,CAA0B/U,IAA1B,EAAgC;QAC1BwW,cAAc,EAAlB;QACIhhB,GAAJ;QACIihB,OAAJ;;QACIzW,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;YAC5B;kBACM;kBACAoM,KAAK,UAAL,EAAiB,MAAjB;;OAFZ;gBAKU8M,UAAUtX,GAAV,EAAe,KAAf,CAAV;qBACeihB,QAAQxQ,OAAR,CAAgB,QAAhB,EAA0B,eAA1B,CAAf;;;QAEEjG,KAAK,OAAL,MAAkBpM,SAAtB,EAAiC;YACzB;kBACM;kBACAoM,KAAK,OAAL,EAAc,MAAd;;OAFZ;gBAKU8M,UAAUtX,GAAV,EAAe,KAAf,CAAV;qBACeihB,QAAQxQ,OAAR,CAAgB,QAAhB,EAA0B,YAA1B,CAAf;;;QAEEjG,KAAK,SAAL,MAAoBpM,SAAxB,EAAmC;YAC3B;kBACM;kBACAoM,KAAK,SAAL,EAAgB,MAAhB;;OAFZ;gBAKU8M,UAAUtX,GAAV,EAAe,KAAf,CAAV;qBACeihB,QAAQxQ,OAAR,CAAgB,QAAhB,EAA0B,cAA1B,CAAf;;;QAEEjG,KAAK,QAAL,MAAmBpM,SAAvB,EAAkC;YAC1B;kBACM;kBACAoM,KAAK,QAAL,EAAe,MAAf;;OAFZ;gBAKU8M,UAAUtX,GAAV,EAAe,KAAf,CAAV;qBACeihB,QAAQxQ,OAAR,CAAgB,QAAhB,EAA0B,aAA1B,CAAf;;;WAGKuQ,WAAP;GA7wEuE;;;WAixEhE1J,SAAT,CAAoB9M,IAApB,EAA0B0W,SAA1B,EAAqC;QAC/B9C,UAAU,UAAd,CADmC;;QAI7B+C,WAAW3W,KAAK,QAAL,EAAe,MAAf,CAAjB,CAJmC;;QAO7B4W,cAActU,SAASsE,kBAAkB+P,QAAlB,EAA4B,CAAC,OAAD,EAAU,GAAV,CAA5B,CAAT,IAAwD,KAA5E;;QACInc,MAAMoc,WAAN,KAAsBA,cAAc,CAAxC,EAA2C;iBAC9B,MAAX;KADF,MAEO;iBACMA,cAAc,KAAzB;KAXiC;;;QAc7BC,aAAajQ,kBAAkB+P,QAAlB,EAA4B,CAAC,YAAD,EAAe,OAAf,EAAwB,KAAxB,CAA5B,CAAnB;QACI3J,kBAAkB,GAAtB;;YACQ6J,UAAR;WACO,OAAL;;qBACa,OAAX;4BACkB,GAAlB;;;;WAGG,MAAL;;qBACa,QAAX;4BACkB,GAAlB;;;;WAGG,SAAL;;qBACa,QAAX;4BACkB,YAAlB;;;;WAGG,KAAL;;qBACa,QAAX;4BACkB,MAAlB;;;;WAGG,QAAL;;qBACa,QAAX;4BACkB,OAAlB;;;;WAGG,cAAL;;qBACa,QAAX;4BACkB,mBAAlB;;;;WAGG,SAAL;;qBACa,QAAX;4BACkB,MAAlB;;;;WAGG,YAAL;;qBACa,QAAX;4BACkB,YAAlB;;;;WAGG,eAAL;;qBACa,QAAX;4BACkB,kBAAlB;;;;WAGG,QAAL;;qBACa,QAAX;4BACkB,MAAlB;;;;;;qBAIW,OAAX;4BACkB,GAAlB;;KArE+B;;;QAyE/BC,cAAclQ,kBAAkB+P,QAAlB,EAA4B,CAAC,aAAD,EAAgB,WAAhB,EAA6B,OAA7B,EAAsC,KAAtC,CAA5B,CAAlB;;QACIG,gBAAgBljB,SAApB,EAA+B;UACvBmjB,gBAAgBnQ,kBAAkB+P,QAAlB,EAA4B,CAAC,aAAD,EAAgB,aAAhB,CAA5B,CAAtB;;UACII,kBAAkBnjB,SAAtB,EAAiC;YACzBojB,YAAY,OAAOpQ,kBAAkBmQ,aAAlB,EAAiC,CAAC,OAAD,EAAU,KAAV,CAAjC,CAAzB;sBACcE,wBAAwBD,SAAxB,EAAmCpjB,SAAnC,CAAd;;KA9E+B;;;QAmF/BkjB,gBAAgBljB,SAApB,EAA+B;UACvBmjB,iBAAgBnQ,kBAAkB5G,IAAlB,EAAwB,CAAC,SAAD,EAAY,SAAZ,EAAuB,aAAvB,CAAxB,CAAtB;;UACI+W,mBAAkBnjB,SAAtB,EAAiC;YACzBojB,aAAY,OAAOpQ,kBAAkBmQ,cAAlB,EAAiC,CAAC,OAAD,EAAU,KAAV,CAAjC,CAAzB;;sBACcE,wBAAwBD,UAAxB,EAAmCpjB,SAAnC,CAAd;;;UAGEkjB,gBAAgBljB,SAApB,EAA+B;YACzBsjB,QAAQtQ,kBAAkBmQ,cAAlB,EAAiC,CAAC,SAAD,EAAY,OAAZ,EAAqB,KAArB,CAAjC,CAAZ;;YACIG,UAAUtjB,SAAd,EAAyB;kBACf0O,SAAS4U,KAAT,IAAkB,MAA1B;cACM3K,QAAQ,IAAI4K,KAAJ,CAAe,MAAML,WAArB,CAAd;gBACMM,MAAN,CAAa7K,MAAM3K,GAAN,CAAUV,CAAV,GAAcgW,KAA3B;wBACc3K,MAAM7K,GAAN,CAAUuE,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAd;;;;;QAKF6Q,gBAAgBljB,SAApB,EAA+B;UACzB8iB,SAAJ,EAAe;sBACC,MAAd;OADF,MAEO;sBACS,MAAd;;KAJJ,MAMO;oBACS,MAAMI,WAApB;;;eAES,MAAMA,WAAN,GAAoB,GAA/B;;QAEIJ,SAAJ,EAAe;aACN;iBAAUI,WAAV;iBAAgCF,WAAhC;gBAAqDC,UAArD;2BAAoF7J;OAA3F;KADF,MAEO;aACE4G,UAAU,GAAjB;;;;WAIKpM,sBAAT,CAAiCP,YAAjC,EAA+CV,kBAA/C,EAAmEM,kBAAnE,EAAuFY,OAAvF,EAAgG;;;QAG1F4P,OAAOzQ,kBAAkBK,YAAlB,EAAgC,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,QAA5B,CAAhC,CAAX;QACIqQ,QAAQ1Q,kBAAkBK,YAAlB,EAAgC,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,SAA5B,CAAhC,CAAZ;QACIsQ,OAAJ;;QAEIF,SAASzjB,SAAb,EAAwB;;UAEhB4jB,YAAYnL,YAAYgL,IAAZ,CAAlB;;UAEIG,cAAc,YAAlB,EAAgC;YACxBC,UAAUJ,KAAK,aAAL,CAAhB;YACMzP,UAAUuK,aAAasF,OAAb,CAAhB;YACMC,UAAUlE,gBAAgBiE,OAAhB,CAAhB;kBACU,sBAAsBE,YAAY/P,OAAZ,CAAtB,GAA6C,GAA7C,GAAmD8P,OAAnD,GAA6D,IAAvE;OAJF,MAKO,IAAIF,cAAc,eAAlB,EAAmC;YAClCI,UAAUP,KAAK,YAAL,CAAhB,CADwC;;;YAIlCQ,QAAQD,QAAQ,SAAR,EAAmB,MAAnB,CAAd,CAJwC;;;;YAQlCtL,aAAa,EAAnB;YACMwL,YAAY,EAAlB;;aACK,IAAIrd,IAAI,CAAb,EAAgBA,IAAIod,MAAMzd,MAA1B,EAAkCK,GAAlC,EAAuC;cACjCsd,eAAJ;cACIC,gBAAJ;;cACIH,MAAMpd,CAAN,EAAS,WAAT,MAA0B7G,SAA9B,EAAyC;sBAC7BgT,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA5B,CAAV,CADuC;;qBAE9BmM,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,KAAjC,CAA5B,CAAT;WAFF,MAGO,IAAIod,MAAMpd,CAAN,EAAS,aAAT,MAA4B7G,SAAhC,EAA2C;;gBAC1CojB,YAAYpQ,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAA5B,CAAlB;sBACUwc,wBAAwB,OAAOD,SAA/B,EAA0CnQ,kBAA1C,CAAV,CAFgD;;qBAGvCD,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA5B,CAAT,CAHgD;WANb;;;qBAa1BA,CAAX,IAAgBud,OAAhB;oBACUvd,CAAV,IAAgBsd,WAAWnkB,SAAZ,GAAyB0O,SAASyV,MAAT,IAAmB,MAA5C,GAAqD,CAApE;SAxBsC;;;YA2BlCE,MAAML,QAAQ,OAAR,CAAZ;YACInL,MAAM,EAAV;;YACIwL,QAAQrkB,SAAZ,EAAuB;gBACf8X,eAAeuM,IAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;kBAEQ,iCAAiCxL,GAAjC,GAAuC,MAAjD;;aACK,IAAIhS,OAAI,CAAb,EAAgBA,OAAIod,MAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;cACjCA,SAAMod,MAAMzd,MAAN,GAAe,CAAzB,EAA4B;uBACf,UAAUud,YAAYrL,WAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,UAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;WADF,MAEO;uBACM,UAAUkd,YAAYrL,WAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,UAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;;;OArCC,MAwCA,IAAI+c,cAAc,UAAlB,EAA8B;YAC7BU,gBAAgBC,WAAW,SAAX,EAAsBd,KAAK,YAAL,CAAtB,EAA0C5P,OAA1C,CAAtB;YACM2Q,OAAOf,KAAK,OAAL,EAAc,OAAd,CAAb,CAFmC;;;kBAKzB,2BAA2Ba,aAA3B,GAA2C,eAA3C,GAA6DE,IAA7D,GAAoE,GAA9E,CALmC;OAjDf;;KAAxB,MA0DO,IAAId,UAAU1jB,SAAd,EAAyB;;UAE1BykB,KAAJ;;UACIf,MAAM,WAAN,MAAuB1jB,SAA3B,EAAsC;gBAC5BgT,kBAAkB0Q,KAAlB,EAAyB,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAAzB,CAAR,CADoC;OAAtC,MAEO,IAAIA,MAAM,aAAN,MAAyB1jB,SAA7B,EAAwC;;YACvCojB,cAAYpQ,kBAAkB0Q,KAAlB,EAAyB,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAAzB,CAAlB;;gBACQL,wBAAwB,OAAOD,WAA/B,EAA0CnQ,kBAA1C,CAAR,CAF6C;;;;UAKzCgE,MAAMyN,OAAOhB,MAAM,OAAN,EAAe,KAAf,CAAP,CAAZ;;UAEIzM,QAAQ,CAAR,IAAaA,QAAQ,IAAzB,EAA+B;OAA/B,MAEO,IAAIA,MAAM,CAAN,IAAWA,MAAM,IAArB,EAA2B;;;OAA3B,MAIA,IAAIA,MAAM,IAAV,EAAgB;;;YAGf0N,UAAU1N,MAAM,IAAtB;YACM2N,YAAYxO,aAAa,SAAb,EAAwB,iBAAxB,EAA2C,aAA3C,EAA0D,kBAA1D,CAAlB;YACM2E,YAAY,EAAlB;eACO3U,IAAP,CAAYwe,SAAZ,EAAuB7hB,OAAvB,CAA+B,UAAUuD,GAAV,EAAe;cACtCue,eAAeD,UAAUte,GAAV,CAArB;;cACIA,QAAQ,OAAZ,EAAqB;gBACfue,aAAajiB,WAAb,KAA6B+K,KAAjC,EAAwC;mBACjC,IAAI9G,OAAI,CAAb,EAAgBA,OAAIge,aAAare,MAAjC,EAAyCK,MAAzC,EAA8C;oBACtCjF,MAAM,EAAZ;oBACI0E,GAAJ,IAAWue,aAAahe,IAAb,CAAX;oBACI,MAAJ,IAAcge,aAAahe,IAAb,EAAgB,OAAhB,EAAyB,OAAzB,CAAd;0BACUb,IAAV,CAAepE,GAAf;;aALJ,MAOO;kBACCA,OAAM,EAAZ;mBACI0E,GAAJ,IAAWue,YAAX;mBACI,MAAJ,IAAcA,aAAa,OAAb,EAAsB,OAAtB,CAAd;wBACU7e,IAAV,CAAepE,IAAf;;;SAdN;YAkBM+Z,cAAcZ,UAAU9T,KAAV,CAAgB,CAAhB,CAApB;oBACY2U,IAAZ,CAAiB,UAAU1O,CAAV,EAAaF,CAAb,EAAgB;iBACxBE,EAAE4X,IAAF,GAAS9X,EAAE8X,IAAlB;SADF;YAGMC,eAAepJ,YAAYgJ,UAAU,CAAtB,CAArB;;YACMf,aAAYnL,YAAYsM,YAAZ,CAAlB;;YACInB,eAAc,YAAlB,EAAgC;cACxBC,WAAUkB,aAAa,aAAb,CAAhB,CAD8B;;cAGxBjB,WAAUlE,gBAAgBiE,QAAhB,CAAhB;;oBACU,sBAAsBE,YAAYU,KAAZ,CAAtB,GAA2C,GAA3C,GAAiDX,QAAjD,GAA2D,IAArE,CAJ8B;SAAhC,MAMO,IAAIF,eAAc,eAAlB,EAAmC;cAClCI,WAAUe,aAAa,YAAb,CAAhB;cACMd,SAAQD,SAAQ,SAAR,EAAmB,MAAnB,CAAd,CAFwC;;;;cAMlCE,aAAY,EAAlB;;eACK,IAAIrd,OAAI,CAAb,EAAgBA,OAAIod,OAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;gBAC/Bsd,UAASnR,kBAAkBiR,OAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA5B,CAAf;;uBACUA,IAAV,IAAgBsd,YAAWnkB,SAAZ,GAAyB0O,SAASyV,OAAT,IAAmB,MAA5C,GAAqD,CAApE;WATsC;;;;cAalCE,OAAML,SAAQ,OAAR,CAAZ;cACInL,OAAM,EAAV;;cACIwL,SAAQrkB,SAAZ,EAAuB;mBACf8X,eAAeuM,KAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;oBAEQ,iCAAiCxL,IAAjC,GAAuC,MAAjD;;eACK,IAAIhS,OAAI,CAAb,EAAgBA,OAAIod,OAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;gBACjCA,SAAMod,OAAMzd,MAAN,GAAe,CAAzB,EAA4B;yBACf,UAAUud,YAAYU,KAAZ,CAAV,GAA+B,GAA/B,GAAqCP,WAAUrd,IAAV,CAArC,GAAoD,GAApD,GAA0D,IAArE;aADF,MAEO;yBACM,UAAUkd,YAAYU,KAAZ,CAAV,GAA+B,GAA/B,GAAqCP,WAAUrd,IAAV,CAArC,GAAoD,GAApD,GAA0D,IAArE;;;;;KA7EH,MAkFA;aACEmM,kBAAkBL,kBAAlB,EAAsC,CAAC,aAAD,EAAgB,QAAhB,EAA0B,MAA1B,EAAkC,QAAlC,CAAtC,CAAP;cACQK,kBAAkBL,kBAAlB,EAAsC,CAAC,aAAD,EAAgB,QAAhB,EAA0B,MAA1B,EAAkC,SAAlC,CAAtC,CAAR,CAFK;;UAID8Q,SAASzjB,SAAb,EAAwB;YAChB4jB,cAAYnL,YAAYgL,IAAZ,CAAlB;;YACIG,gBAAc,YAAlB,EAAgC;cACxBC,YAAUJ,KAAK,aAAL,CAAhB;;cACMzP,WAAUuK,aAAasF,SAAb,CAAhB;;cACMC,YAAUlE,gBAAgBiE,SAAhB,CAAhB;;oBACU,sBAAsBE,YAAY/P,QAAZ,CAAtB,GAA6C,GAA7C,GAAmD8P,SAAnD,GAA6D,IAAvE;SAJF,MAKO,IAAIF,gBAAc,eAAlB,EAAmC;cAClCI,YAAUP,KAAK,YAAL,CAAhB,CADwC;;;cAIlCQ,UAAQD,UAAQ,SAAR,EAAmB,MAAnB,CAAd,CAJwC;;;;cAQlCtL,cAAa,EAAnB;cACMwL,cAAY,EAAlB;;eACK,IAAIrd,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;gBACjCsd,iBAAJ;;gBACIC,iBAAJ;;gBACIH,QAAMpd,IAAN,EAAS,WAAT,MAA0B7G,SAA9B,EAAyC;yBAC7BgT,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA5B,CAAV,CADuC;;yBAE9BmM,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,KAAjC,CAA5B,CAAT;aAFF,MAGO,IAAIod,QAAMpd,IAAN,EAAS,aAAT,MAA4B7G,SAAhC,EAA2C;;kBAC1CojB,cAAYpQ,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAA5B,CAAlB;;yBACUwc,wBAAwB,OAAOD,WAA/B,EAA0CnQ,kBAA1C,CAAV,CAFgD;;yBAGvCD,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA5B,CAAT,CAHgD;aANb;;;wBAa1BA,IAAX,IAAgBud,QAAhB;wBACUvd,IAAV,IAAgBsd,aAAWnkB,SAAZ,GAAyB0O,SAASyV,QAAT,IAAmB,MAA5C,GAAqD,CAApE;WAxBsC;;;;cA4BlCE,QAAML,UAAQ,OAAR,CAAZ;cACInL,QAAM,EAAV;;cACIwL,UAAQrkB,SAAZ,EAAuB;oBACf8X,eAAeuM,MAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;oBAGQ,iCAAiCxL,KAAjC,GAAuC,MAAjD;;eACK,IAAIhS,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;gBACjCA,SAAMod,QAAMzd,MAAN,GAAe,CAAzB,EAA4B;yBACf,UAAUud,YAAYrL,YAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,YAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;aADF,MAEO;yBACM,UAAUkd,YAAYrL,YAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,YAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;;;SAvCC,MA0CA,IAAI+c,gBAAc,UAAlB,EAA8B;;cAE7BU,eAAgBC,WAAW,UAAX,EAAuBd,KAAK,YAAL,CAAvB,EAA2C5P,OAA3C,CAAtB;;cACM2Q,QAAOf,KAAK,OAAL,EAAc,OAAd,CAAb,CAHmC;;;oBAMzB,2BAA2Ba,YAA3B,GAA2C,eAA3C,GAA6DE,KAA7D,GAAoE,GAA9E,CANmC;SAjDf;;OAAxB,MA2DO,IAAId,UAAU1jB,SAAd,EAAyB;kBACpB,kBAAV;OADK,MAEA;eACEgT,kBAAkBC,kBAAlB,EAAsC,CAAC,aAAD,EAAgB,QAAhB,EAA0B,MAA1B,EAAkC,QAAlC,CAAtC,CAAP;gBACQD,kBAAkBC,kBAAlB,EAAsC,CAAC,aAAD,EAAgB,QAAhB,EAA0B,MAA1B,EAAkC,SAAlC,CAAtC,CAAR,CAFK;;YAKDwQ,SAASzjB,SAAb,EAAwB;cAChB4jB,cAAYnL,YAAYgL,IAAZ,CAAlB;;cACIG,gBAAc,YAAlB,EAAgC;gBACxBC,YAAUJ,KAAK,aAAL,CAAhB;;gBACMzP,YAAUuK,aAAasF,SAAb,CAAhB;;gBACMC,YAAUlE,gBAAgBiE,SAAhB,CAAhB;;sBACU,sBAAsBE,YAAY/P,SAAZ,CAAtB,GAA6C,GAA7C,GAAmD8P,SAAnD,GAA6D,IAAvE;WAJF,MAKO,IAAIF,gBAAc,eAAlB,EAAmC;gBAClCI,YAAUP,KAAK,YAAL,CAAhB,CADwC;;;gBAIlCQ,UAAQD,UAAQ,SAAR,EAAmB,MAAnB,CAAd,CAJwC;;;;gBAQlCtL,eAAa,EAAnB;gBACMwL,cAAY,EAAlB;;iBACK,IAAIrd,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;kBACjCsd,iBAAJ;;kBACIC,kBAAJ;;kBACIH,QAAMpd,IAAN,EAAS,WAAT,MAA0B7G,SAA9B,EAAyC;4BAC7BgT,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA5B,CAAV,CADuC;;2BAE9BmM,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,KAAjC,CAA5B,CAAT;eAFF,MAGO,IAAIod,QAAMpd,IAAN,EAAS,aAAT,MAA4B7G,SAAhC,EAA2C;;oBAC1CojB,cAAYpQ,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAA5B,CAAlB;;4BACUwc,wBAAwB,OAAOD,WAA/B,EAA0CnQ,kBAA1C,CAAV,CAFgD;;2BAGvCD,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA5B,CAAT,CAHgD;eANb;;;2BAa1BA,IAAX,IAAgBud,SAAhB;0BACUvd,IAAV,IAAgBsd,aAAWnkB,SAAZ,GAAyB0O,SAASyV,QAAT,IAAmB,MAA5C,GAAqD,CAApE;aAxBsC;;;;gBA4BlCE,QAAML,UAAQ,OAAR,CAAZ;gBACInL,QAAM,EAAV;;gBACIwL,UAAQrkB,SAAZ,EAAuB;sBACf8X,eAAeuM,MAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;sBAGQ,iCAAiCxL,KAAjC,GAAuC,MAAjD;;iBACK,IAAIhS,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;kBACjCA,SAAMod,QAAMzd,MAAN,GAAe,CAAzB,EAA4B;2BACf,UAAUud,YAAYrL,aAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,YAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;eADF,MAEO;2BACM,UAAUkd,YAAYrL,aAAW7R,IAAX,CAAZ,CAAV,GAAuC,GAAvC,GAA6Cqd,YAAUrd,IAAV,CAA7C,GAA4D,GAA5D,GAAkE,IAA7E;;;WAvCC,MA0CA,IAAI+c,gBAAc,UAAlB,EAA8B;;gBAE7BU,gBAAgBC,WAAW,UAAX,EAAuBd,KAAK,YAAL,CAAvB,EAA2C5P,OAA3C,CAAtB;;gBACM2Q,SAAOf,KAAK,OAAL,EAAc,OAAd,CAAb,CAHmC;;;sBAMzB,2BAA2Ba,aAA3B,GAA2C,eAA3C,GAA6DE,MAA7D,GAAoE,GAA9E,CANmC;;SAjDvC,MA0DO,IAAId,UAAU1jB,SAAd,EAAyB;;;;;cAK1BykB,MAAJ;;cACIf,MAAM,WAAN,MAAuB1jB,SAA3B,EAAsC;qBAC5BgT,kBAAkB0Q,KAAlB,EAAyB,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAAzB,CAAR,CADoC;WAAtC,MAEO,IAAIA,MAAM,aAAN,MAAyB1jB,SAA7B,EAAwC;;gBACvCojB,cAAYpQ,kBAAkB0Q,KAAlB,EAAyB,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAAzB,CAAlB;;qBAEQL,wBAAwB,OAAOD,WAA/B,EAA0CnQ,kBAA1C,CAAR,CAH6C;;;;cAMzCgE,QAAMyN,OAAOhB,MAAM,OAAN,EAAe,KAAf,CAAP,CAAZ,CAd8B;;;cAiB1BzM,UAAQ,CAAR,IAAaA,UAAQ,IAAzB,EAA+B;WAA/B,MAEO,IAAIA,QAAM,CAAN,IAAWA,QAAM,IAArB,EAA2B;;;WAA3B,MAIA,IAAIA,QAAM,IAAV,EAAgB;;;gBAGf0N,WAAU1N,QAAM,IAAtB;;gBACM2N,aAAYxO,aAAa,SAAb,EAAwB,iBAAxB,EAA2C,aAA3C,EAA0D,kBAA1D,CAAlB;gBACM2E,aAAY,EAAlB;mBACO3U,IAAP,CAAYwe,UAAZ,EAAuB7hB,OAAvB,CAA+B,UAAUuD,GAAV,EAAe;;kBAEtCue,eAAeD,WAAUte,GAAV,CAArB;;kBACIA,QAAQ,OAAZ,EAAqB;oBACfue,aAAajiB,WAAb,KAA6B+K,KAAjC,EAAwC;uBACjC,IAAI9G,OAAI,CAAb,EAAgBA,OAAIge,aAAare,MAAjC,EAAyCK,MAAzC,EAA8C;wBACtCjF,MAAM,EAAZ;wBACI0E,GAAJ,IAAWue,aAAahe,IAAb,CAAX;wBACI,MAAJ,IAAcge,aAAahe,IAAb,EAAgB,OAAhB,EAAyB,OAAzB,CAAd;;+BACUb,IAAV,CAAepE,GAAf;;iBALJ,MAOO;sBACCA,QAAM,EAAZ;wBACI0E,GAAJ,IAAWue,YAAX;wBACI,MAAJ,IAAcA,aAAa,OAAb,EAAsB,OAAtB,CAAd;;6BACU7e,IAAV,CAAepE,KAAf;;;aAfN;;gBAmBM+Z,eAAcZ,WAAU9T,KAAV,CAAgB,CAAhB,CAApB;;yBACY2U,IAAZ,CAAiB,UAAU1O,CAAV,EAAaF,CAAb,EAAgB;qBACxBE,EAAE4X,IAAF,GAAS9X,EAAE8X,IAAlB;aADF;;gBAGMC,gBAAepJ,aAAYgJ,WAAU,CAAtB,CAArB;;gBACMf,cAAYnL,YAAYsM,aAAZ,CAAlB,CA9BqB;;;gBAgCjBnB,gBAAc,YAAlB,EAAgC;kBACxBC,YAAUkB,cAAa,aAAb,CAAhB;;kBACMjB,YAAUlE,gBAAgBiE,SAAhB,CAAhB;;wBACU,sBAAsBE,YAAYU,MAAZ,CAAtB,GAA2C,GAA3C,GAAiDX,SAAjD,GAA2D,IAArE;aAHF,MAIO,IAAIF,gBAAc,eAAlB,EAAmC;kBAClCI,YAAUe,cAAa,YAAb,CAAhB;kBACMd,UAAQD,UAAQ,SAAR,EAAmB,MAAnB,CAAd,CAFwC;;;;kBAMlCE,cAAY,EAAlB;;mBACK,IAAIrd,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;oBAC/Bsd,WAASnR,kBAAkBiR,QAAMpd,IAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA5B,CAAf;;4BACUA,IAAV,IAAgBsd,aAAWnkB,SAAZ,GAAyB0O,SAASyV,QAAT,IAAmB,MAA5C,GAAqD,CAApE;eATsC;;;kBAalCE,QAAML,UAAQ,OAAR,CAAZ;kBACInL,QAAM,EAAV;;kBACIwL,UAAQrkB,SAAZ,EAAuB;wBACf8X,eAAeuM,MAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;wBAEQ,iCAAiCxL,KAAjC,GAAuC,MAAjD;;mBACK,IAAIhS,OAAI,CAAb,EAAgBA,OAAIod,QAAMzd,MAA1B,EAAkCK,MAAlC,EAAuC;oBACjCA,SAAMod,QAAMzd,MAAN,GAAe,CAAzB,EAA4B;6BACf,UAAUud,YAAYU,MAAZ,CAAV,GAA+B,GAA/B,GAAqCP,YAAUrd,IAAV,CAArC,GAAoD,GAApD,GAA0D,IAArE;iBADF,MAEO;6BACM,UAAUkd,YAAYU,MAAZ,CAAV,GAA+B,GAA/B,GAAqCP,YAAUrd,IAAV,CAArC,GAAoD,GAApD,GAA0D,IAArE;;;aAvBC,MA0BA;;;;;KAxW+E;;;WAiXvF8c,OAAP;;;WAGOI,WAAT,CAAsBjW,GAAtB,EAA2B;QACnBkX,UAAU,IAAIC,WAAJ,CAAgB,CAAhB,CAAhB;QACMC,KAAK,IAAIC,QAAJ,CAAaH,OAAb,CAAX;OACGI,SAAH,CAAa,CAAb,EAAgB1W,SAASZ,GAAT,EAAc,EAAd,CAAhB,EAAmC,KAAnC;QACMuX,UAAU,IAAIzV,UAAJ,CAAeoV,OAAf,CAAhB;WAEOK,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAA7C;;;WAGO9M,YAAT,CAAuBnM,IAAvB,EAA6B0W,SAA7B,EAAwCjP,OAAxC,EAAiD;;;;;;QAMzCyR,WAAW7M,YAAYzF,kBAAkB5G,IAAlB,EAAwB,CAAC,QAAD,CAAxB,CAAZ,CAAjB;QACI+L,SAAJ;;QACImN,aAAa,SAAjB,EAA4B;aACnBxC,YAAY,MAAZ,GAAqB,4BAA5B;KADF,MAEO,IAAIwC,aAAa,YAAjB,EAA+B;UAC9BC,UAAUnZ,KAAK,QAAL,EAAe,aAAf,CAAhB;kBACYmS,aAAagH,OAAb,CAAZ;KAFK,MAGA,IAAID,aAAa,eAAjB,EAAkC;UACjCC,WAAUnZ,KAAK,QAAL,EAAe,YAAf,CAAhB,CADuC;;kBAG3BoZ,gBAAgBD,QAAhB,CAAZ,CAHuC;KAAlC,MAKA,IAAID,aAAa,cAAjB,EAAiC;UAChCC,YAAUnZ,KAAK,QAAL,EAAe,YAAf,CAAhB;kBACYqZ,eAAeF,SAAf,CAAZ;KAFK,MAGA,IAAID,aAAa,UAAjB,EAA6B;UAC5BC,YAAUnZ,KAAK,QAAL,EAAe,YAAf,CAAhB;kBACYmY,WAAW,SAAX,EAAsBgB,SAAtB,EAA+B1R,OAA/B,CAAZ;KAvB6C;;;QA2B3CsE,cAAcnY,SAAlB,EAA6B;UACrB0lB,UAAU1S,kBAAkB5G,IAAlB,EAAwB,CAAC,SAAD,EAAY,WAAZ,CAAxB,CAAhB;kBACYmS,aAAamH,OAAb,CAAZ;;;QAGEvN,cAAcnY,SAAlB,EAA6B;UACvBslB,aAAa,eAAjB,EAAkC;YAC5BxC,SAAJ,EAAe;;iBAEN3K,SAAP;SAFF,MAGO;cACCwN,WAAWxN,UAAUQ,KAA3B;cACME,MAAMV,UAAUU,GAAtB;cAEI8K,UAAU,iCAAiC9K,GAAjC,GAAuC,MAArD;;eACK,IAAIhS,IAAI,CAAb,EAAgBA,IAAI8e,SAASnf,MAA7B,EAAqCK,GAArC,EAA0C;gBACpCA,MAAM8e,SAASnf,MAAT,GAAkB,CAA5B,EAA+B;yBAClBmf,SAAS9e,CAAT,IAAc,IAAzB;aADF,MAEO;yBACM8e,SAAS9e,CAAT,IAAc,IAAzB;;;;iBAGG8c,OAAP;;OAhBJ,MAkBO,IAAI2B,aAAa,UAAjB,EAA6B;YAC9BxC,SAAJ,EAAe;iBACN3K,SAAP;SADF,MAEO;iBACE,0BAA0BA,SAA1B,GAAsC,IAA7C;;OAJG,MAMA;YACD2K,SAAJ,EAAe;cACPnK,QAAQ,IAAI4K,KAAJ,CAAepL,SAAf,CAAd;sBACYQ,MAAM/K,GAAN,CAAU5O,QAAV,EAAZ;iBAEOmZ,SAAP;SAJF,MAKO;;iBAEE,wBAAwBA,SAAxB,GAAoC,GAA3C;;;KAjCN,MAoCO;UACD2K,SAAJ,EAAe;eACN,MAAP;OADF,MAEO;eACE,4BAAP;;;GA70FmE;;;WAm1FhErK,WAAT,CAAsBrM,IAAtB,EAA4B;;;;;;;QAOtBkZ,WAAW,EAAf;;QACIlZ,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;iBACvB,SAAX;;;QAEEoM,KAAK,aAAL,MAAwBpM,SAA5B,EAAuC;iBAC1B,YAAX;;;QAEEoM,KAAK,YAAL,MAAuBpM,SAA3B,EAAsC;iBACzB,eAAX;;;QAEEoM,KAAK,YAAL,MAAuBpM,SAA3B,EAAsC;iBACzB,cAAX;;;QAEEoM,KAAK,YAAL,MAAuBpM,SAA3B,EAAsC;iBACzB,UAAX;;;WAGKslB,QAAP;;;WAGOE,eAAT,CAA0BpZ,IAA1B,EAAgC;QACxB6X,QAAQ7X,KAAK,SAAL,EAAgB,MAAhB,CAAd,CAD8B;;QAGxBsM,aAAa,EAAnB,CAH8B;;SAKzB,IAAI7R,IAAI,CAAb,EAAgBA,IAAIod,MAAMzd,MAA1B,EAAkCK,GAAlC,EAAuC;;UAEjCud,UAAU7F,aAAa0F,MAAMpd,CAAN,CAAb,CAAd;;UACIod,MAAMpd,CAAN,EAAS,WAAT,MAA0B7G,SAA9B,EAAyC;YACnC4lB,SAASlX,SAASsE,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,KAAnC,CAAxB,CAAT,IAA+E,MAA5F;YACIyZ,SAASnX,SAASsE,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,KAAnC,CAAxB,CAAT,IAA+E,MAA5F;;YACIxF,MAAMgf,MAAN,CAAJ,EAAmB;mBACR,GAAT;;;YAEEhf,MAAMif,MAAN,CAAJ,EAAmB;mBACR,CAAT;SAPqC;;;kBAU7BC,eAAe1B,OAAf,EAAwBwB,MAAxB,EAAgCC,MAAhC,CAAV;OAVF,MAWO,IAAI5B,MAAMpd,CAAN,EAAS,aAAT,MAA4B7G,SAAhC,EAA2C;;YAC5C4lB,UAASlX,SAASsE,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqC,KAArC,CAA5B,CAAT,IAAqF,MAAlG;;YACIgf,UAASnX,SAASsE,kBAAkBiR,MAAMpd,CAAN,CAAlB,EAA4B,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,EAAqC,KAArC,CAA5B,CAAT,IAAqF,MAAlG;;YACID,MAAMgf,OAAN,CAAJ,EAAmB;oBACR,GAAT;;;YAEEhf,MAAMif,OAAN,CAAJ,EAAmB;oBACR,CAAT;SAP8C;;;kBAUtCC,eAAe1B,OAAf,EAAwBwB,OAAxB,EAAgCC,OAAhC,CAAV;OAxBmC;;;iBA2B1Bhf,CAAX,IAAgBud,OAAhB;KAhC4B;;;QAmCxBC,MAAMjY,KAAK,OAAL,CAAZ;QACIyM,MAAM,CAAV;;QACIwL,QAAQrkB,SAAZ,EAAuB;YACf8X,eAAeuM,IAAI,OAAJ,EAAa,KAAb,CAAf,IAAsC,EAA5C;;;WAEK;eACI3L,UADJ;aAEEG;KAFT;;;WAMO0L,UAAT,CAAqB1gB,IAArB,EAA2BuI,IAA3B,EAAiCyH,OAAjC,EAA0C;;;;;QAKpCkS,GAAJ;QACMC,MAAM5Z,KAAK,QAAL,EAAe,OAAf,EAAwB,SAAxB,CAAZ;QACI4S,OAAJ;;QACInb,SAAS,SAAb,EAAwB;gBACZmP,kBAAkBa,OAAlB,EAA2B,CAAC,aAAD,EAAgBmS,GAAhB,EAAqB,QAArB,CAA3B,CAAV;KADF,MAEO,IAAIniB,SAAS,UAAb,EAAyB;gBACpBmP,kBAAkBa,OAAlB,EAA2B,CAAC,cAAD,EAAiBmS,GAAjB,EAAsB,QAAtB,CAA3B,CAAV;KADK,MAEA,IAAIniB,SAAS,UAAb,EAAyB;gBACpBmP,kBAAkBa,OAAlB,EAA2B,CAAC,cAAD,EAAiBmS,GAAjB,EAAsB,QAAtB,CAA3B,CAAV;;;QAEEhH,YAAYhf,SAAhB,EAA2B;aAClBA,SAAP;;;QAEIif,SAASD,QAAQE,KAAR,CAAc,GAAd,EAAmBzY,GAAnB,EAAf;;QACIwY,WAAW,KAAf,EAAsB;aACbjf,SAAP;;;QAEIyc,iBAAiB5I,QAAQ,KAAR,EAAelD,IAAf,CAAoBqO,OAApB,EAA6BtC,aAA7B,EAAvB;QACMyC,cAAcvC,iBAAiBqC,MAAjB,CAApB;UACM,UAAUE,WAAV,GAAwB,UAAxB,GAAqC1P,kBAAkBgN,cAAlB,CAA3C;WACOsJ,GAAP;;;WAGON,cAAT,CAAyBrZ,IAAzB,EAA+B;;QAEvB6Z,QAAQ7Z,KAAK,SAAL,CAAd;WACOmS,aAAa0H,KAAb,CAAP;;;WAGO1H,YAAT,CAAuBnS,IAAvB,EAA6B;QACvBA,SAASpM,SAAb,EAAwB;aACfA,SAAP;;;QAGE2Y,QAAQ,KAAZ;;QAEIvM,KAAK,WAAL,MAAsBpM,SAA1B,EAAqC;cAC3BgT,kBAAkB5G,IAAlB,EAAwB,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAAxB,CAAR,CADmC;KAArC,MAEO,IAAIA,KAAK,aAAL,MAAwBpM,SAA5B,EAAuC;;UACtCojB,YAAYpQ,kBAAkB5G,IAAlB,EAAwB,CAAC,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAAxB,CAAlB,CAD4C;;cAGpCiX,wBAAwB,OAAOD,SAA/B,EAA0CpjB,SAA1C,CAAR,CAH4C;KAAvC,MAIA,IAAIoM,KAAK,YAAL,MAAuBpM,SAA3B,EAAsC;;UAErCkmB,mBAAmB9Z,KAAK,YAAL,EAAmB,OAAnB,CAAzB;UACM+Z,MAAOD,iBAAiB,GAAjB,EAAsB5a,OAAtB,CAA8B,GAA9B,MAAuC,CAAC,CAAzC,GAA8C4a,iBAAiB,GAAjB,EAAsBhH,KAAtB,CAA4B,GAA5B,EAAiCkH,KAAjC,EAA9C,GAAyFF,iBAAiB,GAAjB,CAArG;UACMG,QAASH,iBAAiB,GAAjB,EAAsB5a,OAAtB,CAA8B,GAA9B,MAAuC,CAAC,CAAzC,GAA8C4a,iBAAiB,GAAjB,EAAsBhH,KAAtB,CAA4B,GAA5B,EAAiCkH,KAAjC,EAA9C,GAAyFF,iBAAiB,GAAjB,CAAvG;UACMI,OAAQJ,iBAAiB,GAAjB,EAAsB5a,OAAtB,CAA8B,GAA9B,MAAuC,CAAC,CAAzC,GAA8C4a,iBAAiB,GAAjB,EAAsBhH,KAAtB,CAA4B,GAA5B,EAAiCkH,KAAjC,EAA9C,GAAyFF,iBAAiB,GAAjB,CAAtG,CAL2C;;cAOnCK,MAAM,OAAO7B,OAAOyB,GAAP,IAAc,GAArB,CAAN,IAAmCI,MAAM,OAAO7B,OAAO2B,KAAP,IAAgB,GAAvB,CAAN,CAAnC,GAAwEE,MAAM,OAAO7B,OAAO4B,IAAP,IAAe,GAAtB,CAAN,CAAhF,CAP2C;KAAtC,MASA,IAAIla,KAAK,WAAL,MAAsBpM,SAA1B,EAAqC;;UAEpCwmB,UAAUpa,KAAK,WAAL,EAAkB,OAAlB,EAA2B,KAA3B,CAAhB;cACQqa,iBAAiBD,OAAjB,CAAR,CAH0C;KAArC,MAKA,IAAIpa,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;;UAEnCkmB,oBAAmB9Z,KAAK,UAAL,EAAiB,OAAjB,CAAzB;UACMsa,MAAMhC,OAAOwB,kBAAiB,KAAjB,CAAP,IAAkC,MAA9C;UACMS,MAAMjC,OAAQwB,kBAAiB,KAAjB,EAAwB5a,OAAxB,CAAgC,GAAhC,MAAyC,CAAC,CAA3C,GAAgD4a,kBAAiB,KAAjB,EAAwBhH,KAAxB,CAA8B,GAA9B,EAAmCkH,KAAnC,EAAhD,GAA6FF,kBAAiB,KAAjB,CAApG,IAA+H,GAA3I;UACMU,MAAMlC,OAAQwB,kBAAiB,KAAjB,EAAwB5a,OAAxB,CAAgC,GAAhC,MAAyC,CAAC,CAA3C,GAAgD4a,kBAAiB,KAAjB,EAAwBhH,KAAxB,CAA8B,GAA9B,EAAmCkH,KAAnC,EAAhD,GAA6FF,kBAAiB,KAAjB,CAApG,IAA+H,GAA3I,CALyC;;UAOnCW,UAAUrY,YAASkY,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,CAAhB;cACQL,MAAMM,QAAQ/Z,CAAd,IAAmByZ,MAAMM,QAAQ9Z,CAAd,CAAnB,GAAsCwZ,MAAMM,QAAQ7Z,CAAd,CAA9C,CARyC;;KAApC,MAWA,IAAIZ,KAAK,UAAL,MAAqBpM,SAAzB,EAAoC;;UAEnC8mB,SAAS9T,kBAAkB5G,IAAlB,EAAwB,CAAC,UAAD,EAAa,OAAb,EAAsB,SAAtB,CAAxB,CAAf;;UACI0a,WAAW9mB,SAAf,EAA0B;gBAChB8mB,MAAR;;;;WAGGnO,KAAP;;;WAGO4N,KAAT,CAAgBQ,CAAhB,EAAmB;QACbjZ,MAAMiZ,EAAE/nB,QAAF,CAAW,EAAX,CAAV;;WACO8O,IAAItH,MAAJ,GAAa,CAApB,EAAuB;YAAQ,MAAMsH,GAAZ;;;WAClBA,GAAP;;;WAGOU,WAAT,CAAmBkY,GAAnB,EAAwBC,GAAxB,EAA6BK,KAA7B,EAAoC;QAC9BC,EAAJ,EAAQC,EAAR,EAAYpa,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;UACM0Z,MAAM,EAAZ;;QACIM,SAAS,GAAb,EAAkB;WACXA,SAASL,MAAM,CAAf,CAAL;KADF,MAEO;WACAK,QAAQL,GAAR,GAAeK,QAAQL,GAA5B;;;SAEGK,QAAQ,CAAR,GAAYE,EAAjB;QACIC,SAASF,EAAT,EAAaC,EAAb,EAAiBR,MAAM,CAAvB,IAA4B,GAAhC;QACIS,SAASF,EAAT,EAAaC,EAAb,EAAiBR,GAAjB,IAAwB,GAA5B;QACIS,SAASF,EAAT,EAAaC,EAAb,EAAiBR,MAAM,CAAvB,IAA4B,GAAhC;WACO;SAAI5Z,CAAJ;SAAUC,CAAV;SAAgBC;KAAvB;;;WAGOma,QAAT,CAAmBF,EAAnB,EAAuBC,EAAvB,EAA2BR,GAA3B,EAAgC;QAC1BA,MAAM,CAAV,EAAaA,OAAO,CAAP;QACTA,OAAO,CAAX,EAAcA,OAAO,CAAP;QACVA,MAAM,CAAV,EAAa,OAAO,CAACQ,KAAKD,EAAN,IAAYP,GAAZ,GAAkBO,EAAzB,CAAb,KACK,IAAIP,MAAM,CAAV,EAAa,OAAOQ,EAAP,CAAb,KACA,IAAIR,MAAM,CAAV,EAAa,OAAO,CAACQ,KAAKD,EAAN,KAAa,IAAIP,GAAjB,IAAwBO,EAA/B,CAAb,KACA,OAAOA,EAAP;;;WAGER,gBAAT,CAA2BrjB,IAA3B,EAAiC;QAC3B0K,GAAJ;QACMsZ,YAAY,CAAC,WAAD,EAAc,cAAd,EAA8B,MAA9B,EAAsC,YAAtC,EAAoD,OAApD,EAA6D,OAA7D,EAAsE,QAAtE,EAAgF,OAAhF,EAAyF,gBAAzF,EAA2G,MAA3G,EAAmH,YAAnH,EAAiI,OAAjI,EAA0I,WAA1I,EAAuJ,WAAvJ,EAAoK,YAApK,EAAkL,WAAlL,EAA+L,OAA/L,EAAwM,gBAAxM,EAA0N,UAA1N,EAAsO,SAAtO,EAAiP,MAAjP,EAAyP,UAAzP,EAAqQ,UAArQ,EAAiR,eAAjR,EAAkS,UAAlS,EAA8S,UAA9S,EAA0T,WAA1T,EAAuU,WAAvU,EAAoV,aAApV,EAAmW,gBAAnW,EAAqX,YAArX,EAAmY,YAAnY,EAAiZ,SAAjZ,EAA4Z,YAA5Z,EAA0a,cAA1a,EAA0b,eAA1b,EAA2c,eAA3c,EAA4d,eAA5d,EAA6e,eAA7e,EAA8f,YAA9f,EAA4gB,UAA5gB,EAAwhB,aAAxhB,EAAuiB,SAAviB,EAAkjB,SAAljB,EAA6jB,YAA7jB,EAA2kB,WAA3kB,EAAwlB,aAAxlB,EAAumB,aAAvmB,EAAsnB,SAAtnB,EAAioB,WAAjoB,EAA8oB,YAA9oB,EAA4pB,MAA5pB,EAAoqB,WAApqB,EAAirB,MAAjrB,EAAyrB,MAAzrB,EAAisB,OAAjsB,EAA0sB,aAA1sB,EAAytB,UAAztB,EAAquB,SAAruB,EAAgvB,WAAhvB,EAA6vB,QAA7vB,EAAuwB,OAAvwB,EAAgxB,OAAhxB,EAAyxB,UAAzxB,EAAqyB,eAAryB,EAAszB,WAAtzB,EAAm0B,cAAn0B,EAAm1B,WAAn1B,EAAg2B,YAAh2B,EAA82B,WAA92B,EAA23B,sBAA33B,EAAm5B,WAAn5B,EAAg6B,WAAh6B,EAA66B,YAA76B,EAA27B,WAA37B,EAAw8B,aAAx8B,EAAu9B,eAAv9B,EAAw+B,cAAx+B,EAAw/B,gBAAx/B,EAA0gC,gBAA1gC,EAA4hC,gBAA5hC,EAA8iC,aAA9iC,EAA6jC,MAA7jC,EAAqkC,WAArkC,EAAklC,OAAllC,EAA2lC,SAA3lC,EAAsmC,QAAtmC,EAAgnC,kBAAhnC,EAAooC,YAApoC,EAAkpC,cAAlpC,EAAkqC,cAAlqC,EAAkrC,gBAAlrC,EAAosC,iBAApsC,EAAutC,mBAAvtC,EAA4uC,iBAA5uC,EAA+vC,iBAA/vC,EAAkxC,cAAlxC,EAAkyC,WAAlyC,EAA+yC,WAA/yC,EAA4zC,UAA5zC,EAAw0C,aAAx0C,EAAu1C,MAAv1C,EAA+1C,SAA/1C,EAA02C,OAA12C,EAAm3C,WAAn3C,EAAg4C,QAAh4C,EAA04C,WAA14C,EAAu5C,QAAv5C,EAAi6C,eAAj6C,EAAk7C,WAAl7C,EAA+7C,eAA/7C,EAAg9C,eAAh9C,EAAi+C,YAAj+C,EAA++C,WAA/+C,EAA4/C,MAA5/C,EAAogD,MAApgD,EAA4gD,MAA5gD,EAAohD,YAAphD,EAAkiD,QAAliD,EAA4iD,eAA5iD,EAA6jD,KAA7jD,EAAokD,WAApkD,EAAilD,WAAjlD,EAA8lD,aAA9lD,EAA6mD,QAA7mD,EAAunD,YAAvnD,EAAqoD,UAAroD,EAAipD,UAAjpD,EAA6pD,QAA7pD,EAAuqD,QAAvqD,EAAirD,SAAjrD,EAA4rD,WAA5rD,EAAysD,WAAzsD,EAAstD,WAAttD,EAAmuD,MAAnuD,EAA2uD,aAA3uD,EAA0vD,WAA1vD,EAAuwD,KAAvwD,EAA8wD,MAA9wD,EAAsxD,SAAtxD,EAAiyD,QAAjyD,EAA2yD,WAA3yD,EAAwzD,QAAxzD,EAAk0D,OAAl0D,EAA20D,OAA30D,EAAo1D,YAAp1D,EAAk2D,QAAl2D,EAA42D,aAA52D,CAAlB;QACMC,WAAW,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,QAAnD,EAA6D,QAA7D,EAAuE,QAAvE,EAAiF,QAAjF,EAA2F,QAA3F,EAAqG,QAArG,EAA+G,QAA/G,EAAyH,QAAzH,EAAmI,QAAnI,EAA6I,QAA7I,EAAuJ,QAAvJ,EAAiK,QAAjK,EAA2K,QAA3K,EAAqL,QAArL,EAA+L,QAA/L,EAAyM,QAAzM,EAAmN,QAAnN,EAA6N,QAA7N,EAAuO,QAAvO,EAAiP,QAAjP,EAA2P,QAA3P,EAAqQ,QAArQ,EAA+Q,QAA/Q,EAAyR,QAAzR,EAAmS,QAAnS,EAA6S,QAA7S,EAAuT,QAAvT,EAAiU,QAAjU,EAA2U,QAA3U,EAAqV,QAArV,EAA+V,QAA/V,EAAyW,QAAzW,EAAmX,QAAnX,EAA6X,QAA7X,EAAuY,QAAvY,EAAiZ,QAAjZ,EAA2Z,QAA3Z,EAAqa,QAAra,EAA+a,QAA/a,EAAyb,QAAzb,EAAmc,QAAnc,EAA6c,QAA7c,EAAud,QAAvd,EAAie,QAAje,EAA2e,QAA3e,EAAqf,QAArf,EAA+f,QAA/f,EAAygB,QAAzgB,EAAmhB,QAAnhB,EAA6hB,QAA7hB,EAAuiB,QAAviB,EAAijB,QAAjjB,EAA2jB,QAA3jB,EAAqkB,QAArkB,EAA+kB,QAA/kB,EAAylB,QAAzlB,EAAmmB,QAAnmB,EAA6mB,QAA7mB,EAAunB,QAAvnB,EAAioB,QAAjoB,EAA2oB,QAA3oB,EAAqpB,QAArpB,EAA+pB,QAA/pB,EAAyqB,QAAzqB,EAAmrB,QAAnrB,EAA6rB,QAA7rB,EAAusB,QAAvsB,EAAitB,QAAjtB,EAA2tB,QAA3tB,EAAquB,QAAruB,EAA+uB,QAA/uB,EAAyvB,QAAzvB,EAAmwB,QAAnwB,EAA6wB,QAA7wB,EAAuxB,QAAvxB,EAAiyB,QAAjyB,EAA2yB,QAA3yB,EAAqzB,QAArzB,EAA+zB,QAA/zB,EAAy0B,QAAz0B,EAAm1B,QAAn1B,EAA61B,QAA71B,EAAu2B,QAAv2B,EAAi3B,QAAj3B,EAA23B,QAA33B,EAAq4B,QAAr4B,EAA+4B,QAA/4B,EAAy5B,QAAz5B,EAAm6B,QAAn6B,EAA66B,QAA76B,EAAu7B,QAAv7B,EAAi8B,QAAj8B,EAA28B,QAA38B,EAAq9B,QAAr9B,EAA+9B,QAA/9B,EAAy+B,QAAz+B,EAAm/B,QAAn/B,EAA6/B,QAA7/B,EAAugC,QAAvgC,EAAihC,QAAjhC,EAA2hC,QAA3hC,EAAqiC,QAAriC,EAA+iC,QAA/iC,EAAyjC,QAAzjC,EAAmkC,QAAnkC,EAA6kC,QAA7kC,EAAulC,QAAvlC,EAAimC,QAAjmC,EAA2mC,QAA3mC,EAAqnC,QAArnC,EAA+nC,QAA/nC,EAAyoC,QAAzoC,EAAmpC,QAAnpC,EAA6pC,QAA7pC,EAAuqC,QAAvqC,EAAirC,QAAjrC,EAA2rC,QAA3rC,EAAqsC,QAArsC,EAA+sC,QAA/sC,EAAytC,QAAztC,EAAmuC,QAAnuC,EAA6uC,QAA7uC,EAAuvC,QAAvvC,EAAiwC,QAAjwC,EAA2wC,QAA3wC,EAAqxC,QAArxC,EAA+xC,QAA/xC,EAAyyC,QAAzyC,EAAmzC,QAAnzC,EAA6zC,QAA7zC,EAAu0C,QAAv0C,EAAi1C,QAAj1C,EAA21C,QAA31C,EAAq2C,QAAr2C,EAA+2C,QAA/2C,EAAy3C,QAAz3C,EAAm4C,QAAn4C,EAA64C,QAA74C,EAAu5C,QAAv5C,EAAi6C,QAAj6C,EAA26C,QAA36C,EAAq7C,QAAr7C,EAA+7C,QAA/7C,CAAjB;QACMC,WAAWF,UAAU9b,OAAV,CAAkBlI,IAAlB,CAAjB;;QACIkkB,aAAa,CAAC,CAAlB,EAAqB;YACbD,SAASC,QAAT,CAAN;;;WAEKxZ,GAAP;;;WAGO8R,eAAT,CAA0B2H,SAA1B,EAAqC;QAC/BA,cAAcvnB,SAAlB,EAA6B;aACpBA,SAAP;;;QAEEwnB,SAAS,CAAb;;QAEID,UAAU,WAAV,MAA2BvnB,SAA/B,EAA0C;UAClCynB,OAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,KAAjC,CAA7B,CAAb;;UACIE,SAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,IAAT,IAAiB,MAA1B;;KAHJ,MAKO,IAAIF,UAAU,aAAV,MAA6BvnB,SAAjC,EAA4C;UAC3CynB,QAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,KAAnC,CAA7B,CAAb;;UACIE,UAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,KAAT,IAAiB,MAA1B;;KAHG,MAKA,IAAIF,UAAU,YAAV,MAA4BvnB,SAAhC,EAA2C;UAC1CynB,SAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,YAAD,EAAe,QAAf,EAAyB,OAAzB,EAAkC,KAAlC,CAA7B,CAAb;;UACIE,WAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,MAAT,IAAiB,MAA1B;;KAHG,MAKA,IAAIF,UAAU,WAAV,MAA2BvnB,SAA/B,EAA0C;UACzCynB,SAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,EAAiC,KAAjC,CAA7B,CAAb;;UACIE,WAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,MAAT,IAAiB,MAA1B;;KAHG,MAKA,IAAIF,UAAU,UAAV,MAA0BvnB,SAA9B,EAAyC;UACxCynB,SAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,UAAD,EAAa,QAAb,EAAuB,OAAvB,EAAgC,KAAhC,CAA7B,CAAb;;UACIE,WAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,MAAT,IAAiB,MAA1B;;KAHG,MAKA,IAAIF,UAAU,UAAV,MAA0BvnB,SAA9B,EAAyC;UACxCynB,SAAOzU,kBAAkBuU,SAAlB,EAA6B,CAAC,UAAD,EAAa,QAAb,EAAuB,OAAvB,EAAgC,KAAhC,CAA7B,CAAb;;UACIE,WAASznB,SAAb,EAAwB;iBACb0O,SAAS+Y,MAAT,IAAiB,MAA1B;;;;WAIGD,MAAP;;;WAGOnE,uBAAT,CAAkCD,SAAlC,EAA6CsE,aAA7C,EAA4D;;;QAItDrR,yBAAyB,EAAzB,IAA+BA,yBAAyBrW,SAA5D,EAAuE;6BAC9CgT,kBAAkB0U,aAAlB,EAAiC,CAAC,aAAD,EAAgB,UAAhB,EAA4B,OAA5B,CAAjC,CAAvB;KALwD;;;QAQpDC,cAAcvE,UAAUhT,MAAV,CAAiB,CAAjB,CAApB;;YACQuX,WAAR;WACO,KAAL;WACK,KAAL;WACK,KAAL;WACK,KAAL;;sBACc,OAAOtR,qBAAqBsR,WAArB,CAAnB,CADU;;;;;;QAORC,UAAU5U,kBAAkBoD,YAAlB,EAAgC,CAAC,SAAD,EAAY,iBAAZ,EAA+B,aAA/B,EAA8CgN,SAA9C,CAAhC,CAAhB;QACIzK,QAAQ3F,kBAAkB4U,OAAlB,EAA2B,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,CAA3B,CAAZ;;QACIjP,UAAU3Y,SAAd,EAAyB;cACfgT,kBAAkB4U,OAAlB,EAA2B,CAAC,UAAD,EAAa,OAAb,EAAsB,SAAtB,CAA3B,CAAR;;;WAEKjP,KAAP;;;WAGO5C,gBAAT,CAA2B8R,OAA3B,EAAoC;;QAE5BC,UAAU,EAAhB;;QAEID,YAAY7nB,SAAhB,EAA2B;aAClB8nB,OAAP;;;QAGED,QAAQ,QAAR,MAAsB7nB,SAA1B,EAAqC;UAC/B+nB,UAAU,EAAd;kBACYF,QAAQ,QAAR,EAAkB,UAAlB,EAA8B,YAA9B,EAA4C,MAA5C,CAAZ,EAAiE,UAAUG,SAAV,EAAqB5V,KAArB,EAA4B;gBACnFpM,IAAR,CAAaiiB,WAAWD,UAAU,KAAV,CAAX,CAAb;eACO,EAAP;OAFF;cAIQhiB,IAAR,CAAa+hB,OAAb;gBACU,EAAV;kBACYF,QAAQ,QAAR,EAAkB,UAAlB,EAA8B,YAA9B,EAA4C,MAA5C,CAAZ,EAAiE,UAAUG,SAAV,EAAqB5V,KAArB,EAA4B;gBACnFpM,IAAR,CAAaiiB,WAAWD,UAAU,KAAV,CAAX,CAAb;eACO,EAAP;OAFF;cAIQhiB,IAAR,CAAa+hB,OAAb;KAZF,MAaO;kBACOF,OAAZ,EAAqB,UAAUG,SAAV,EAAqB5V,KAArB,EAA4B;YACzC2V,UAAU,EAAhB;YACMG,UAAUlV,kBAAkBgV,SAAlB,EAA6B,CAAC,MAAD,EAAS,UAAT,EAAqB,YAArB,EAAmC,MAAnC,EAA2C,KAA3C,CAA7B,KAAmF5V,KAAnG,CAF+C;;YAKzC+V,WAAW,EAAjB;;YACInV,kBAAkBgV,SAAlB,EAA6B,CAAC,OAAD,EAAU,UAAV,EAAsB,YAAtB,EAAoC,MAApC,CAA7B,MAA8EhoB,SAAlF,EAA6F;sBAC/EgoB,UAAU,OAAV,EAAmB,UAAnB,EAA+B,YAA/B,EAA6C,MAA7C,CAAZ,EAAkE,UAAUA,SAAV,EAAqB5V,KAArB,EAA4B;qBACnF4V,UAAU,OAAV,EAAmB,KAAnB,CAAT,IAAsCA,UAAU,KAAV,CAAtC;mBACO,EAAP;WAFF;SADF,MAKO,IAAIhV,kBAAkBgV,SAAlB,EAA6B,CAAC,OAAD,EAAU,UAAV,EAAsB,YAAtB,EAAoC,MAApC,CAA7B,MAA8EhoB,SAAlF,EAA6F;sBACtFgoB,UAAU,OAAV,EAAmB,UAAnB,EAA+B,YAA/B,EAA6C,MAA7C,CAAZ,EAAkE,UAAUA,SAAV,EAAqB5V,KAArB,EAA4B;qBACnF4V,UAAU,OAAV,EAAmB,KAAnB,CAAT,IAAsCA,UAAU,KAAV,CAAtC;mBACO,EAAP;WAFF;SAZ6C;;;YAmB3ChV,kBAAkBgV,SAAlB,EAA6B,CAAC,OAAD,EAAU,UAAV,EAAsB,YAAtB,EAAoC,MAApC,CAA7B,MAA8EhoB,SAAlF,EAA6F;sBAC/EgoB,UAAU,OAAV,EAAmB,UAAnB,EAA+B,YAA/B,EAA6C,MAA7C,CAAZ,EAAkE,UAAUA,SAAV,EAAqB5V,KAArB,EAA4B;oBACpFpM,IAAR,CAAa;iBAAIgiB,UAAU,OAAV,EAAmB,KAAnB,CAAJ;iBAAkCC,WAAWD,UAAU,KAAV,CAAX;aAA/C;mBACO,EAAP;WAFF;;;gBAMMhiB,IAAR,CAAa;eAAMkiB,OAAN;kBAAuBH,OAAvB;mBAAyCI;SAAtD;eACO,EAAP;OA3BF;;;WA+BKL,OAAP;GAjpGuE;;;;;;;;;WA0pGhE1F,gBAAT,CAA2BhW,IAA3B,EAAiCgc,OAAjC,EAA0C;WACjCpV,kBAAkB5G,IAAlB,EAAwBgc,QAAQlc,IAAR,GAAegT,KAAf,CAAqB,KAArB,CAAxB,CAAP;;;;;;;;;WAQOlM,iBAAT,CAA4B5G,IAA5B,EAAkCic,IAAlC,EAAwC;QAClCA,KAAKzlB,WAAL,KAAqB+K,KAAzB,EAAgC;YACxB/I,MAAM,wCAAN,CAAN;;;QAGEwH,SAASpM,SAAb,EAAwB;aACfA,SAAP;;;QAGIsN,IAAI+a,KAAK7hB,MAAf;;SACK,IAAIK,IAAI,CAAb,EAAgBA,IAAIyG,CAApB,EAAuBzG,GAAvB,EAA4B;aACnBuF,KAAKic,KAAKxhB,CAAL,CAAL,CAAP;;UACIuF,SAASpM,SAAb,EAAwB;eACfA,SAAP;;;;WAIGoM,IAAP;;;;;;;;;WAQOkc,WAAT,CAAsBlc,IAAtB,EAA4Bmc,UAA5B,EAAwC;QAClCnc,SAASpM,SAAb,EAAwB;;;;QAGpB8D,SAAS,EAAb;;QACIsI,KAAKxJ,WAAL,KAAqB+K,KAAzB,EAAgC;UACxBL,IAAIlB,KAAK5F,MAAf;;WACK,IAAIK,IAAI,CAAb,EAAgBA,IAAIyG,CAApB,EAAuBzG,GAAvB,EAA4B;kBAChB0hB,WAAWnc,KAAKvF,CAAL,CAAX,EAAoBA,CAApB,CAAV;;KAHJ,MAKO;gBACK0hB,WAAWnc,IAAX,EAAiB,CAAjB,CAAV;;;WAEKtI,MAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAkCOgiB,cAAT,CAAyB0C,MAAzB,EAAiC7T,MAAjC,EAAyC8T,MAAzC,EAAiD;QACzC9P,QAAQ,IAAI4K,KAAJ,CAAeiF,MAAf,CAAd,CAD+C;;UAGzChF,MAAN,CAAa7K,MAAM3K,GAAN,CAAUV,CAAV,IAAe,IAAImb,MAAnB,CAAb;WACO9P,MAAM/K,GAAN,CAAU5O,QAAV,EAAP;GA/uGuE;;;WAmvGhE8Y,cAAT,CAAyB4Q,KAAzB,EAAgC;QAC1BA,UAAU,EAAV,IAAgBA,SAAS,IAA7B,EAAmC;aAC1B,CAAP;;;WAEK/b,KAAKD,KAAL,CAAWgc,QAAQ,KAAnB,CAAP;;;WAGO9L,gBAAT,CAA2BL,UAA3B,EAAuC;QACjCI,WAAW,EAAf,CADqC;;YAG7BJ,WAAWC,WAAX,EAAR;WACO,KAAL;WACK,MAAL;;qBACa,YAAX;;;;WAGG,KAAL;;qBACa,WAAX;;;;WAGG,KAAL;;qBACa,WAAX;;;;WAGG,KAAL;;;qBACa,aAAX;;;;WAGG,KAAL;;;qBACa,aAAX;;;;WAGG,KAAL;;qBACa,eAAX;;;;;;qBAIW,SAAX;;;;WAGGG,QAAP;;;WAGO5D,cAAT,CAAyBhB,CAAzB,EAA4B3K,CAA5B,EAA+BwL,IAA/B,EAAqCF,UAArC,EAAiDjB,KAAjD,EAAwD;QAChDkR,aAAaC,eAAelQ,WAAWlS,MAAX,GAAoB,CAAnC,CAAnB;QAEMqiB,UAAUC,SAASlQ,IAAT,EAAexL,CAAf,EAAkB2K,CAAlB,CAAhB;QACMgR,KAAKF,QAAQ,CAAR,CAAX;QACMG,KAAKH,QAAQ,CAAR,CAAX;QACMI,KAAKJ,QAAQ,CAAR,CAAX;QACMK,KAAKL,QAAQ,CAAR,CAAX;QAEMM,MAAMR,WAAWniB,MAAvB;QACM4iB,KAAKD,MAAM,EAAN,GAAW,GAAX,GAAiB,IAA5B;QACIE,WAAW,yCAAyCN,EAAzC,GAA8C,SAA9C,GAA0DC,EAA1D,GAA+D,SAA/D,GAA2EC,EAA3E,GAAgF,SAAhF,GAA4FC,EAA5F,GAAiG,IAAhH;QACII,MAAM,gCAAgC7R,KAAhC,GAAwC,GAAxC,GAA8C4R,QAA9C,GAAyD,KAAnE;;SAEK,IAAIxiB,IAAI,CAAb,EAAgBA,IAAIsiB,GAApB,EAAyBtiB,GAAzB,EAA8B;aACrB,mBAAmB8F,KAAKD,KAAL,CAAWub,WAAWU,WAAW9hB,CAAX,CAAX,IAA4B,GAA5B,GAAkCuiB,EAA7C,IAAmDA,EAAtE,GAA2E,gBAA3E,GAA8F1Q,WAAW7R,CAAX,CAA9F,GAA8G,GAArH;aACO,MAAP;;;WAGK,wBAAwB,EAA/B;WAEOyiB,GAAP;;;WAGOV,cAAT,CAAyBvb,CAAzB,EAA4B;QACpBkc,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAd;;QACIlc,MAAM,CAAV,EAAa;aACJ,IAAP;KADF,MAEO;UACDxG,IAAIwG,CAAR;;aACOxG,GAAP,EAAY;YACJ2iB,aAAa,MAAQ,OAAOnc,IAAI,CAAX,CAAD,IAAmBxG,IAAI,CAAvB,CAA1B,CADU;;YAEJ4iB,mBAAmBD,aAAa,GAAtC;cACME,MAAN,CAAa,CAAC,CAAd,EAAiB,CAAjB,EAAoBD,gBAApB;OALG;;;;WAQAF,KAAP;;;WAGOT,QAAT,CAAmBa,GAAnB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;QACrC9R,IAAIkQ,WAAW4B,QAAX,CAAV;QACMzc,IAAI6a,WAAW2B,SAAX,CAAV;QACME,MAAM7B,WAAW0B,GAAX,CAAZ;QACII,IAAI,CAAR;QACIhD,IAAI,CAAR;QACMiD,KAAKjS,IAAI,CAAf;QACMkS,KAAK7c,IAAI,CAAf;QACI8c,MAAM,CAAV;QACIC,MAAM,CAAV;QACIC,MAAM,CAAV;QACIC,MAAM,CAAV;QACMxO,IAAK,CAAEiO,MAAM,GAAP,GAAc,GAAf,IAAsB,GAAjC;QACM3M,IAAI,CAAC,MAAMtB,CAAP,IAAYlP,KAAK2d,EAAjB,GAAsB,GAAhC;QACMzjB,IAAI8F,KAAK4d,GAAL,CAASpN,CAAT,CAAV;QACM7P,IAAI2c,KAAKpjB,IAAImjB,EAAnB;;QAEInO,MAAM,CAAV,EAAa;YACL9D,CAAN;YACMkS,EAAN;YACM,CAAN;YACMA,EAAN;KAJF,MAKO,IAAIpO,IAAI,EAAR,EAAY;UACb9D,CAAJ;UACI,CAAJ;KAFK,MAGA,IAAI8D,MAAM,EAAV,EAAc;YACbmO,EAAN;YACM,CAAN;YACMA,EAAN;YACM5c,CAAN;KAJK,MAKA,IAAIyO,IAAI,GAAR,EAAa;UACd,CAAJ;UACI,CAAJ;KAFK,MAGA,IAAIA,MAAM,GAAV,EAAe;YACd,CAAN;YACMoO,EAAN;YACMlS,CAAN;YACMkS,EAAN;KAJK,MAKA,IAAIpO,IAAI,GAAR,EAAa;UACd,CAAJ;UACIzO,CAAJ;KAFK,MAGA,IAAIyO,MAAM,GAAV,EAAe;YACdmO,EAAN;YACM5c,CAAN;YACM4c,EAAN;YACM,CAAN;KAJK,MAKA;UACDjS,CAAJ;UACI3K,CAAJ;KAhDyC;;;QAmDrCod,IAAIT,IAAKhD,IAAIlgB,CAAnB;UACMqjB,QAAQ,CAAR,GAAYrjB,KAAK2jB,IAAIld,CAAT,KAAeX,KAAK8d,GAAL,CAAS5jB,CAAT,EAAY,CAAZ,IAAiB,CAAhC,CAAZ,GAAiDqjB,GAAvD;UACMC,QAAQ,CAAR,GAAYtjB,IAAIqjB,GAAJ,GAAU5c,CAAtB,GAA0B6c,GAAhC;UACMC,QAAQ,CAAR,GAAYrS,IAAImS,GAAhB,GAAsBE,GAA5B;UACMC,QAAQ,CAAR,GAAYjd,IAAI+c,GAAhB,GAAsBE,GAA5B;QACMtB,KAAKpc,KAAKD,KAAL,CAAW0d,MAAMrS,CAAN,GAAU,GAAV,GAAgB,GAA3B,IAAkC,GAA7C;QACMiR,KAAKrc,KAAKD,KAAL,CAAW2d,MAAMjd,CAAN,GAAU,GAAV,GAAgB,GAA3B,IAAkC,GAA7C;QACM6b,KAAKtc,KAAKD,KAAL,CAAWwd,MAAMnS,CAAN,GAAU,GAAV,GAAgB,GAA3B,IAAkC,GAA7C;QACMmR,KAAKvc,KAAKD,KAAL,CAAWyd,MAAM/c,CAAN,GAAU,GAAV,GAAgB,GAA3B,IAAkC,GAA7C;WACO,CAAC2b,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAP;;;WAGOjQ,kBAAT,CAA6Bd,SAA7B,EAAwCV,KAAxC,EAA+C;QACzCiT,OAAO,0BAA0BjT,KAA1B,GAAkC,mEAA7C;YACQ,yBAAyBU,SAAzB,GAAqC,4DAA7C;YACQ,YAAR;WACOuS,IAAP;;;;ACz6GJ;;ACAA;AACA;;AAKA;;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,aAAP,EAAsBC,YAAtB,EAAuC;MAClDC,UAAUC,EAAEH,aAAF,CAAhB;MACMI,WAAWD,EAAE,kCAAF,CAAjB;UACQruB,IAAR,CAAa,EAAb;UACQuuB,MAAR,CAAeD,QAAf;WACSC,MAAT,kBAA0BC,SAA1B;MACIC,SAAS,KAAb;SAEO,IAAIxuB,OAAJ,CAAY,UAAC8G,OAAD,EAAUC,MAAV,EAAqB;QAChC0nB,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAS;UAC1BF,MAAJ,EAAY;;cACJE,IAAIznB,IAAZ;aACO,OAAL;mBACWqnB,MAAT,CAAgBI,IAAIhb,IAApB;;;aAEG,YAAL;cACMwa,YAAJ,EAAkBE,EAAEF,YAAF,EAAgBS,IAAhB,CAAqB,KAArB,mCAAsDD,IAAIhb,IAA1D;;;aAEf,WAAL;;;aAEK,WAAL;mBACW4a,MAAT,kBAA0BI,IAAIhb,IAA9B;;;aAEG,MAAL;mBACW,IAAT;wBACcgb,IAAIhb,IAAJ,CAAS6F,MAAvB;kBACQmV,IAAIhb,IAAJ,CAASkb,IAAjB;;;aAEG,MAAL;kBACUpR,IAAR,CAAa,2BAAb,EAA0CkR,IAAIhb,IAA9C;;;aAEG,OAAL;mBACW,IAAT;kBACQmG,KAAR,CAAc,yBAAd,EAAyC6U,IAAIhb,IAA7C;iBACO,IAAI1L,KAAJ,CAAU0mB,IAAIhb,IAAd,CAAP;;;aAEG,OAAL;;;;aAGK,MAAL;gBA5BF;;;KAFF;;;;;;;;;;;;;;;QA+CMmb,SAAS;;mBACA,uBAAM,EADN;iBAEF,qBAAM;KAFnB;gBAKE,gBAAQ;aAASvV,WAAP,GAAqBwV,IAArB;KADZ,EAEEL,cAFF;WAIOnV,WAAP,CAAmB;cACT,aADS;cAET0U;KAFV;GAxDK,EA4DJ1mB,IA5DI,CA4DC,gBAAQ;QACRynB,SAAS,SAATA,MAAS,GAAM;UACbC,cAAcjf,KAAKkC,GAAL,gCAAYlB,MAAMke,IAAN,CAAWZ,SAAS5f,QAAT,CAAkB,SAAlB,CAAX,EAAyCygB,GAAzC,CAA6C;eAAKze,EAAE0e,WAAP;OAA7C,CAAZ,EAApB;UACMC,eAAef,SAAS,CAAT,EAAYc,WAAjC;eACSE,GAAT,CAAa;qCACWD,eAAeJ,WAArC,MADW;4BAES;OAFtB;KAHF;;;WASOM,gBAAP,CAAwB,QAAxB,EAAkCP,MAAlC;sBACkBX,EAAE,QAAF,CAAlB;sBACkBA,EAAE,UAAF,CAAlB;WACOQ,IAAP;GAzEK,CAAP;CARF;;AAqFA,AAEA,SAASW,aAAT,CAAwBC,KAAxB,EAA+B;OACxB,IAAIvlB,IAAI,CAAb,EAAgBA,IAAIulB,MAAM5lB,MAA1B,EAAkCK,GAAlC,EAAuC;uBAClBulB,MAAMvlB,CAAN,EAASyJ,IAA5B;;;;AAIJ,SAAS+b,gBAAT,CAA2BrW,SAA3B,EAAsC;MAC9B1F,OAAO,EAAb;MACMgc,UAAU,EAAhB;MACMC,cAAc,EAApB;YACUxpB,OAAV,CAAkB,UAACypB,KAAD,EAAQ3lB,CAAR,EAAc;QACxB4lB,YAAYD,MAAMlmB,GAAxB;gBACYO,CAAZ,IAAiB2lB,MAAMlmB,GAAvB;UACM5D,MAAN,CAAaK,OAAb,CAAqB,UAACgB,KAAD,EAAQoZ,CAAR,EAAc;UAC3BuP,YAAYF,MAAMG,OAAN,CAAcxP,CAAd,CAAlB;cACQA,CAAR,IAAaqP,MAAMG,OAAN,CAAcxP,CAAd,CAAb;WACKnX,IAAL,CAAU;cAAO0mB,SAAP;eAAyBD,SAAzB;eAA2C1oB,MAAM8Q;OAA3D;KAHF;GAHF,EAJoC;;SAc7B;cAAA;oBAAA;;GAAP;;;AAGF,SAAS+X,kBAAT,CAA6Bhe,CAA7B,EAAgC;MACxB6G,UAAU7G,EAAE6G,OAAlB;MACMoX,YAAYje,EAAEie,SAApB;MACM7W,YAAYpH,EAAEoH,SAApB,CAH8B;;MAM1B1F,OAAO,EAAX;;UAEQuc,SAAR;SACO,WAAL;;gCAC8CR,iBAAiBrW,SAAjB,CAD5B;YACH8W,KADG,qBACTxc,IADS;YACIgc,OADJ,qBACIA,OADJ;YACaC,WADb,qBACaA,WADb;;eAETO,KAAP;YACMC,YAAY7yB,SAAS8yB,cAAT,CAAwBvX,OAAxB,CAAlB;YACM6T,MAAM2D,OAAOC,MAAP,YAAkBzX,OAAlB,GAA6BsX,UAAUI,KAAV,CAAgBrZ,KAA7C,EAAoDiZ,UAAUI,KAAV,CAAgBpZ,MAApE,CAAZ,CAJgB;;YAOVqZ,UAAU,IAAIH,OAAOI,KAAX,CAAiB/D,GAAjB,EAAsBhZ,IAAtB,CAAhB;YACMgd,QAAQF,QAAQG,eAAR,CAAwB,GAAxB,EAA6B,MAA7B,CAAd;cACMC,YAAN,CAAmBlB,OAAnB;cACMmB,iBAAN,CAAwBlB,WAAxB;cACMmB,KAAN,GAAc,IAAd;YACMC,QAAQP,QAAQQ,cAAR,CAAuB,GAAvB,EAA4B,OAA5B,CAAd;cACMF,KAAN,GAAc,IAAd;gBACQG,SAAR,CAAkB,OAAlB,EAA2BZ,OAAOa,IAAP,CAAYC,IAAvC;gBACQC,SAAR,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,EAA/B,EAAmC,OAAnC;gBACQC,IAAR;;;;SAIG,UAAL;;iCAC8C5B,iBAAiBrW,SAAjB,CAD7B;YACF8W,MADE,sBACRxc,IADQ;YACKgc,QADL,sBACKA,OADL;YACcC,YADd,sBACcA,WADd;;eAERO,MAAP;;YACMC,aAAY7yB,SAAS8yB,cAAT,CAAwBvX,OAAxB,CAAlB;;YACM6T,OAAM2D,OAAOC,MAAP,CAAc,MAAMzX,OAApB,EAA6BsX,WAAUI,KAAV,CAAgBrZ,KAA7C,EAAoDiZ,WAAUI,KAAV,CAAgBpZ,MAApE,CAAZ,CAJe;;;YAOTqZ,WAAU,IAAIH,OAAOI,KAAX,CAAiB/D,IAAjB,EAAsBhZ,IAAtB,CAAhB;;YACMgd,SAAQF,SAAQG,eAAR,CAAwB,GAAxB,EAA6B,CAAC,MAAD,EAAS,OAAT,CAA7B,CAAd;;eACMC,YAAN,CAAmBlB,QAAnB;;eACMmB,iBAAN,CAAwBlB,YAAxB;;eACMmB,KAAN,GAAc,IAAd;;YACMC,SAAQP,SAAQQ,cAAR,CAAuB,GAAvB,EAA4B,OAA5B,CAAd;;eACMF,KAAN,GAAc,IAAd;;iBACQG,SAAR,CAAkB,OAAlB,EAA2BZ,OAAOa,IAAP,CAAYI,GAAvC;;iBACQF,SAAR,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,EAA/B,EAAmC,OAAnC;;iBACQC,IAAR;;;;;SAGG,UAAL;SACK,YAAL;;;;;iCAIqC5B,iBAAiBrW,SAAjB,CAJlB;YAIJ8W,OAJI,sBAIVxc,IAJU;YAIGic,aAJH,sBAIGA,WAJH;;eAKVO,OAAP;;YACMC,cAAY7yB,SAAS8yB,cAAT,CAAwBvX,OAAxB,CAAlB;;YACM6T,QAAM2D,OAAOC,MAAP,YAAkBzX,OAAlB,GAA6BsX,YAAUI,KAAV,CAAgBrZ,KAA7C,EAAoDiZ,YAAUI,KAAV,CAAgBpZ,MAApE,CAAZ,CAPiB;;;YAUXqZ,YAAU,IAAIH,OAAOI,KAAX,CAAiB/D,KAAjB,EAAsBhZ,IAAtB,CAAhB;;YACM6d,UAAUf,UAAQQ,cAAR,CAAuB,GAAvB,EAA4B,OAA5B,CAAhB;;gBACQJ,YAAR,CAAqBjB,aAArB;;kBACQsB,SAAR,CAAkB,MAAlB,EAA0BZ,OAAOa,IAAP,CAAYM,GAAtC;;kBACQJ,SAAR,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,MAApC;;kBACQC,IAAR;;;;;SAGG,WAAL;;iCAC8C5B,iBAAiBrW,SAAjB,CAD5B;YACH8W,OADG,sBACTxc,IADS;YACIgc,SADJ,sBACIA,OADJ;YACaC,aADb,sBACaA,WADb;;eAETO,OAAP;;YACMC,cAAY7yB,SAAS8yB,cAAT,CAAwBvX,OAAxB,CAAlB;;YACM6T,QAAM2D,OAAOC,MAAP,CAAc,MAAMzX,OAApB,EAA6BsX,YAAUI,KAAV,CAAgBrZ,KAA7C,EAAoDiZ,YAAUI,KAAV,CAAgBpZ,MAApE,CAAZ,CAJgB;;;YAOVqZ,YAAU,IAAIH,OAAOI,KAAX,CAAiB/D,KAAjB,EAAsBhZ,IAAtB,CAAhB;;YACMgd,UAAQF,UAAQG,eAAR,CAAwB,GAAxB,EAA6B,MAA7B,CAAd;;gBACMC,YAAN,CAAmBlB,SAAnB;;gBACMmB,iBAAN,CAAwBlB,aAAxB;;gBACMmB,KAAN,GAAc,IAAd;;YACMC,UAAQP,UAAQQ,cAAR,CAAuB,GAAvB,EAA4B,OAA5B,CAAd;;gBACMF,KAAN,GAAc,IAAd;;kBACQG,SAAR,CAAkB,OAAlB,EAA2BZ,OAAOa,IAAP,CAAYO,IAAvC;;kBACQL,SAAR,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B,EAA/B,EAAmC,OAAnC;;kBACQC,IAAR;;;;;SAIG,cAAL;;aACO,IAAIpnB,IAAI,CAAb,EAAgBA,IAAImP,UAAUxP,MAA9B,EAAsCK,GAAtC,EAA2C;cACnCynB,MAAM,EAAZ;;eACK,IAAInR,IAAI,CAAb,EAAgBA,IAAInH,UAAUnP,CAAV,EAAaL,MAAjC,EAAyC2W,GAAzC,EAA8C;gBACxCnX,IAAJ,CAAS;iBAAImX,CAAJ;iBAAUnH,UAAUnP,CAAV,EAAasW,CAAb;aAAnB;;;eAEGnX,IAAL,CAAU;iBAAM,UAAUa,IAAI,CAAd,CAAN;oBAAgCynB;WAA1C;SANiB;;;;;;;;;;;;;;;;;AAuBzB,SAASC,iBAAT,CAA4BC,IAA5B,EAAkC;MAC1BC,kBAAkBD,IAAxB;;OACK,IAAI3nB,IAAI,CAAb,EAAgBA,IAAI4nB,gBAAgBjoB,MAApC,EAA4CK,GAA5C,EAAiD;QACzC6nB,SAAS1D,EAAEyD,gBAAgB5nB,CAAhB,CAAF,EAAsB8nB,IAAtB,CAA2B,uBAA3B,CAAf;;QACID,OAAOloB,MAAP,GAAgB,CAApB,EAAuB;;UAEjBooB,cAAc,EAAlB;UACIC,cAAc,EAAlB;UACIC,aAAa,CAAjB;UACMC,UAAU,EAAhB;UACIC,cAAc,CAAlB;UACMC,eAAe,EAArB;;WACK,IAAI9R,IAAI,CAAb,EAAgBA,IAAIuR,OAAOloB,MAA3B,EAAmC2W,GAAnC,EAAwC;YAChC+R,aAAalE,EAAE0D,OAAOvR,CAAP,CAAF,EAAa7M,IAAb,CAAkB,WAAlB,CAAnB;YACM6e,YAAYnE,EAAE0D,OAAOvR,CAAP,CAAF,EAAa7M,IAAb,CAAkB,UAAlB,CAAlB,CAFsC;;YAIlCwe,eAAe,CAAnB,EAAsB;wBACNI,UAAd;wBACcC,SAAd;kBACQH,WAAR,IAAuBF,UAAvB;uBACaE,WAAb,IAA4BE,UAA5B;;SAJF,MAMO;cACDA,eAAeN,WAAf,IAA8BO,cAAcN,WAAhD,EAA6D;0BAC7CK,UAAd;0BACcC,SAAd;;oBAEQH,WAAR,IAAuBF,UAAvB;yBACaE,WAAb,IAA4BE,UAA5B;WALF,MAMO,IAAIA,eAAeN,WAAf,IAA8BO,cAAcN,WAAhD,EAA6D;0BACpDK,UAAd;0BACcC,SAAd;;oBAEQH,WAAR,IAAuBF,UAAvB;yBACaE,WAAb,IAA4BE,UAA5B;yBACa,CAAb;WANK,MAOA,IAAIA,eAAeN,WAAf,IAA8BlK,OAAOyK,SAAP,IAAoBzK,OAAOmK,WAAP,CAAtD,EAA2E;0BAClEK,UAAd;0BACcC,SAAd;;oBAEQH,WAAR,IAAuBF,UAAvB;yBACaE,WAAb,IAA4BE,UAA5B;yBACa,CAAb;WANK,MAOA,IAAIA,eAAeN,WAAf,IAA8BlK,OAAOyK,SAAP,IAAoBzK,OAAOmK,WAAP,CAAtD,EAA2E;0BAClEK,UAAd;0BACcC,SAAd;;yBAEaJ,QAAQC,WAAR,IAAuB,CAApC;;SAnCkC;;;YAuChCI,SAASC,cAAcJ,aAAaD,WAAb,CAAd,EAAyCF,UAAzC,CAAf;UACEJ,OAAOvR,CAAP,CAAF,EAAaxgB,IAAb,CAAkByyB,MAAlB;;;;;;AAMR,SAASC,aAAT,CAAwBC,MAAxB,EAAgCC,GAAhC,EAAqC;MAC/BC,UAAU,EAAd;;UACQF,MAAR;SACO,cAAL;gBACYC,MAAM,IAAhB;;;SAEG,cAAL;gBACYA,MAAM,IAAhB;;;SAEG,eAAL;gBACYE,aAAaF,GAAb,EAAkB,WAAlB,IAAiC,IAA3C;;;SAEG,eAAL;gBACYE,aAAaF,GAAb,EAAkB,WAAlB,IAAiC,IAA3C;;;SAGG,eAAL;gBACYE,aAAaF,GAAb,EAAkB,WAAlB,IAAiC,IAA3C;;;SAEG,eAAL;gBACYE,aAAaF,GAAb,EAAkB,WAAlB,IAAiC,IAA3C;;;SAGG,eAAL;gBACYG,SAASH,GAAT,IAAgB,IAA1B;;;SAEG,eAAL;gBACYG,SAASH,GAAT,IAAgB,IAA1B;;;SAEG,cAAL;gBACYI,aAAaC,MAAb,CAAoBL,GAApB,IAA2B,GAArC;;;;gBAGUA,GAAV;;;SAEGC,OAAP;;;AAGF,SAASE,QAAT,CAAmBH,GAAnB,EAAwB;MAClB,CAAC,CAACA,GAAN,EAAW,OAAO,KAAP;MACLM,SAASxjB,OAAO,CAACkjB,GAAR,EAAarQ,KAAb,CAAmB,EAAnB,CAAf;MACM5Y,MAAM,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,IAAvD,EACV,EADU,EACN,GADM,EACD,IADC,EACK,KADL,EACY,IADZ,EACkB,GADlB,EACuB,IADvB,EAC6B,KAD7B,EACoC,MADpC,EAC4C,IAD5C,EAEV,EAFU,EAEN,GAFM,EAED,IAFC,EAEK,KAFL,EAEY,IAFZ,EAEkB,GAFlB,EAEuB,IAFvB,EAE6B,KAF7B,EAEoC,MAFpC,EAE4C,IAF5C,CAAZ;MAGIwpB,QAAQ,EAAZ;MACIjpB,IAAI,CAAR;;SACOA,GAAP;YAAoB,CAACP,IAAI,CAACupB,OAAOppB,GAAP,EAAD,GAAiBI,IAAI,EAAzB,KAAiC,EAAlC,IAAwCipB,KAAhD;;;SACJ,IAAIniB,KAAJ,CAAU,CAACkiB,OAAOE,IAAP,CAAY,EAAZ,CAAD,GAAmB,CAA7B,CAAD,CAAkCA,IAAlC,CAAuC,GAAvC,IAA8CD,KAArD;;;AAGF,IAAMH,eAAeK,eAAe,CAClC,CAAC,IAAD,EAAO,EAAP,CADkC,EAElC,CAAC,GAAD,EAAM,GAAN,CAFkC,EAGlC,CAAC,GAAD,EAAM,GAAN,CAHkC,EAIlC,CAAC,GAAD,EAAM,GAAN,CAJkC,EAKlC,CAAC,GAAD,EAAM,GAAN,CALkC,EAMlC,CAAC,EAAD,EAAK,GAAL,CANkC,EAOlC,CAAC,EAAD,EAAK,GAAL,CAPkC,EAQlC,CAAC,EAAD,EAAK,GAAL,CARkC,EASlC,CAAC,EAAD,EAAK,GAAL,CATkC,EAUlC,CAAC,EAAD,EAAK,GAAL,CAVkC,EAWlC,CAAC,EAAD,EAAK,GAAL,CAXkC,EAYlC,CAAC,EAAD,EAAK,GAAL,CAZkC,EAalC,CAAC,EAAD,EAAK,GAAL,CAbkC,EAclC,CAAC,EAAD,EAAK,GAAL,CAdkC,EAelC,CAAC,CAAD,EAAI,GAAJ,CAfkC,EAgBlC,CAAC,CAAD,EAAI,GAAJ,CAhBkC,EAiBlC,CAAC,CAAD,EAAI,GAAJ,CAjBkC,EAkBlC,CAAC,CAAD,EAAI,GAAJ,CAlBkC,EAmBlC,CAAC,CAAD,EAAI,GAAJ,CAnBkC,EAoBlC,CAAC,CAAD,EAAI,GAAJ,CApBkC,EAqBlC,CAAC,CAAD,EAAI,GAAJ,CArBkC,EAsBlC,CAAC,CAAD,EAAI,GAAJ,CAtBkC,EAuBlC,CAAC,CAAD,EAAI,GAAJ,CAvBkC,EAwBlC,CAAC,IAAD,EAAO,KAAP,CAxBkC,EAyBlC,CAAC,IAAD,EAAO,KAAP,CAzBkC,EA0BlC,CAAC,iBAAD,EAAoB,OAApB,CA1BkC,EA2BlC,CAAC,WAAD,EAAc,KAAd,CA3BkC,CAAf,CAArB;;AA8BA,SAASA,cAAT,CAAyB1B,GAAzB,EAA8B;;SAErB;YACG,gBAAUvH,CAAV,EAAa;UACfkJ,MAAM,EAAV;QACEC,IAAF,CAAO5B,GAAP,EAAY,YAAY;YAChBiB,MAAM,KAAK,CAAL,CAAZ;;YACI7gB,SAAS6gB,GAAT,IAAgB,CAApB,EAAuB;iBACdxI,KAAKwI,GAAZ,EAAiBxI,KAAKwI,GAAtB;mBAAkC,KAAK,CAAL,CAAP;;SAD7B,MAEO;gBACCU,IAAI5d,OAAJ,CAAYkd,GAAZ,EAAiB,KAAK,CAAL,CAAjB,CAAN;;OALJ;aAQOU,GAAP;;GAXJ;;;AAgBF,SAASR,YAAT,CAAuBF,GAAvB,EAA4BY,UAA5B,EAAwC;QAChCzL,OAAO6K,GAAP,IAAc,CAApB;MACIa,OAAO,EAAX;;MACID,eAAe,WAAnB,EAAgC;WACvB,CAAC,CAAEZ,MAAM,EAAN,IAAY,CAAb,GAAkBljB,OAAOyD,YAAP,CAAoByf,MAAM,EAAN,GAAW,EAA/B,CAAlB,GAAuD,EAAxD,IAA8DljB,OAAOyD,YAAP,CAAoByf,MAAM,EAAN,GAAW,EAA/B,CAA/D,EAAmGc,WAAnG,EAAP;GADF,MAEO,IAAIF,eAAe,WAAnB,EAAgC;WAC9B,CAAC,CAAEZ,MAAM,EAAN,IAAY,CAAb,GAAkBljB,OAAOyD,YAAP,CAAoByf,MAAM,EAAN,GAAW,EAA/B,CAAlB,GAAuD,EAAxD,IAA8DljB,OAAOyD,YAAP,CAAoByf,MAAM,EAAN,GAAW,EAA/B,CAA/D,EAAmG/S,WAAnG,EAAP;;;SAEK4T,IAAP;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}