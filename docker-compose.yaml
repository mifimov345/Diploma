version: '3.8'

services:
  auth_postgres:
    image: postgres:15
    container_name: auth_postgres
    restart: always
    environment:
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: strongpassword
      POSTGRES_DB: authdb
    ports:
      - "5432:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - myapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 5s

  file_postgres:
    image: postgres:15
    container_name: file_postgres
    restart: always
    environment:
      POSTGRES_USER: fileuser
      POSTGRES_PASSWORD: strongpassword
      POSTGRES_DB: filedb
    ports:
      - "5433:5432"
    volumes:
      - file_postgres_data:/var/lib/postgresql/data
    networks:
      - myapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fileuser -d filedb"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 5s

  authservice:
    build:
      context: ./Backend/AuthService
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=auth_postgres;Port=5432;Database=authdb;Username=authuser;Password=strongpassword
      - Jwt__Key=${JWT_KEY?Error - JWT_KEY is not set}
      - Jwt__Issuer=${JWT_ISSUER?Error - JWT_ISSUER is not set}
      - Jwt__Audience=${JWT_AUDIENCE?Error - JWT_AUDIENCE is not set}
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - myapp-network
    depends_on:
      auth_postgres:
        condition: service_healthy

  fileservice:
    build:
      context: ./Backend/FileService
      dockerfile: Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=file_postgres;Port=5432;Database=filedb;Username=fileuser;Password=strongpassword
      - Jwt__Key=${JWT_KEY?Error - JWT_KEY is not set}
      - Jwt__Issuer=${JWT_ISSUER?Error - JWT_ISSUER is not set}
      - Jwt__Audience=${JWT_AUDIENCE?Error - JWT_AUDIENCE is not set}
      - FrontendUrl=${FRONTEND_URL?Error - FRONTEND_URL is not set}
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - fileservice-uploads:/app/uploads
    networks:
      - myapp-network
    depends_on:
      file_postgres:
        condition: service_healthy
      authservice:
        condition: service_started

  searchservice:
    build:
      context: ./Backend/SearchService
      dockerfile: Dockerfile
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - LuceneIndexPath=/app/lucene_index
      - TZ=Europe/Moscow
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - searchservice-index:/app/lucene_index
    networks:
      - myapp-network
    depends_on:
      fileservice:
        condition: service_started

  backendgateway:
    build:
      context: ./Backend/BackendGateway
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - TZ=Europe/Moscow
      - FrontendUrl=${FRONTEND_URL?Error - FRONTEND_URL is not set}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - myapp-network
    depends_on:
      authservice:
        condition: service_started
      fileservice:
        condition: service_started
      searchservice:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - API_BASE_URL=http://backendgateway
    networks:
      - myapp-network
    depends_on:
      backendgateway:
        condition: service_started

volumes:
  auth_postgres_data:
  file_postgres_data:
  fileservice-uploads:
  searchservice-index:

networks:
  myapp-network:
    driver: bridge
